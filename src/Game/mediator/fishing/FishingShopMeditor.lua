---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/8/9 2:09 PM
---
--[[
钓场商店Mediator
--]]
local Mediator = mvc.Mediator
---@class FishingShopMeditor:Mediator
local FishingShopMeditor = class("FishingShopMeditor", Mediator)

local NAME = "FishingShopMeditor"
---@type UIManager
local uiMgr = AppFacade.GetInstance():GetManager("UIManager")
---@type GameManager
local gameMgr  = AppFacade.GetInstance():GetManager("GameManager")
local mallConfig = app.fishingMgr:GetMallConfig()
local UnionShopGoodsCell = require('home.UnionShopGoodsCell')

function FishingShopMeditor:ctor( params, viewComponent )
    params = params or {}
    self.super:ctor(NAME,viewComponent)
    self.args = checktable(params) or {}
    self.mallConfigData = self:GetShopKindsData()
    self.gridViewData = {} -- 刷新gridView 的数据源
    self.currentClick = 1
    self.goodsName = ""
    if params.goodsId then
        self.currentClick = self:GetBuyTypeByGoodsId(params.goodsId)
        local goodConf = CommonUtils.GetConfig('goods', 'goods', params.goodsId) or {}
        self.goodsName = goodConf.name or ""
    end
    if params.goShopIndex then
        self.currentClick =  checkint( params.goShopIndex)
    end

end
--[[
　　---@Description: 获取到商品消耗的分类
　　---@param :
　  ---@return : data
　　---@author : xingweihao
　　---@date : 2018/8/9 7:45 PM
--]]
function FishingShopMeditor:GetShopKindsData()
    local data = {
        ["1"] = {},
        ["2"] = {},
        ["3"] = {},
        ["4"] = {}
    }

    for i, v in pairs(mallConfig) do
        local consume =  v.consume[1]
        if consume then
            local rewards =  clone(v.rewards[1])
            if checkint(consume.goodsId) == WATER_CRYSTALLIZATION_ID then
                data['1'][#data['1']+1] =rewards
            elseif checkint(consume.goodsId) == WIND_CRYSTALLIZATION_ID then
                data['2'][#data['2']+1] = rewards
            elseif checkint(consume.goodsId) ==  RAY_CRYSTALLIZATION_ID then
                data['3'][#data['3']+1] = rewards
            else
                data['4'][#data['4']+1] = rewards
            end
            rewards.index = i
        end
    end
    for i, goodData in pairs(data) do
       table.sort(goodData , function(aGood, bGood)
           if  checkint(aGood.index) >=  checkint(bGood.index) then
                return false
           end
           return true
        end)
    end
    return data
end
function FishingShopMeditor:GetBuyTypeByGoodsId(goodsId)
    for i, v in pairs(mallConfig) do
        local rewards =  v.rewards[1]
        if rewards then
            if checkint(rewards.goodsId) == WATER_CRYSTALLIZATION_ID then
                return 1
            elseif checkint(rewards.goodsId) == WIND_CRYSTALLIZATION_ID then
                return 2
            elseif checkint(rewards.goodsId) ==  RAY_CRYSTALLIZATION_ID then
                return 3
            else
                return 4
            end
        end
    end
    return 1
end
function FishingShopMeditor:InterestSignals()
    local signals = {
        POST.FISHPLACE_MALL_BUY.sglName 
    }
    return signals
end
function FishingShopMeditor:ProcessSignal( signal )
    local name = signal:GetName()
    local datas = signal:GetBody()
    if name ==  POST.FISHPLACE_MALL_BUY.sglName then
        uiMgr:AddDialog('common.RewardPopup', datas)
        local requestData  = datas.requestData
        local mallId = requestData.mallId
        local num =  requestData.num
        local mallOneConfig = mallConfig[tostring(mallId)]
        local consume = mallOneConfig.consume[1]
        local consumeNum = - (num * checkint(consume.num))
        CommonUtils.DrawRewards({{ goodsId = consume.goodsId , num = consumeNum}})
        local viewComponent = self:GetViewComponent()
        if viewComponent and (not tolua.isnull(viewComponent)) then
            viewComponent:UpdateCountUI()
        end
    end
end
function FishingShopMeditor:Initial( key )
    self.super.Initial(self,key)
    local scene = uiMgr:GetCurrentScene()
    local viewComponent  = require( 'Game.views.fishing.FishingShopView' ).new()
    self:SetViewComponent(viewComponent)
    viewComponent:setPosition(display.center)
    scene:AddDialog(viewComponent)
    viewComponent.viewData_.gridView:setDataSourceAdapterScriptHandler(handler(self,self.GoodsListDataSource))
    display.commonUIParams(viewComponent.eaterLayer , { enable = true ,  cb = function()
         self:GetFacade():UnRegsitMediator(NAME)
    end})
    local  viewData_ = viewComponent.viewData_
    for index , toggleView in pairs(viewData_.myNodes) do
        display.commonUIParams(toggleView , {cb = handler(self ,self.SetTabClick) })
        toggleView:setTag(index)
    end
    self:SetTabClick(viewData_.myNodes[self.currentClick])
    viewData_.researchDelete:setVisible(false)
    display.commonUIParams(viewData_.researchDelete , {cb = handler(self, self.DeleteReseachClick)})
    if string.len(self.goodsName) > 0  then
        viewData_.editorText:setText(self.goodsName)
        self:EidtorClick(viewData_.editorText)
    end
    viewData_.editorText:registerScriptEditBoxHandler(function(eventType,sender)
        if eventType == 'began' then  -- 输入开始
        elseif eventType == 'ended' then  -- 输入结束
            self:EidtorClick(sender)
        elseif eventType == 'changed' then  -- 内容变化

        elseif eventType == 'return' then  -- 从输入返回
            self:EidtorClick(sender)
        end
    end)
end

function FishingShopMeditor:DeleteReseachClick(sender)
    local viewData_ = self:GetViewComponent().viewData_
    local editorText = viewData_.editorText
    editorText:setText("")
    editorText:setPlaceHolder(__('输入关键字'))
    self:SwitchTagGriew( self.currentClick)
end
function FishingShopMeditor:EidtorClick(sender)
    local str = sender:getText()
    if str ~=  '' then
        local data = {}
        for i, v in pairs(self.gridViewData) do
            local _x , _y = string.find(v.name , str )
            if _x then
                data[#data+1] = v
            end
        end
        self:SwitchGridViewByData(data)
    end
    local viewData_ = self:GetViewComponent().viewData_
    viewData_.researchDelete:setVisible(true)

end
--[[
　　---@Description: 选中tab 项的按钮
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/9 4:06 PM
--]]
function FishingShopMeditor:SetTabClick(sender)
    local viewData_ = self:GetViewComponent().viewData_
    local tag = sender:getTag()
    for index , toggleView in pairs(viewData_.myNodes) do
        local fishGoldName = toggleView:getChildByName("fishGoldName")
        if index == tag  then
            toggleView:setChecked(true)
            toggleView:setEnabled(false)
            display.commonLabelParams(fishGoldName ,{reqW = 135, color = "#df6428"})
         else
            toggleView:setChecked(false )
            toggleView:setEnabled(true )
            display.commonLabelParams(fishGoldName ,{reqW = 135,color = "#dbc5b8"})
        end
    end
    self.currentClick = tag
    self:SwitchTagGriew(tag)
end
--[[
　　---@Description: 切换tab 页进行刷新操作
　　---@param : tag 选中tab 的类型
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/9 4:34 PM
--]]
function FishingShopMeditor:SwitchTagGriew(tag)
    local data = self.mallConfigData[tostring(tag)]
    for index, goods   in pairs(data) do
        local goodData  = CommonUtils.GetConfig('goods','goods' , goods.goodsId ) or {}
        goods.name = goodData.name or ""
    end
    self:SwitchGridViewByData(data)
end
--[[
　　---@Description: 根据data 刷新gridView
　　---@param : data table 刷新的数据
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/9 4:34 PM
--]]
function FishingShopMeditor:SwitchGridViewByData(data)
    local viewData_ = self:GetViewComponent().viewData_
    self.gridViewData = data
    viewData_.gridView:setCountOfCell(#data)
    viewData_.gridView:reloadData()
end
--[[
列表处理
--]]
function FishingShopMeditor:GoodsListDataSource( p_convertview, idx )
    local pCell = p_convertview
    local index = idx + 1
    local cSize = self:GetViewComponent().viewData_.listCellSize
    local data = self.gridViewData[index]
    if pCell == nil then
        pCell = UnionShopGoodsCell.new(cSize)
        pCell.sellOut:setVisible(false)
        pCell.bgBtn:setOnClickScriptHandler(handler(self, self.CommodityCallback))
        pCell.goodsIcon.showAmount = false
        if pCell.goodsIcon.infoLabel then
            pCell.goodsIcon.infoLabel:setVisible(false)
        end
    end
    xTry(function()
        pCell.goodsIcon:RefreshSelf({goodsId = data.goodsId  })
        display.commonLabelParams(pCell.goodsName , {  text = data.name })
        local newestQuestId = gameMgr:GetUserInfo().newestQuestId
        local mallOneConfig = mallConfig[tostring(data.index)]
        if checkint(mallOneConfig.regionId)  >=  newestQuestId  then
            local questData = CommonUtils.GetConfigAllMess('quest','quest')
            local questOneData = questData[tostring(mallOneConfig.regionId)] or {}
            local questName = questOneData.name or ""
             local label = display.newLabel(0,0, fontWithColor('10', { hAlign = display.TAC ,  w = 200,  color = 'ffffff' , text = string.fmt(__('通关_name_'),{_name_ = questName})  }))
            local contentSize = cc.size(227 ,50)
            local layer = display.newLayer(0,0 , {size = contentSize  , color = cc.c4b(0,0,0,0) })
            layer:addChild(label)
            label:setPosition(contentSize.width/2 , contentSize.height /2 )
            display.reloadRichLabel(pCell.priceLabel , {c = {
                {node =  layer  }
            } })
            --CommonUtils.SetNodeScale(pCell.priceLabel,{width = 200 }  )
            pCell.lockMask:setVisible(true)
        else
            display.reloadRichLabel(pCell.priceLabel , { c = {
                fontWithColor('14', {text = mallOneConfig.consume[1].num }),
                {img = CommonUtils.GetGoodsIconPathById(mallOneConfig.consume[1].goodsId) , scale = 0.2 }
            } })
            CommonUtils.AddRichLabelTraceEffect(pCell.priceLabel)

            pCell.lockMask:setVisible(false)
        end
        pCell.bgBtn:setTag(index)
    end,__G__TRACKBACK__)
    return pCell
end
--[[
商品点击回调
--]]
function FishingShopMeditor:CommodityCallback( sender )
    PlayAudioByClickNormal()
    local tag = sender:getTag()
    local data = self.gridViewData[tag]
    local tempdata = {}
    tempdata.goodsId = data.goodsId
    local newestQuestId = gameMgr:GetUserInfo().newestQuestId
    local mallOneConfig = mallConfig[tostring(data.index)]
    if checkint(mallOneConfig.regionId)  >=  newestQuestId  then
        local questData = CommonUtils.GetConfigAllMess('quest','quest')
        local questOneData = questData[tostring(mallOneConfig.regionId)] or {}
        local questName = questOneData.name or ""
       uiMgr:ShowInformationTips(string.format('%s %s', __('请先通关普通关卡') ,questName))
        return
    end
    local mallOneConfig = mallConfig[tostring(data.index)]
    tempdata.currency = mallOneConfig.consume[1].goodsId
    tempdata.sale = { [tostring(tempdata.currency)] = mallOneConfig.consume[1].num  }
    tempdata.price = mallOneConfig.consume[1].num
    tempdata.stock = -1


    local scene = uiMgr:GetCurrentScene()

    local marketPurchasePopup  = require('Game.views.ShopPurchasePopup').new({
        tag = 5001,
        mediatorName = "FishingShopMeditor",
        data = tempdata,
        btnTag = tag,
        showChooseUi = true
    })
    display.commonUIParams(marketPurchasePopup, {ap = cc.p(0.5, 0.5), po = cc.p(display.width * 0.5, display.height * 0.5)})
    marketPurchasePopup:setTag(5001)
    scene:AddDialog(marketPurchasePopup)
    marketPurchasePopup.viewData.purchaseBtn:setOnClickScriptHandler(handler(self, self.PurchaseBtnCallback))
    marketPurchasePopup.viewData.purchaseBtn:setTag(tag)
end

--[[
购买按钮点击回调
--]]
function FishingShopMeditor:PurchaseBtnCallback( sender )
    PlayAudioByClickNormal()
    local tag = sender:getTag()
    local purchaseNum = sender:getUserTag()
    local datas = self.gridViewData[tag]
    local mallOneConfig = mallConfig[tostring(datas.index)]
    local currency = mallOneConfig.consume[1].goodsId
    local money = CommonUtils.GetCacheProductNum(currency)
    local price = mallOneConfig.consume[1].num * checkint(purchaseNum)
    if checkint(money) >= checkint(price) then
        self:SendSignal(POST.FISHPLACE_MALL_BUY.cmdName ,{mallId = datas.index , num = purchaseNum })
    else
        if GAME_MODULE_OPEN.NEW_STORE and checkint(currency) == DIAMOND_ID then
            app.uiMgr:showDiamonTips()
        else
            local goodOneData = CommonUtils.GetConfig('goods','goods',currency ) or {}
            local des = goodOneData.name or __('货币')
            uiMgr:ShowInformationTips(string.fmt(__('_des_不足'),{_des_ = des}))
        end
    end
end

function FishingShopMeditor:OnRegist(  )
    regPost(POST.FISHPLACE_MALL_BUY)
end

function FishingShopMeditor:OnUnRegist(  )
    unregPost(POST.FISHPLACE_MALL_BUY)
    local viewComponent = self:GetViewComponent()
    if viewComponent and (not tolua.isnull(viewComponent))  then
        viewComponent:stopAllActions()
        viewComponent:runAction(cc.RemoveSelf:create())
    end
end

return FishingShopMeditor