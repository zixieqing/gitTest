---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/10/12 5:17 PM
---
---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/10/12 3:27 PM
---
---@class AniversaryRecommdView
local AniversaryRecommdView = class('AniversaryRecommdView', function()
    local node = CLayout:create(display.size)
    node.name  = 'Game.views.artifact.AniversaryRecommdView'
    node:setName('AniversaryRecommdView')
    node:enableNodeEvents()
    return node
end)
local anniversaryManager = app.anniversaryMgr
local RECOMMEND_SORT_KEY_TABLE = {
    ["1"] = { key = "type", text = app.anniversaryMgr:GetPoText(__('类型：')) },
    ["2"] = { key = "origin", text = app.anniversaryMgr:GetPoText(__('源地：')) },
    ["3"] = { key = "age", text = app.anniversaryMgr:GetPoText(__('诞生年代：')) },
    ["4"] = { key = "descr", text = app.anniversaryMgr:GetPoText(__('描述：')) },
    ["5"] = { key = "appearance", text = app.anniversaryMgr:GetPoText(__('外观：')) }
}
local newLabel             = display.newLabel
local newNSprite           = display.newNSprite
local newButton            = display.newButton
local newLayer             = display.newLayer
local commonLabelParams    = display.commonLabelParams
local RES_DICT             = {
    ANNI_STALL_BG_PAPER           = app.anniversaryMgr:GetResPath('ui/anniversary/anni_stall_bg_paper.png'),
    ANNI_STALL_DECRYPT_BG_LOCK    = app.anniversaryMgr:GetResPath('ui/anniversary/anni_stall_decrypt_bg_lock.png'),
    ANNI_STALL_DECRYPT_BG_DEFAULT = app.anniversaryMgr:GetResPath('ui/anniversary/anni_stall_decrypt_bg_default.png'),
    COMMON_TITLE_5                = app.anniversaryMgr:GetResPath('ui/common/common_title_5.png'),
    COMMON_HINT_CIRCLE_RED_ICO    = app.anniversaryMgr:GetResPath('ui/common/common_hint_circle_red_ico.png'),
    ANNI_STALL_ICON_FOODS         = app.anniversaryMgr:GetResPath('ui/anniversary/anni_stall_icon_foods.png'),
}
function AniversaryRecommdView:ctor(param)
    param = param or {}
    self.data = param
    self.applyLeftSeconds = checkint(self.data.isAllShow)   == 1 and -1 or 1000
    self.recommendRecipeId = self:GetRecommendRecipeId()
    local parserConfig =  anniversaryManager:GetConfigParse()
    local parameterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.PARAMETER)
    local unlockTime =  parameterConfig["1"].unlockTime
    self.unlockTable = {
        ["1"] = {unlock = false , time =unlockTime[1]  },
        ["2"] = {unlock = false , time = unlockTime[2]  },
        ["3"] = {unlock = false , time = unlockTime[3] },
        ["4"] = {unlock = false , time = unlockTime[4] },
        ["5"] = {unlock = false , time =unlockTime[5] }
    }
    self:GetUnLockTable()
    self:InitUI()
    self:UpdateUI()
end
function AniversaryRecommdView:GetRecommendRecipeId()
    local parserConfig = anniversaryManager:GetConfigParse()
    local recipeAttr =anniversaryManager:GetConfigDataByName(parserConfig.TYPE.FOOD_ATTR)
    local recommendRecipeId = nil
    local days = checkint(anniversaryManager.homeData.day)
    for i, v in pairs(recipeAttr) do
        if  checkint(v.day) == checkint(days) then
            recommendRecipeId  = checkint(v.id)
            break
        end
    end
    return recommendRecipeId or 1
end
function AniversaryRecommdView:GetUnLockTable()
    if self.applyLeftSeconds <= 0  then
        self.unlockTable = {
            ["1"] = {unlock = true, time = "00:00:00"  },
            ["2"] = {unlock = true, time = "00:00:00"  },
            ["3"] = {unlock = true, time = "00:00:00"  },
            ["4"] = {unlock = true, time = "00:00:00"  },
            ["5"] = {unlock = true, time = "00:00:00"  }
        }
    else
        for i = 1 , checkint(self.data.attrNum)  do
            self.unlockTable[tostring(i)].unlock = true
        end
    end

end
function AniversaryRecommdView:InitUI()
    local view = newLayer(display.cx, display.cy, { ap = display.CENTER, size = display.size })
    self:addChild(view)
    local closeLayer = newLayer(display.cx, display.cy, { ap = display.CENTER, color = cc.c4b(0, 0, 0, 175), enable = true, cb = function()
        self:removeFromParent()
    end })
    view:addChild(closeLayer)
    local contentLayerSize = cc.size(855, 593)
    local contentLayer = newLayer(667, 375,
                                  { ap = display.CENTER, size =contentLayerSize  })
    contentLayer:setPosition(display.cx + 0, display.cy + 0)
    view:addChild(contentLayer)
    local swallowLayer = newLayer(0, 0,
                                  { ap = display.LEFT_BOTTOM, color = cc.r4b(0), size = cc.size(855, 593), enable = true })
    contentLayer:addChild(swallowLayer)

    local bgImage = newNSprite(RES_DICT.ANNI_STALL_BG_PAPER, 0, 0,
                               { ap = display.LEFT_BOTTOM, tag = 49 })
    bgImage:setScale(1, 1)
    contentLayer:addChild(bgImage)

    local titleButon = newButton(410, 549, { ap = display.CENTER, n = RES_DICT.COMMON_TITLE_5, s = RES_DICT.COMMON_TITLE_5, scale9 = true,  size = cc.size(186, 31), tag = 50 })
    commonLabelParams(titleButon, { text = app.anniversaryMgr:GetPoText(__('今日推荐')), fontSize = 24, color = '#414146' , paddingW = 30 })
    contentLayer:addChild(titleButon)

    local listView = CListView:create(cc.size(820, 341))
    listView:setDirection(eScrollViewDirectionVertical)
    listView:setAnchorPoint(display.CENTER_TOP)
    listView:setPosition(contentLayerSize.width/2+5 , contentLayerSize.height -230)
    contentLayer:addChild(listView)
    local questionLabel = newLabel(407, 394,
                                   fontWithColor(16,{ ap = display.CENTER, text = "xxxx", fontSize = 24, tag = 70 }))
    contentLayer:addChild(questionLabel)

    local iconBtn = newNSprite(RES_DICT.ANNI_STALL_ICON_FOODS, 410, 462,
                               { ap = display.CENTER, tag = 69 })
    iconBtn:setScale(1, 1)
    contentLayer:addChild(iconBtn)

    self.viewData = {
        contentLayer  = contentLayer,
        swallowLayer  = swallowLayer,
        bgImage       = bgImage,
        titleButon    = titleButon,
        listView      = listView,
        questionLabel = questionLabel,
        iconBtn       = iconBtn,
    }
end
function AniversaryRecommdView:UpdateUI()
    local viewData = self.viewData
    for i = 1 , 5 do
        local cellLayout = self:CreateCellLayout()
        self:UpdateCellIndex(i, cellLayout)
        viewData.listView:insertNodeAtLast(cellLayout)
    end
    viewData.listView:reloadData()

    if self.applyLeftSeconds <=  0  then
        local parserConfig = anniversaryManager:GetConfigParse()
        local foodAttrConfig  = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.FOOD_ATTR)
        local foodRecommendConfig = foodAttrConfig[tostring(self.recommendRecipeId)]
        local name = foodRecommendConfig.name
        display.commonLabelParams(self.viewData.questionLabel , {text = name })
        viewData.iconBtn:setTexture(anniversaryManager:GetAnniversaryRecipePathByRecipId(self.recommendRecipeId))
        viewData.iconBtn:setScale(0.8)
    end
end
function AniversaryRecommdView:CreateCellLayout()
    local cellSize   = cc.size(820, 68)
    local cellLayout = newLayer(0, 273,
                                { ap = display.LEFT_BOTTOM, color = cc.r4b(0), size = cellSize, enable = true })

    local bgImage    = newNSprite(RES_DICT.ANNI_STALL_DECRYPT_BG_DEFAULT, 0, 0,
                                  { ap = display.LEFT_BOTTOM, tag = 66, scale9 = true })
    bgImage:setScale(1, 1)
    cellLayout:addChild(bgImage)
    --local redImage = newNSprite(RES_DICT.COMMON_HINT_CIRCLE_RED_ICO, 794, 49,
    --                            { ap = display.CENTER, tag = 67 })
    --redImage:setScale(1, 1)
    local richLabel = display.newRichLabel(cellSize.width / 2, 20, { w = 70, ap = ui.cb, c = {
        fontWithColor(14, { text = 'xxxxxxxxxxxx' })
    } })
    cellLayout:setVisible(false)
    cellLayout:addChild(richLabel)
    --cellLayout:addChild(redImage)
    cellLayout.viewData = {
        --redImage  = redImage,
        bgImage   = bgImage,
        richLabel = richLabel,
    }
    return cellLayout
end
function AniversaryRecommdView:UpdateCellIndex(index, cellNode)
    local unlock     = self.unlockTable[tostring(index)].unlock
    local cellLayout = cellNode or self.viewData.listView:getNodeAtIndex(index - 1 )
    if cellLayout and (not tolua.isnull(cellLayout)) then
        cellLayout:setVisible(true)
        local viewData   = cellLayout.viewData
        if unlock  then
            local parserConfig = anniversaryManager:GetConfigParse()
            local foodAttrConfig  = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.FOOD_ATTR)
            local foodRecommendConfig = foodAttrConfig[tostring(self.recommendRecipeId)]
            local turnTable = foodRecommendConfig.turn
            local keyIndex = turnTable[index]
            viewData.bgImage:setTexture(RES_DICT.ANNI_STALL_DECRYPT_BG_DEFAULT)

            display.reloadRichLabel(viewData.richLabel , {c= {
                fontWithColor(6, {text = RECOMMEND_SORT_KEY_TABLE[tostring(keyIndex)].text }) ,
                fontWithColor(16, {text =foodRecommendConfig[RECOMMEND_SORT_KEY_TABLE[tostring(keyIndex)].key]}) ,
            }})
            if isElexSdk() then
                local rect = viewData.richLabel:getBoundingBox()
                if rect.width > 780  then
                   local pos =  cc.p(viewData.richLabel:getPosition())
                    viewData.richLabel:setVisible(false)
                    local richLabelParent = viewData.richLabel:getParent()
                    local label = display.newLabel(pos.x , pos.y , fontWithColor(16,{fontSize = 18,  ap = display.CENTER , w = 750 , hAlign= display.TAC ,text = string.fmt("_type_ _descr_" ,
                   {_type_ = RECOMMEND_SORT_KEY_TABLE[tostring(keyIndex)].text , _descr_ = foodRecommendConfig[RECOMMEND_SORT_KEY_TABLE[tostring(keyIndex)].key] }) , w = 750 , hAlign = display.TAC  }) )
                    richLabelParent:addChild(label)
                end
            end
        else
            viewData.bgImage:setTexture(RES_DICT.ANNI_STALL_DECRYPT_BG_LOCK)
            display.reloadRichLabel(viewData.richLabel , { c= {
                fontWithColor(6, {text =  self.unlockTable[tostring(index)].time .. " " }) ,
                fontWithColor(16, {text = string.format(app.anniversaryMgr:GetPoText(__('公布线索%d')) , checkint(index))}) ,
            }})
        end
    end

end

return AniversaryRecommdView
