---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/8/14 9:31 AM
---
--[[
餐厅信息页面Mediator
--]]
local Mediator = mvc.Mediator
---@class FishingAddBaitMediator:Mediator
local FishingAddBaitMediator = class("FishingAddBaitMediator", Mediator)
local NAME = "FishingAddBaitMediator"
---@type UIManager
local uiMgr = AppFacade.GetInstance():GetManager("UIManager")
--[[
　　---@Description: TODO
　　---@param : {
                    isFriend  = true  -- 是否是给好友添加钓饵
                }
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/20 2:22 PM
--]]
function FishingAddBaitMediator:ctor( params, viewComponent )
    self.super:ctor(NAME,viewComponent)
    params = params or {}
    self.isAction = true
    self.isFriend = params.isFriend
    self.friendId = params.friendId
    self.fishCardId = self.fishCardId
    self.currentIndex = 0   -- 当前点击的cell
    self.baitBackpackData = self:GetBaitGoodsData() --诱饵的背包数据
end

function FishingAddBaitMediator:InterestSignals()
    local signals = {
        POST.FISHPLACE_SETFISHING_BAIT.sglName ,
        SGL.REFRESH_NOT_CLOSE_GOODS_EVENT,
        POST.FISHPLACE_CLEAR_BAIT.sglName ,
        FISH_SYN_BAIT_NUM 
    }
    return signals
end

function FishingAddBaitMediator:ProcessSignal( signal )
    local name = signal:GetName()
    local body = signal:GetBody()
    if name == POST.FISHPLACE_SETFISHING_BAIT.sglName then
        local requestData = body.requestData
        local fishBaits = app.fishingMgr:GetHomeDataByKey('fishBaits')
        if not  fishBaits[tostring(requestData.baitId)] then
            fishBaits[tostring(requestData.baitId)] = requestData.num
        else
            fishBaits[tostring(requestData.baitId)] =  fishBaits[tostring(requestData.baitId)] + checkint(requestData.num)
        end
        self:UpdateAddBaitLayout()
        local viewComponent = self:GetViewComponent()
        local sideLayout = viewComponent:getChildByName("sideLayout")
        -- 扣除背包中的道具
        --self:UpdateBaitGoodsData({goodsId = requestData.baitId , num =  - requestData.num  })
        CommonUtils.DrawRewards({{goodsId = requestData.baitId , num =  - requestData.num  }})
        self:GetBaitGoodsData()
        local packUpAction = self:GetBaitDetailPackUpAction()
        local addBaitAction = self:GetAddBaitAction()
        self:AddActionStatus(sideLayout , cc.Spawn:create({packUpAction ,addBaitAction }))
        self:ReloadGridView()
    elseif name == POST.FISHPLACE_CLEAR_BAIT.sglName then
        local requestData = body.requestData
        local baitId = requestData.baitId
        local baitNum = checkint(body.baitNum)

        local fishBaits = app.fishingMgr:GetHomeDataByKey('fishBaits')
        fishBaits[tostring(baitId)] = nil
        --self:UpdateBaitGoodsData({goodsId = requestData.baitId , num =  baitNum  })
        CommonUtils.DrawRewards({{goodsId = requestData.baitId , num =  baitNum  }})
        self:GetBaitGoodsData()
        self:UpdateAddBaitLayout()
        self:ReloadGridView()
		app:DispatchObservers(FISHING_BAIT_UNLOAD_EVENT ,{bait = fishBaits })
    elseif name == SGL.REFRESH_NOT_CLOSE_GOODS_EVENT then
        self.baitBackpackData = self:GetBaitGoodsData()
        self:ReloadGridView()
    elseif name == FISH_SYN_BAIT_NUM then
        local fishBaits = body.fishBaits or {}
        app.fishingMgr:SetHomeDataByKeyalue('fishBaits' ,fishBaits , false )
        self:UpdateAddBaitLayout()
    end
end


function FishingAddBaitMediator:Initial( key )
    self.super.Initial(self,key)
    ---@type GameScene
    local scene = uiMgr:GetCurrentScene()
    ---@type FishingAddBaitView
    local viewComponent  = require( 'Game.views.fishing.FishingAddBaitView' ).new()
    self:SetViewComponent(viewComponent)
    viewComponent:setPosition(display.center)
    scene:AddDialog(viewComponent)
    local viewData = viewComponent.viewData
    display.commonUIParams(viewData.closeLayer , {animate = false ,  cb = function()
        PlayAudioByClickClose()
        if self.isAction then
            return
        end
        local exitAction = self:GetExitAction()
        self:AddActionStatus(uiMgr:GetCurrentScene() , exitAction)
    end})
    viewData.gridView:setDataSourceAdapterScriptHandler(handler(self, self.DataSource))
    viewData.gridView:setCountOfCell(#self.baitBackpackData)
    viewData.gridView:reloadData()
    if not  self.isFriend then
        self:UpdateAddBaitLayout()
    end
    local enterAction =  self:GetEnterAction()
    self:AddActionStatus(viewComponent , enterAction)
end
function FishingAddBaitMediator:ReloadGridView()
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    viewData.gridView:setDataSourceAdapterScriptHandler(handler(self, self.DataSource))
    viewData.gridView:setCountOfCell(#self.baitBackpackData)
    viewData.gridView:reloadData()
end
--[[
　　---@Description: 退出动画
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 5:22 PM
--]]

function FishingAddBaitMediator:GetExitAction()
    local viewComponent = self:GetViewComponent()
    local rightLayout = viewComponent:getChildByName("rightLayout")
    local spawnTable = {}
    if rightLayout and not tolua.isnull(rightLayout) then
        local rightSize = rightLayout:getContentSize()
        local rightPos = cc.p(display.width + rightSize.width  ,display.height/2)
        local rightAction = cc.MoveBy:create(5/30 ,cc.p( -(display.SAFE_R  - rightPos.x)   , 0) )
        spawnTable[#spawnTable+1] =  cc.TargetedAction:create(rightLayout , rightAction)
    end
    local bgBarrelLayout = viewComponent:getChildByName("bgBarrelLayout")
    if bgBarrelLayout and not tolua.isnull(bgBarrelLayout) then
        self:StopLightBreatheAction()
        local bgBarrelImage = bgBarrelLayout:getChildByName("bgBarrelImage")
        local bgBarrelSize  = bgBarrelImage:getContentSize()
        local convertPos = bgBarrelLayout:convertToNodeSpace(cc.p(0,0))
        bgBarrelImage:setPosition(cc.p(bgBarrelSize.width/2 ,convertPos.y - bgBarrelSize.height/2 ))

        local bgBarrelImageAction  = cc.MoveBy:create(8/30 ,cc.p( 0, -( (bgBarrelSize.height/2+25)) - (convertPos.y - bgBarrelSize.height/2) ))

        spawnTable[#spawnTable+1] =  cc.TargetedAction:create(bgBarrelImage , bgBarrelImageAction)
        local fadeActionCallBack = function(node )
            local seq = cc.FadeOut:create(5/30)
            local targetedAction = cc.TargetedAction:create(node ,seq )
            return targetedAction
        end
        local nodeTable = {}
        local baitTimeImage    = bgBarrelLayout:getChildByName("baitTimeImage")
        local baitTimeImageTwo = bgBarrelLayout:getChildByName("baitTimeImageTwo")
        local bgRongLianImage  = bgBarrelLayout:getChildByName("bgRongLianImage")
        local baitGoodLayout  = bgBarrelLayout:getChildByName("baitGoodLayout")
        table.insert(nodeTable,baitTimeImage    )
        table.insert(nodeTable,baitTimeImageTwo )
        table.insert(nodeTable,bgRongLianImage  )
        table.insert(nodeTable,baitGoodLayout  )
        table.insert(nodeTable,baitTimeImage   :getChildByName("baitTimeDescr") )
        table.insert(nodeTable,baitTimeImage   :getChildByName("baitTimeLabel") )
        table.insert(nodeTable,baitTimeImageTwo:getChildByName("freshnessLabel") )
        table.insert(nodeTable,baitTimeImageTwo:getChildByName("freshnessDescr") )
        table.insert(nodeTable,viewComponent.viewData.closeLayer)
        for i, v in pairs(nodeTable) do
            spawnTable[#spawnTable+1] = fadeActionCallBack(v )
        end
    end
    local exitAction =cc.Sequence:create(cc.Spawn:create(spawnTable) , cc.CallFunc:create(
        function()
           self:GetFacade():UnRegsitMediator(NAME)
        end
    ))
    return exitAction
end

function FishingAddBaitMediator:UpdateAddBaitLayout()
    local viewComponent = self:GetViewComponent()
    local bgBarrelLayout = viewComponent:getChildByName("bgBarrelLayout")
    if  not bgBarrelLayout then
        bgBarrelLayout =  viewComponent:CreateAddBaitLayout()
    end
    local fishBaits = app.fishingMgr:GetHomeDataByKey('fishBaits')
    local baitGoodLayout = bgBarrelLayout:getChildByName("baitGoodLayout")
    local fishBaitsData = {

    }
    for i, v in pairs(fishBaits) do
        fishBaitsData[#fishBaitsData+1] = {
            goodsId =  i ,
            num = v 
        }
    end
    for index  =1 , 3 do
        local goodLayout      = baitGoodLayout:getChildByTag(index)
        local goodImage       = goodLayout:getChildByName("goodImage")
        local emptyLabel      = goodLayout:getChildByName("emptyLabel")
        local clearBaitButton = goodLayout:getChildByName("clearBaitButton")
        local numberBtn       = goodLayout:getChildByName("numberBtn")
        numberBtn:setVisible(true)
        if #fishBaitsData >= index then
            goodImage:setTexture(CommonUtils.GetGoodsIconPathById(fishBaitsData[index].goodsId))
            clearBaitButton.baitId =  fishBaitsData[index].goodsId
            display.commonUIParams(clearBaitButton ,{cb = handler( self ,self.ClearBaitClick )})
            display.commonLabelParams(numberBtn , {text = fishBaitsData[index].num  })
            clearBaitButton:setVisible(true)
            emptyLabel:setVisible(false)
            goodImage:setVisible(true)
        else
            clearBaitButton.baitId = nil
            clearBaitButton:setVisible(false)
            numberBtn:setVisible(false)
            emptyLabel:setVisible(true)
            goodImage:setVisible(false)
        end
    end
    if #fishBaitsData > 0  then
        self:LightBreatheAction()
    else
        self:StopLightBreatheAction()
    end
    local minConsumeTime   = app.fishingMgr:GetEstimatedtime()
    local minVigour        = app.fishingMgr:GetFishCardsConsumeVigour()
    local baitTimeImage    = bgBarrelLayout:getChildByName("baitTimeImage")
    local baitTimeImageTwo = bgBarrelLayout:getChildByName("baitTimeImageTwo")
    local baitTimeLabel    = baitTimeImage:getChildByName("baitTimeLabel")
    local freshnessLabel   = baitTimeImageTwo:getChildByName("freshnessLabel")
    local bgRongLianImage   = bgBarrelLayout:getChildByName("bgRongLianImage")
    local  fishCapacity = app.fishingMgr:GetFishBaitCapacityByFishLevel(app.fishingMgr:GetHomeDataByKey('level'))
    local  fishBaitNum = app.fishingMgr:GetFishBaitNum()
    display.commonLabelParams(baitTimeLabel, { text = string.formattedTime(minConsumeTime , '%02i:%02i:%02i' )   })
    display.commonLabelParams(freshnessLabel, { text = minVigour })
    display.commonLabelParams(bgRongLianImage , {text = string.format(__('当前钓场容量（%d/%d）') , fishBaitNum ,fishCapacity ) , fontSize = 24})
end

function FishingAddBaitMediator:DataSource( p_convertview,idx )
    local pCell = p_convertview
    local index = idx + 1
    local cSize = cc.size(115, 115)
    if pCell == nil then
        pCell = CGridViewCell:new()
        pCell:setContentSize(cSize)
        local goodNode = require("common.GoodNode").new({goodsId = DIAMOND_ID ,showAmount = true })
        pCell:addChild(goodNode)
        goodNode:setPosition(cSize.width/2 , cSize.height/2)
        goodNode:setScale(0.9)
        goodNode:setName("goodNode")
        local pcellImage = display.newImageView(_res('ui/common/common_bg_frame_goods_elected.png'),cSize.width /2-4 , cSize.height/2-4)
        goodNode:addChild(pcellImage)
        pcellImage:setName("pcellImage")
        pcellImage:setScale(1.05)
        pcellImage:setVisible(false)
    end
    xTry(function()
        local goodNode = pCell:getChildByName("goodNode")
        goodNode:setTag(index)
        goodNode:setOnClickScriptHandler(handler(self, self.ShowBaitDetailView))
        local baitNum = checkint(self.baitBackpackData[index].amount)
        if baitNum > 0 then
            goodNode.icon:setColor(cc.c3b(255, 255, 255))
        else
            goodNode.icon:setColor(cc.c3b(80, 80, 80))
        end

        local pcellImage = goodNode:getChildByName("pcellImage")
        goodNode:RefreshSelf(self.baitBackpackData[index])
        if index == self.currentIndex then
            pcellImage:setVisible(true)
        else
            pcellImage:setVisible(false)
        end
    end,__G__TRACKBACK__)
    return pCell
end
function FishingAddBaitMediator:ShowBaitDetailView(sender)
    PlayAudioByClickNormal()
    if self.isAction then
        return
    end
    local tag = sender:getTag()
    local goodsId = checkint(self:GetBaitGoodsIdByIndex(tag))
    -- 首先判断钓饵的数量
    local baitNum = checkint(self.baitBackpackData[tag].amount)
    if baitNum <=  0  then
        uiMgr:AddDialog('common.GainPopup',{goodsId = goodsId})
        return
    end
    if not self.isFriend then
        local fishBaits = app.fishingMgr:GetHomeDataByKey('fishBaits')
        if  table.nums(fishBaits) >= 3 then
            local isHave = false
            for id, baitData in pairs(fishBaits) do
                if goodsId == checkint(id) then
                    isHave = true
                    break 
                end
            end
            if not  isHave then
                app.uiMgr:ShowInformationTips(__('最多只能添加三种钓饵'))
                return
            end
        end
    end

    ---@type FishingAddBaitView
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local gridView = viewData.gridView
    if self.currentIndex > 0  then
        local cell =  gridView:cellAtIndex(self.currentIndex -1)
        if cell and (not tolua.isnull(cell) )then
            local goodNode = cell:getChildByName("goodNode")
            local pcellImage = goodNode:getChildByName("pcellImage")
            pcellImage:setVisible(false)
        end
    end
    self.currentIndex = tag
    local cell =  gridView:cellAtIndex(self.currentIndex -1)
    if cell and (not tolua.isnull(cell) )then
        local goodNode = cell:getChildByName("goodNode")
        local pcellImage = goodNode:getChildByName("pcellImage")
        pcellImage:setVisible(true )

    end
    local sideLayout = viewComponent:getChildByName("sideLayout")
    if not  sideLayout then
        sideLayout = viewComponent:CreateBaitInfor()
        viewComponent:addChild(sideLayout,2)
        sideLayout:setPosition(display.SAFE_R - 500 , display.height/2)
    end
    sideLayout:setVisible(true)
    local goodNode = sideLayout:getChildByName("goodNode")
    goodNode:RefreshSelf({goodsId  = goodsId , amount = 0  })
    local goodsName   = sideLayout:getChildByName("goodsName")
    local commonTextImage = sideLayout:getChildByName("commonTextImage")
    local goodsEffect = commonTextImage:getChildByName("goodsEffect")
    local goodData    = CommonUtils.GetConfig('goods', 'goods', goodsId)
    local descr       = goodData.descr
    local name        = goodData.name
    display.commonLabelParams(goodsName , {text = name })
    display.commonLabelParams(goodsEffect , {text = descr })
    local baitLayout = sideLayout:getChildByName("baitLayout")
    local reduceBtn  = baitLayout:getChildByName("reduceBtn")
    local addBtn     = baitLayout:getChildByName("addBtn")
    local goodsInfo  = baitLayout:getChildByName("goodsInfo")
    local maxBtn     = baitLayout:getChildByName("maxBtn")
    local addBaitBtn = sideLayout:getChildByName("addBaitBtn")
    local swallowOneLayer = viewComponent:getChildByName("swallowOneLayer")
    display.commonLabelParams(goodsInfo , {text = "0"})
    display.commonUIParams(maxBtn , {cb =  handler(self, self.AddBaitMaxNum)})
    display.commonUIParams(goodsInfo ,{cb =  handler(self, self.GoodNumClick)})
    display.commonUIParams(reduceBtn, {cb =  handler(self, self.ReduceBaitNumClick)})
    display.commonUIParams(addBtn, {cb =  handler(self, self.AddBaitNumClick)})
    display.commonUIParams(addBaitBtn, {cb =  handler(self, self.SendAddBaitCmd)})
    display.commonUIParams(swallowOneLayer , {cb = function(sender)
        if self.isAction then
            return
        end
        local action = self:GetBaitDetailPackUpAction()
        self:AddActionStatus(viewComponent , action)
    end})
    self:UpdateBaitInforViewByNum(0)
    local swallowOneLayer = viewComponent:getChildByName("swallowOneLayer")
    if swallowOneLayer and (not  swallowOneLayer:isVisible()) then
        local popUpAction = self:GetBaitDetailPopUpAction()
        self:AddActionStatus(viewComponent , popUpAction)
    end

end
function FishingAddBaitMediator:AddActionStatus(node ,action )
    node:stopAllActions()
    node:runAction(
        cc.Sequence:create(
            cc.CallFunc:create(function()
                self.isAction = true
            end),
                action,
            cc.CallFunc:create(function()
                self.isAction = false
            end)
        )
    )
end
--[[
　　---@Description: 清除钓饵的事件
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/21 4:32 PM
--]]
function FishingAddBaitMediator:ClearBaitClick(sender)
    if self.isAction then
        return
    end
    local baitId = sender.baitId
    self:SendSignal(POST.FISHPLACE_CLEAR_BAIT.cmdName , { baitId = baitId})
end
--[[
　　---@Description: 添加最大的诱饵数量
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/14 3:41 PM
--]]
function FishingAddBaitMediator:AddBaitMaxNum(sender)
    PlayAudioByClickNormal()
    local viewComponent    = self:GetViewComponent()
    local sideLayout       = viewComponent:getChildByName("sideLayout")
    local baitLayout       = sideLayout:getChildByName("baitLayout")
    local goodsInfo        = baitLayout:getChildByName("goodsInfo")
    local maxNum = 0
    local goodsId = self.baitBackpackData[self.currentIndex].goodsId
    maxNum = CommonUtils.GetCacheProductNum(goodsId)
    if self.isFriend then
        local limitNum = app.fishingMgr:GetFishBaitCapacityByFishLevel(app.gameMgr:GetUserInfo().fishPlaceLevel)
        maxNum = maxNum > limitNum and limitNum or maxNum
    else
        local shouldMaxNum = app.fishingMgr:GetAddMaxBaitNum()
        maxNum = maxNum >  shouldMaxNum and shouldMaxNum or maxNum
    end
    display.commonLabelParams(goodsInfo , {text = maxNum  })
    self:UpdateBaitInforViewByNum(maxNum)
end
--[[
　　---@Description: 根据时间更新钓饵要消耗的新鲜度和时间
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/21 4:54 PM
--]]
function FishingAddBaitMediator:UpdateBaitInforViewByNum(num)
    local times , vigour = app.fishingMgr:GetBaitConumeTimeAndVigour(self.baitBackpackData[self.currentIndex].goodsId , num )
    local viewComponent = self:GetViewComponent()
    local sideLayout = viewComponent:getChildByName("sideLayout")
    local baitTime = sideLayout:getChildByName("baitTime")
    local baitNum = sideLayout:getChildByName("baitNum")
    local baitTimeNums = baitTime:getChildByName("baitTimeNums")
    local baitNumNums = baitNum:getChildByName("baitNumNums")
    display.reloadRichLabel(baitTimeNums ,{c = {
         fontWithColor('16' , {text = string.formattedTime(times, "%02i:%02i:%02i")  })
    }})
    display.reloadRichLabel(baitNumNums ,{c = {
        fontWithColor('16',{text  = vigour } )
    }})

end
--[[
　　---@Description:点击增加诱饵的事件
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/14 11:52 AM
--]]
function FishingAddBaitMediator:AddBaitNumClick(sender)
    PlayAudioByClickNormal()
    if self.isAction then
        return
    end
    local parentNode = sender:getParent()
    local goodsInfo = parentNode:getChildByName("goodsInfo")
    local num = checkint(goodsInfo:getText())
    num = num +1
    local goodNum = self:GetBaitGoodsNumByIndex(self.currentIndex)
    if num > goodNum  then
        uiMgr:ShowInformationTips(__('没有足够的钓饵'))
        return
    else
        if self.isFriend then
            local limitNum = app.fishingMgr:GetFishBaitCapacityByFishLevel(app.gameMgr:GetUserInfo().fishPlaceLevel)
            if num > limitNum  then
                uiMgr:ShowInformationTips(__('已达到钓饵容量上限'))
                return
            end
        else
            local shouldMaxNum = app.fishingMgr:GetAddMaxBaitNum()
            if num > shouldMaxNum  then
                uiMgr:ShowInformationTips(__('已达到钓饵容量上限'))
                return
            end
        end
        display.commonLabelParams(goodsInfo , { text = num})
    end
    self:UpdateBaitInforViewByNum(num)
end
function FishingAddBaitMediator:SendAddBaitCmd(sender)
    local viewComponent  = self:GetViewComponent()
    local sideLayout = viewComponent:getChildByName("sideLayout")
    local baitLayout = sideLayout:getChildByName("baitLayout")
    local goodsInfo = baitLayout:getChildByName("goodsInfo")
    local num = checkint(goodsInfo:getText())
    if num <= 0  then
        app.uiMgr:ShowInformationTips(__('添加钓饵数量不能为零'))
        return
    end
    if self.isFriend then
        -- TODO 明天找志平商量该接口
        local limitNum = app.fishingMgr:GetFishBaitCapacityByFishLevel(app.gameMgr:GetUserInfo().fishPlaceLevel)
        if num > limitNum then
            uiMgr:ShowInformationTips(__('已达到钓饵容量上限'))
            return
        end
        self:GetFacade():DispatchObservers(FISHING_BAIT_APPEND_EVENT , {baitId =   self.baitBackpackData[self.currentIndex].goodsId, baitNum = num  })
        app:UnRegsitMediator(NAME)
    else
        local shouldMaxNum = app.fishingMgr:GetAddMaxBaitNum()
        if num > shouldMaxNum then
            uiMgr:ShowInformationTips(__('已达到钓饵容量上限'))
            return
        end
        self:SendSignal(POST.FISHPLACE_SETFISHING_BAIT.cmdName , { baitId = self.baitBackpackData[self.currentIndex].goodsId , num =  num  })
    end
end
--[[
　　---@Description: 获取到钓饵的道具数据
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/20 5:29 PM
--]]
function FishingAddBaitMediator:GetBaitGoodsData()
    local gameMgr = app.gameMgr
    local backpackData = gameMgr:GetUserInfo().backpack
    local baitDatas = {}
    local startGoodsId = 321001
    local endGoodsId   = 321999
    local prarse = app.fishingMgr:GetConfigParse()
    local produceConfig = app.fishingMgr:GetConfigDataByName(prarse.TYPE.PRODUCE_CONFIG)
    local produceCollect = {}
    for i, v in pairs(produceConfig) do
        produceCollect[tostring(v.id)] = {goodsId = v.id , amount = 0 , num = 0 }
    end
    for i, v in pairs(backpackData) do
        if checkint(v.goodsId ) >= startGoodsId and  checkint(v.goodsId ) <=  endGoodsId  then
            produceCollect[tostring(v.goodsId)] = v
        end
    end
    for i, v in pairs(produceCollect) do
        baitDatas[#baitDatas+1] = v
    end
    table.sort(baitDatas , function(a, b )
        if a.goodsId > b.goodsId then
            return true
        end
        return false
    end)
    return baitDatas
end
--[[
　　---@Description: 更新背包的数据
　　---@param :data 例如： {goodsId = 111 ,num = 1  }
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/24 11:00 AM
--]]
function FishingAddBaitMediator:UpdateBaitGoodsData(data)
    data = data or {}
    for i =#self.baitBackpackData , 1, -1 do
        if checkint(data.goodsId) ==  checkint(self.baitBackpackData[i].goodsId)  then
            self.baitBackpackData[i].amount = self.baitBackpackData[i].amount + checkint(data.num)
            if self.baitBackpackData[i].amount == 0  then
                table.remove(self.baitBackpackData , i )
            end
        end
    end
end
--[[
　　---@Description: 根据索引的顺序获取到该诱饵的数量
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/14 2:14 PM
--]]
function FishingAddBaitMediator:GetBaitGoodsNumByIndex(index)
    local data = self.baitBackpackData[index] or {}
    local num = checkint(data.amount)
    return num
end
--[[
　　---@Description: 根据索引的顺序获取到该诱饵的goodsId
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/14 2:14 PM
--]]
function FishingAddBaitMediator:GetBaitGoodsIdByIndex(index)
    local data = self.baitBackpackData[index] or {}
    local goodsId  = checkint(data.goodsId)
    return goodsId
end
--[[
　　---@Description:点击减少诱饵的事件
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/14 11:52 AM
--]]
function FishingAddBaitMediator:ReduceBaitNumClick(sender)
    PlayAudioByClickNormal()
    if self.isAction then
        return
    end
    local parentNode = sender:getParent()
    local goodsInfo = parentNode:getChildByName("goodsInfo")
    local num = checkint(goodsInfo:getText())
    num = num - 1
    num = num >=  0 and  num or 0
    display.commonLabelParams(goodsInfo , { text = num})
    self:UpdateBaitInforViewByNum(num)
end
--[[
　　---@Description: 手动输入数字的事件
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/14 11:52 AM
--]]
function FishingAddBaitMediator:GoodNumClick(sender)
    PlayAudioByClickNormal()
    if self.isAction then
        return
    end
    local tempData = {}
    tempData.callback = handler(self, self.NumkeyboardCallBack)
    tempData.titleText = __('请输入需要添加的钓饵数量')
    tempData.nums = 3
    tempData.model = NumboardModel.freeModel
    local NumKeyboardMediator = require( 'Game.mediator.NumKeyboardMediator' )
    local mediator = NumKeyboardMediator.new(tempData)
    AppFacade.GetInstance():RegistMediator(mediator)
end
--[[
数字模拟键盘回调函数
data  type string 密码
--]]
function FishingAddBaitMediator:NumkeyboardCallBack(data)
    ---@type FishingAddBaitView
    local viewComponent = self:GetViewComponent()
    local sideLayout    = viewComponent:getChildByName("sideLayout")
    local baitLayout    = sideLayout:getChildByName("baitLayout")
    local goodsInfo     = baitLayout:getChildByName("goodsInfo")
    local num           = checkint(data)
    local backpackNum   = self:GetBaitGoodsNumByIndex(self.currentIndex)
    if num > backpackNum then
        display.commonLabelParams(goodsInfo , {text = backpackNum })
    else
        display.commonLabelParams(goodsInfo , {text = num })
    end
    self:UpdateBaitInforViewByNum(num)
end
--[[
　　---@Description: 进入动画
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 5:22 PM
--]]
function FishingAddBaitMediator:GetEnterAction()
    local viewComponent = self:GetViewComponent()
    local rightLayout = viewComponent:getChildByName("rightLayout")
    local spawnTable = {}
    local delayTime = 10
    if rightLayout and not tolua.isnull(rightLayout) then
        local rightSize = rightLayout:getContentSize()
        local rightPos = cc.p(display.width + rightSize.width  ,display.height/2)
        local rightAction = cc.Sequence:create(
                cc.DelayTime:create(delayTime/30),
                cc.EaseSineIn:create(
                        cc.Spawn:create(
                                cc.Sequence:create(
                                        cc.MoveBy:create(8/30 ,cc.p( display.SAFE_R - 30 - rightPos.x   , 0) ),
                                        cc.MoveBy:create(3/30 ,cc.p(30  , 0 ) )
                                ),
                                cc.FadeIn:create(11/30)
                        )
                ),
                cc.DelayTime:create(2/30)
        )
        spawnTable[#spawnTable+1] =  cc.TargetedAction:create(rightLayout , rightAction)
    end
    local bgBarrelLayout = viewComponent:getChildByName("bgBarrelLayout")
    if bgBarrelLayout and not tolua.isnull(bgBarrelLayout) then
        local bgBarrelImage = bgBarrelLayout:getChildByName("bgBarrelImage")
        local bgBarrelSize  = bgBarrelImage:getContentSize()
        local convertPos = bgBarrelLayout:convertToNodeSpace(cc.p(0,0))
        bgBarrelImage:setPosition(cc.p(bgBarrelSize.width/2 ,convertPos.y - bgBarrelSize.height/2 ))

        local bgBarrelImageAction  = cc.Sequence:create(
                cc.DelayTime:create(delayTime/30),
                cc.EaseSineIn:create(
                        cc.Spawn:create(
                                cc.Sequence:create(
                                        cc.MoveBy:create(8/30 ,cc.p( 0, bgBarrelSize.height/2+25 - (convertPos.y - bgBarrelSize.height/2) ) ),
                                        cc.MoveBy:create(5/30 ,cc.p(0  , -30 ) )
                                ),
                                cc.FadeIn:create(13/30)
                        )
                )

        )
        spawnTable[#spawnTable+1] =  cc.TargetedAction:create(bgBarrelImage , bgBarrelImageAction)
        local fadeActionCallBack = function(node )
            local seq =  cc.Sequence:create(
                    cc.DelayTime:create(delayTime/30),
                    cc.FadeIn:create(10/30),
                    cc.DelayTime:create(3/10)
            )
            local targetedAction = cc.TargetedAction:create(node ,seq )
            return targetedAction
        end
        local nodeTable = {}
        local baitTimeImage    = bgBarrelLayout:getChildByName("baitTimeImage")
        local baitTimeImageTwo = bgBarrelLayout:getChildByName("baitTimeImageTwo")
        local bgRongLianImage  = bgBarrelLayout:getChildByName("bgRongLianImage")
        local baitGoodLayout   = bgBarrelLayout:getChildByName("baitGoodLayout")
        table.insert(nodeTable,baitTimeImage    )
        table.insert(nodeTable,baitTimeImageTwo )
        table.insert(nodeTable,bgRongLianImage  )
        table.insert(nodeTable,baitGoodLayout  )
        table.insert(nodeTable,baitTimeImage   :getChildByName("baitTimeDescr") )
        table.insert(nodeTable,baitTimeImage   :getChildByName("baitTimeLabel") )
        table.insert(nodeTable,baitTimeImageTwo:getChildByName("freshnessLabel") )
        table.insert(nodeTable,baitTimeImageTwo:getChildByName("freshnessDescr") )
        for i, v in pairs(nodeTable) do
            spawnTable[#spawnTable+1] = fadeActionCallBack(v )
        end
    end
    return cc.Spawn:create(spawnTable)
end
--[[
　　---@Description: 光呼吸的动画
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 9:50 PM
--]]
function FishingAddBaitMediator:LightBreatheAction()
    local viewComponent = self:GetViewComponent()
    local bgBarrelLayout = viewComponent:getChildByName("bgBarrelLayout")
    local bgLightImage = bgBarrelLayout:getChildByName("bgLightImage")
    bgLightImage:setOpacity(0)
    bgLightImage:runAction(
        cc.Sequence:create(
            cc.DelayTime:create(4/30),
            cc.CallFunc:create(
                function()
                    bgLightImage:stopAllActions()
                    bgLightImage:runAction(
                        cc.RepeatForever:create(
                            cc.Sequence:create(
                                cc.FadeIn:create(1.5),
                                cc.FadeOut:create(1.5)
                            )
                        )
                    )
                end
            )
        )
    )
end
--[[
　　---@Description: 停止呼吸动作
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 9:59 PM
--]]
function FishingAddBaitMediator:StopLightBreatheAction()
    local viewComponent = self:GetViewComponent()
    local bgBarrelLayout = viewComponent:getChildByName("bgBarrelLayout")
    local bgLightImage = bgBarrelLayout:getChildByName("bgLightImage")
    bgLightImage:setOpacity(0)
    bgLightImage:stopAllActions()
end
--[[
　　---@Description: 诱饵详情界面弹出动画
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 5:23 PM
--]]
function FishingAddBaitMediator:GetBaitDetailPopUpAction()

    local viewComponent = self:GetViewComponent()
    local sideLayout = viewComponent:getChildByName("sideLayout")
    local sideSize = sideLayout:getContentSize()
    local rightLayout = viewComponent:getChildByName("rightLayout")
    local swallowOneLayer = viewComponent:getChildByName("swallowOneLayer")
    local rightSize = rightLayout:getContentSize()
    local sidePos = cc.p(display.SAFE_R - rightSize.width  ,display.height/2)
    local  popUpAction=
    cc.TargetedAction:create(sideLayout,
        cc.Spawn:create(
              cc.EaseSineIn:create(
                  cc.Sequence:create(
                          cc.CallFunc:create(
                                  function()
                                      swallowOneLayer:setVisible(true )
                                  end
                          ),
                          cc.MoveTo:create(7/30 , cc.p( sidePos.x - sideSize.width -10 ,display.height/2)),
                          cc.MoveTo:create(3/30 , cc.p( sidePos.x - sideSize.width +25 ,display.height/2))
                  )
              ),
              cc.FadeIn:create(10/30)
        )
    )

    return popUpAction
end

--[[
　　---@Description: 诱饵详情界面收起动画
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 5:23 PM
--]]
function FishingAddBaitMediator:GetBaitDetailPackUpAction()
    local packUpAction = {}
    local spawnTable = {}
    local viewComponent = self:GetViewComponent()
    local sideLayout = viewComponent:getChildByName("sideLayout")
    local rightLayout     = viewComponent:getChildByName("rightLayout")
    local swallowOneLayer = viewComponent:getChildByName("swallowOneLayer")
    local rightSize = rightLayout:getContentSize()
    local sidePos = cc.p(display.SAFE_R - rightSize.width  ,display.height/2)
    spawnTable[#spawnTable+1] = cc.Spawn:create(
            cc.CallFunc:create(
                function()
                    swallowOneLayer:setVisible(false )
                end
            ),
            cc.EaseExponentialIn:create(
                cc.MoveTo:create(7/30 , cc.p( sidePos.x ,display.height/2))
            ),
            cc.FadeOut:create(7/30)
    )
    packUpAction = cc.TargetedAction:create(sideLayout ,
            cc.Sequence:create(cc.Spawn:create(spawnTable),cc.DelayTime:create(22/30))
    )
    return packUpAction
end
--[[
　　---@Description: 加入调料动画
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/23 9:49 PM
--]]
function FishingAddBaitMediator:GetAddBaitAction()
    local addBaitAction = nil
    local spawnTable = {}
    local spawnTwoTable = {}
    local viewComponent = self:GetViewComponent()
    local bgBarrelLayout    = viewComponent:getChildByName("bgBarrelLayout")

    if bgBarrelLayout and (not tolua.isnull(bgBarrelLayout)) then
        local fadeActionCallBack = function(node )
            local fadeOut = cc.Sequence:create(
                    cc.FadeOut:create(2/30) ,
                    cc.DelayTime:create(5/30)
            )
            local targetedAction = cc.TargetedAction:create(node ,fadeOut )
            return targetedAction
        end
        local fadeInActionCallBack = function(node )
            local fadeIn = cc.Sequence:create(
                    cc.DelayTime:create(21/30),
                    cc.FadeIn:create(8/30)
            )
            local targetedAction = cc.TargetedAction:create(node ,fadeIn )
            return targetedAction
        end
        local nodeTable = {}
        local baitTimeImage    = bgBarrelLayout:getChildByName("baitTimeImage")
        local baitTimeImageTwo = bgBarrelLayout:getChildByName("baitTimeImageTwo")
        local bgRongLianImage  = bgBarrelLayout:getChildByName("bgRongLianImage")
        local baitGoodLayout   = bgBarrelLayout:getChildByName("baitGoodLayout")
        table.insert(nodeTable,baitTimeImage    )
        table.insert(nodeTable,baitTimeImageTwo )
        table.insert(nodeTable,bgRongLianImage  )
        table.insert(nodeTable,baitGoodLayout  )
        table.insert(nodeTable,baitTimeImage   :getChildByName("baitTimeDescr") )
        table.insert(nodeTable,baitTimeImage   :getChildByName("baitTimeLabel") )
        table.insert(nodeTable,baitTimeImageTwo:getChildByName("freshnessLabel") )
        table.insert(nodeTable,baitTimeImageTwo:getChildByName("freshnessDescr") )
        for i, v in pairs(nodeTable) do
            spawnTable[#spawnTable+1] = fadeActionCallBack(v )
        end
        for i, v in pairs(nodeTable) do
            spawnTwoTable[#spawnTwoTable+1] = fadeInActionCallBack(v )
        end
    end
    local viewComponent = self:GetViewComponent()
    local  bgBarrelSize = cc.size(807,553)
    local goodsImage = display.newImageView(CommonUtils.GetGoodsIconPathById(self.baitBackpackData[self.currentIndex].goodsId) ,
            display.SAFE_R - 510 - bgBarrelSize.width/2 ,display.height, {ap = display.CENTER_TOP} )
    viewComponent:addChild(goodsImage)
    goodsImage:setOpacity(0)
    local goodAction =cc.TargetedAction:create(goodsImage,

        cc.Sequence:create(
            cc.FadeIn:create(4/30),
            cc.CallFunc:create(function()
                 self:UpdateAddBaitLayout()
            end),
            cc.DelayTime:create(3/30),
            cc.Spawn:create(
                    cc.EaseExponentialIn:create(cc.MoveBy:create(16/30 , cc.p(0 , 280 - display.height ))),
                    cc.Sequence:create(cc.DelayTime:create(15/30) , cc.FadeOut:create(1/30))
            )

        )
    )
    if table.nums(spawnTable) > 0 then
        spawnTwoTable[#spawnTwoTable+1] =   cc.Sequence:create(cc.Spawn:create(spawnTable),cc.DelayTime:create(22/30))
    end
    spawnTwoTable[#spawnTwoTable+1] = cc.Sequence:create(goodAction , cc.DelayTime:create(6/30))
    addBaitAction = cc.Spawn:create(spawnTwoTable)
    return addBaitAction
end
function FishingAddBaitMediator:OnRegist(  )
    regPost(POST.FISHPLACE_CLEAR_BAIT)
    regPost(POST.FISHPLACE_SETFISHING_BAIT)
end

function FishingAddBaitMediator:OnUnRegist(  )
    unregPost(POST.FISHPLACE_CLEAR_BAIT)
    unregPost(POST.FISHPLACE_SETFISHING_BAIT)
    local viewComponent = self:GetViewComponent()
    if viewComponent and (not tolua.isnull(viewComponent)) then
        viewComponent:stopAllActions()
        viewComponent:runAction(cc.RemoveSelf:create())
    end
end

return FishingAddBaitMediator
