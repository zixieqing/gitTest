---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/9/18 2:26 PM
---
local BUTTON_TAG = {
    LEFT_BUTTON    = 1001,
    RIGHT_BUTTON   = 1002,
    TAB_NAME_LABEL = 1003,
    SELECT_TAB     = 1004,
    ALL_KIND       = 1, -- 全部种类
    COMMON_KIND    = 2, -- 普通种类
    ACTIVITY_LIMIT = 3
}
local RES_DICT = {
    COMMON_BTN_TIPS               = _res('ui/common/common_btn_tips.png'),
    CG_MAIN_BG                    = _res('ui/home/cg/CG_main_bg.jpg'),
    CARD_PREVIEW_BTN_SELECTION    = _res('ui/home/cardslistNew/card_preview_btn_selection.png'),
    CHECKBOXNODE_DISABLE          = _res('Default/CheckBoxNode_Disable.png'),
    COMMON_BTN_BACK               = _res('ui/common/common_btn_back.png'),
    TEMP_ANIME_PIECES             = _res('ui/home/cg/temp_anime_pieces.png'),
    CARD_ICO_DIRECTION            = _res('ui/home/cardslistNew/card_ico_direction.png'),
    COMMON_TITLE                  = _res('ui/common/common_title.png'),
    CARD_PREVIEW_BTN_UNSELECTION  = _res('ui/home/cardslistNew/card_preview_btn_unselection.png'),
    CARD_SKILL_BTN_SWITCH         = _res('ui/home/cardslistNew/card_skill_btn_switch.png'),
    SELECTION_FRAME_1             = _res('ui/common/tujian_selection_frame_1.png'),
    SELECTION_LINE                = _res('ui/common/tujian_selection_line'),
    FILTER_SELECTED               = _res('ui/common/tujian_selection_select_btn_filter_selected.png'),

}
local SCREEN_TYPE = {
    { descr = __('全部'), tag = BUTTON_TAG.ALL_KIND },
    { descr = __('通常'), tag = BUTTON_TAG.COMMON_KIND },
    { descr = __('活动限定'), tag = BUTTON_TAG.ACTIVITY_LIMIT }
}
---@class CollectCGListView : Node
local CollectCGListView = class('home.CollectCGListView',function ()
    local node = CLayout:create(display.size)
    node.name = 'Game.views.CollectCGListView'
    node:enableNodeEvents()
    return node
end)
function CollectCGListView:ctor(param)
    param = param or {}
    self:initUI()
end

function CollectCGListView:initUI()
    local view = display.newLayer(display.cx, display.cy - 1002 , {ap = display.CENTER, size = display.size})
    local swallowLayer = display.newLayer(display.cx  , display.cy  ,
            { ap = display.CENTER, color = cc.c4b(0 , 0,0,0), size = cc.size(display.width, display.height), enable = true })
    self:addChild(swallowLayer)
    self:addChild(view)
    local Image_1 = display.newImageView(RES_DICT.CG_MAIN_BG, 667, 375,
            { ap = display.CENTER, tag = 2, enable = false })
    Image_1:setPosition(display.cx + 0, display.cy + 0)
    view:addChild(Image_1)

    --local flows = display.newNSprite(RES_DICT.TEMP_ANIME_PIECES, 1204, 637,
    --        { ap = display.CENTER, tag = 64 })
    --flows:setScale(1, 1)
    --flows:setPosition(display.cx + 537, display.cy + 262)
    --view:addChild(flows)

    local flows = sp.SkeletonAnimation:create(
            'effects/cgCollect/CG_main_loading.json',
            'effects/cgCollect/CG_main_loading.atlas',
            1
    )
    --flows:setAnchorPoint(display.CENTER)
    flows:update(0)
    flows:setAnimation(0, 'play', false )
    flows:setPosition(display.cx + 537, display.cy + 250)
    view:addChild(flows)

    local content = display.newLayer(667, 375,
            { ap = display.CENTER, size = cc.size(1200, 670) })
    content:setPosition(display.cx + 0, display.cy + 0)
    view:addChild(content)
    local  contentScrollSize = cc.size(1200,670)
    local contentScroll =  CScrollView:create(contentScrollSize)
    contentScroll:setDirection(eScrollViewDirectionHorizontal)
    contentScroll:setContainerSize( contentScrollSize)
    contentScroll:setAnchorPoint( 0.000000 , 0.000000)
    contentScroll:setBounceable(false)
    --contentScroll:setTouchEnabled(false)
    content:addChild(contentScroll)

    local oneLayer = display.newLayer(0, 0,
            { ap = display.LEFT_BOTTOM,  size = cc.size(1200, 670)})
    contentScroll:getContainer():addChild(oneLayer)
    oneLayer:setName("oneLayer")

    local twoLayer = display.newLayer(1200, 0,
            { ap = display.LEFT_BOTTOM, size = cc.size(1200, 670) })
    contentScroll:getContainer():addChild(twoLayer)
    twoLayer:setName("twoLayer")
    local leftBotton = display.newButton(54, 320, { ap = display.CENTER ,  n = RES_DICT.CARD_SKILL_BTN_SWITCH, s = RES_DICT.CARD_SKILL_BTN_SWITCH, scale9 = true, size = cc.size(69, 66), tag = 4 })
    display.commonLabelParams(leftBotton, {text = "", fontSize = 14, color = '#414146'})
    content:addChild(leftBotton)
    leftBotton:setTag(BUTTON_TAG.LEFT_BUTTON)

    local rightButton = display.newButton(1120, 313, { ap = display.CENTER ,  n = RES_DICT.CARD_SKILL_BTN_SWITCH, s = RES_DICT.CARD_SKILL_BTN_SWITCH, scale9 = true, size = cc.size(69, 66), tag = 7 })
    display.commonLabelParams(rightButton, {text = "", fontSize = 14, color = '#414146'})
    content:addChild(rightButton)
    rightButton:setScaleX(-1)
    rightButton:setTag(BUTTON_TAG.RIGHT_BUTTON)

    local checkbox = display.newToggleView(1236, 49, {  ap = display.CENTER ,  n = RES_DICT.CARD_PREVIEW_BTN_UNSELECTION, d = RES_DICT.CARD_PREVIEW_BTN_SELECTION, s = RES_DICT.CARD_PREVIEW_BTN_SELECTION, tag = BUTTON_TAG.SELECT_TAB , scale9 = true ,size = cc.size(200,90)  })
    checkbox:setPosition(display.cx + 550, display.cy + -326)
    view:addChild(checkbox)

    local kindName = display.newLabel(100, 52,
            { ap = display.CENTER, color = '#ffffff', text = __('全部'), fontSize = 24, tag = 66 })
    checkbox:addChild(kindName)

    local arrowImg = display.newImageView(RES_DICT.CARD_ICO_DIRECTION, 180, 52,
            { ap = display.CENTER, tag = 67, enable = false  })
    checkbox:addChild(arrowImg)
    arrowImg:setScaleY(-1)

    local backBtn = display.newImageView(RES_DICT.COMMON_BTN_BACK, 57, 695,
            { ap = display.CENTER, tag = 68 ,enable = true  } )
    backBtn:setScale(1, 1)
    backBtn:setPosition(display.SAFE_L + 57, display.height + -55)
    view:addChild(backBtn)

    local tabNameLabel = display.newButton(97, 744, { ap = display.LEFT_TOP ,  n = RES_DICT.COMMON_TITLE, d = RES_DICT.COMMON_TITLE, s = RES_DICT.COMMON_TITLE, scale9 = true, size = cc.size(303, 78) })
    display.commonLabelParams(tabNameLabel, {text = "", fontSize = 14, color = '#414146'})
    tabNameLabel:setPosition(display.cx + -570, display.height + -6)
    view:addChild(tabNameLabel ,101)
    tabNameLabel:setTag(BUTTON_TAG.TAB_NAME_LABEL)

    local moduleName = display.newLabel(138, 30,
            fontWithColor('14' , { outline = false ,  ap = display.CENTER, color = '#5b3c25', text = __('飨灵回忆'), w = 200, hAlign = display.TAC ,  fontSize = 24, tag = 71 }))
    tabNameLabel:addChild(moduleName)

    local tipButton = display.newNSprite(RES_DICT.COMMON_BTN_TIPS, 255, 30,
            { ap = display.CENTER, tag = 72 })
    tipButton:setScale(1, 1)
    tabNameLabel:addChild(tipButton)
    self.viewData = {
        swallowLayer  = swallowLayer,
        Image_1       = Image_1,
        flows         = flows,
        content       = content,
        leftBotton    = leftBotton,
        rightButton   = rightButton,
        checkbox      = checkbox,
        kindName      = kindName,
        arrowImg      = arrowImg,
        oneLayer      = oneLayer,
        twoLayer      = twoLayer,
        backBtn       = backBtn,
        view          = view ,
        tabNameLabel  = tabNameLabel,
        moduleName    = moduleName,
        tipButton     = tipButton,
        contentScroll = contentScroll
    }
end
-- 添加 CGCellView
function CollectCGListView:CreateCGCell(layer)
    local tabPos = {
        cc.p(355, 463),
        cc.p(817, 463),
        cc.p(355, 150),
        cc.p(817, 150),
    }

    for i =1 , 4 do
        ---@type CGCellView
        local cgCell = require('Game.views.collectCG.CGCellView').new()
        cgCell.viewData.cellLayout:setOnClickScriptHandler(function()
                local mediator = require("Game.mediator.collectCG.CollectCGDetailMediator").new()
                 app:RegistMediator(mediator)
        end)
        --cgCell:setVisible(false)
        cgCell:setAnchorPoint(display.CENTER)
        layer:addChild(cgCell)
        --cgCell.viewData.cellLayout:setTag(i)
        cgCell:setPosition(tabPos[i])
        cgCell:setTag(i)
    end
end
-- 创建tabview 页
function CollectCGListView:CreateTabView()
    local borderImage = display.newImageView(RES_DICT.SELECTION_FRAME_1 ,0,0,{size = cc.size(195,314) , scale9 = true } )
    local borderImageSize = borderImage:getContentSize()
    borderImage:setPosition(borderImageSize.width/2 , borderImageSize.height/2)
    local borderLayer  = display.newLayer(0,0 ,{ap = display.CENTER_BOTTOM , size = borderImageSize })
    borderLayer:addChild(borderImage)
    -- 居顶对其
    local topAlign =  80
    local height = 80
    local cellSize = cc.size(180,80)
    local count = #SCREEN_TYPE
    for i  =1 ,count do
        local button = display.newButton(borderImageSize.width/2 , borderImageSize.height - topAlign -( i -1) * height  , {size  = cellSize , tag = SCREEN_TYPE[i].tag  })
        borderLayer:addChild(button)
        display.commonLabelParams(button , fontWithColor(5, {fontSize = 20,  text = SCREEN_TYPE[i].descr  , w = 150 , hAlign = display.TAC}))
        local selectImage = display.newImageView(RES_DICT.FILTER_SELECTED , cellSize.width/2 , cellSize.height/2,{scale9 = true , size =  cellSize} )
        button:addChild(selectImage)
        selectImage:setName("selectImage")
        if i ~= count  then  -- 横线
            local lineImage = display.newImageView(RES_DICT.SELECTION_LINE , cellSize.width/2 , 0 )
            button:addChild(lineImage)
        end
    end
    return borderLayer
end
return CollectCGListView
