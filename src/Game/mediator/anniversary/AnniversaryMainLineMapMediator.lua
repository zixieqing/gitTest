---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/10/15 2:07 PM
---
--[[
扭蛋系统mediator
--]]
local Mediator                      = mvc.Mediator
---@class AnniversaryMainLineMapMediator :Mediator
local AnniversaryMainLineMapMediator = class("AnniversaryMainLineMapMediator", Mediator)
local NAME                          = "AnniversaryMainLineMapMediator"
local MAP_TYPE = {
    START_POINT_TYPE     = 1, -- 起点
    MONSTER_TYPE         = 2, -- boss怪物类型
    SMALL_BOSS_TYPE      = 3, -- 小怪
    SPOT_TYPE            = 4, -- 剧情
    BLOCK_MARKETER_TYPE  = 5, -- 黑市商人
    RECIPE_MARKETER_TYPE = 6, -- 食谱商人
    CHEST_TYPE           = 7, -- 宝箱
    RAND_MOVE_TYPE       = 8, -- 随机移动
    SPACE_TYPE           = 9, -- 空白
}
local  ANNIVERARY_STATUS = {
    FREE = 1 ,
    ACTION = 2 ,
    USE_GOLDEN = 3 ,
    ENTER_ANIMATION = 4 , --正在入场动画中 
}

local MOVE_MAX_SETUP = 6
local ANNIVERSARY_EVENT = {
    MOVE_EVENT = "MOVE_EVENT",
}
local BUTTON_CLICK = {
    CLOSE_LAYER        = 10001,
    ACTION             = 10002,
    GOLDREN_AIR        = 10003,
    GIVE_UP            = 10004, -- 放弃整个章节
    CANCEL_GOLDREN_AIR = 10005,
    USE_GOLDEN_AIR     = 10006,
    GIVE_UP_USE_GOLDEN = 10007,
    DRAW_CHAPTER_REWARD= 10008,
}
local anniversaryManager = app.anniversaryMgr
function AnniversaryMainLineMapMediator:ctor(param, viewComponent)
    self.super:ctor(NAME, viewComponent)
    self.monsterQavatar = nil  -- boss 的spine
    self.qAvatar = nil   -- 人物的spine
    local param = param or {}
    self.chapterType = param.chapterType
    self.chapterSort = param.chapterSort
    self.chapterId   = param.chapterId
    if not  self.chapterType then
        local homeData = anniversaryManager.homeData
        self.chapterType =checkint(homeData.chapterType)
        self.chapterSort = checkint(homeData.chapterSort)
        self.chapterId = anniversaryManager:GetChpterIdByChapeterTypeChapterSort(self.chapterType , self.chapterSort)
    end
    local anniversaySpineTable   = {
        app.anniversaryMgr:GetSpinePath('effects/anniversary/anni_maps_icon_dice').path
    }
    local shareSpineCache = SpineCache(SpineCacheName.ANNIVERSARY)
    for  index = 1 , #anniversaySpineTable do
        local spinePath = anniversaySpineTable[index]
        if not shareSpineCache:hasSpineCacheData(spinePath) then
            shareSpineCache:addCacheData(spinePath, spinePath, 1)
        end
    end
    self.anniversaryStatus = ANNIVERARY_STATUS.ENTER_ANIMATION
    self.randStepData = {}
    self.selectGoldrenIndex  = nil
    self.mapPosIndex =  1
    self.bossIndex = 0
    self.mapPointTable  = {
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 },
        {pos = cc.p(0,0) , index = 0 , type = 1, bossId = 0 }
    }
    self:GetMapPointTable()
    local locationGrid = anniversaryManager.homeData.chapterQuest.locationGrid
    local index = locationGrid %24 == 0 and 24 or  locationGrid %24
    self.mapPosIndex = index
    local prePos = nil
    local currentPos = nil
    if index > 1 and index <=  24   then
        prePos =   self.mapPointTable[index-1].pos
        currentPos = self.mapPointTable[index].pos
        if currentPos.x > prePos.x   then
            self.direction =  1
        else
            self.direction =  -1
        end
    else
        prePos =   self.mapPointTable[index+1].pos
        currentPos = self.mapPointTable[index].pos
        if currentPos.x > prePos.x   then
            self.direction =  -1
        else
            self.direction =  1
        end
    end
end

function AnniversaryMainLineMapMediator:GetMapPointTable()
    local parserConfig = anniversaryManager:GetConfigParse()
    local chapterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
    local index = chapterConfig[tostring(self.chapterId)].map or 1
    local parserConfig =  anniversaryManager:GetConfigParse()
    local chapterMapConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER_MAP)[tostring(index)]
    local mapGridConfig =  anniversaryManager:GetConfigDataByName(parserConfig.TYPE.MAP_GRID)
    local count = 0
    for i = 1 , 24 do
        count = count + 1
        local mapGridValue = anniversaryManager.homeData.chapterGrids[tostring(i)]
        if mapGridValue then
            local pos = chapterMapConfig[tostring(count)].location
            pos = anniversaryManager:ConverUIPosToGamePos(pos)
            self.mapPointTable[count].pos = pos
            self.mapPointTable[count].index = i
            local mapGridOneConfig  = mapGridConfig[tostring(mapGridValue)] or {}
            if mapGridOneConfig  then
                local mapGridType = checkint(mapGridOneConfig.type)
                self.mapPointTable[count].type = checkint(mapGridType)
                if MAP_TYPE.MONSTER_TYPE ==  mapGridType then
                    local questId= mapGridOneConfig.questId
                    local questConfig =  anniversaryManager:GetConfigDataByName(parserConfig.TYPE.QUEST)
                    local questOneConfig = questConfig[tostring(questId)]
                    if questOneConfig then
                        self.bossIndex = count
                        self.mapPointTable[count].bossId = questOneConfig.showMonster[1]
                    end
                end
            end
        else
        end
    end
end

function AnniversaryMainLineMapMediator:InterestSignals()
    local signals = {
        POST.ANNIVERSARY_RAND_STEP_NUM.sglName ,
        POST.ANNIVERSARY_QUIT_CHAPTER.sglName ,
        POST.ANNIVERSARY_DRAW_CHAPTER_REWARDS.sglName ,
        SIGNALNAMES.CACHE_MONEY_UPDATE_UI ,
        ANNIVERSARY_BGM_EVENT ,
        ANNIVERSARY_EVENT.MOVE_EVENT ,
    }
    return signals
end


function AnniversaryMainLineMapMediator:ProcessSignal(signal)
    local name = signal:GetName()
    local data = signal:GetBody()
    if name  == POST.ANNIVERSARY_RAND_STEP_NUM.sglName then
        self.randStepData = data
        local requestData = data.requestData or {}
        self:SetTouchGoldenNodeIsVisible(false)
        if  checkint(requestData.randType ) == 2 and checkint(requestData.num ) >=   1  then
            -- 设置黄金飞艇跳转节点点击node 影藏
            CommonUtils.DrawRewards({{ goodsId = app.anniversaryMgr:GetGoldenAirShipID() , num = -1  }  })
            self:UpdateGoldenAirShip()
            app:DispatchObservers(ANNIVERSARY_EVENT.MOVE_EVENT , data )
        else
            self:GetGriddleSpineAnimation()
        end
        self:SetTouchNodeIsVisible(true )
    elseif name ==  POST.ANNIVERSARY_QUIT_CHAPTER.sglName then
        local homeData = anniversaryManager.homeData
        -- 放弃 直接重置掉数据  然后退出
        homeData.chapterType = 0
        homeData.chapterSort = 0
        homeData.chapterGrids = {}
        homeData.chapterQuest = {}
        --放弃支线关卡 刷新类型
        if self.chapterType ~= 1 then
            homeData.branchRefresh = {}
        end
        ---@type Router
        local router = app:RetrieveMediator('Router')
        router:Dispatch({ name = "anniversary.AnniversaryMainLineMapMediator" } ,
                        { name = "anniversary.AnniversaryMainMediator" })
    elseif name ==  ANNIVERSARY_EVENT.MOVE_EVENT then
        self.randStepData = data
        local locationGrid = anniversaryManager.homeData.chapterQuest.locationGrid
        local endLocationGrid = checkint(data.locationGrid)
        local maxIndex = 24
        local minIndex = 1
        self.mapPosIndex = endLocationGrid %24 == 0 and 24 or endLocationGrid %24
        endLocationGrid =  endLocationGrid  > maxIndex and  maxIndex or endLocationGrid
        endLocationGrid =  endLocationGrid  <=  minIndex and  minIndex or endLocationGrid
        anniversaryManager.homeData.chapterQuest.locationGrid = endLocationGrid
        anniversaryManager.homeData.chapterQuest.gridShop =  data.gridShop or {}
        anniversaryManager.homeData.chapterQuest.gridStatus = checkint(data.gridStatus)
        local requestData = data.requestData
        if checkint(requestData.randType )  == 2  then
            ---@type AnniversaryMainLineMapView
            local viewComponent = self:GetViewComponent()
            local viewData = viewComponent.viewData
            local airShipSpine = viewData.moveLayer:getChildByName("airShipSpine")
            if  not airShipSpine then
                self:CreateAirShipSpine()
            end
            self:AirShipMoveAction(locationGrid , endLocationGrid)
        else
            local seq = self:GetAnimationStartIndexAndEndIndex(locationGrid ,endLocationGrid)
            self:GetViewComponent():runAction(
                cc.Sequence:create(
                    cc.CallFunc:create(function()
                            self:SetqAvatarImageIsVisible(false)
                            end
                    ),
                    cc.TargetedAction:create( self.qAvatar , seq),
                    cc.CallFunc:create(
                        function()
                            self:RunOperaStoryStory(self.mapPosIndex)
                        end
                    )
                )
            )
        end
     elseif name == SIGNALNAMES.CACHE_MONEY_UPDATE_UI then
        self:UpdateGoldenAirShip()
    elseif name == POST.ANNIVERSARY_DRAW_CHAPTER_REWARDS.sglName then
        local rewards = data.rewards
        local parserConfig = anniversaryManager:GetConfigParse()
        local chapterConfig =  anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
        local chapterData = chapterConfig[tostring(self.chapterId)] or {}
        local data = {num = checkint(chapterData.score) , goodsId = app.anniversaryMgr:GetAnniversaryScoreId()}
        rewards[#rewards+1] = data
        app.uiMgr:AddDialog('common.RewardPopup',{ rewards = rewards , closeCallback = function()
            ---@type Router
            local router = app:RetrieveMediator("Router")
            router:Dispatch({} , { name = "anniversary.AnniversaryMainMediator"})
        end})
    elseif name == ANNIVERSARY_BGM_EVENT then
        anniversaryManager:PlayAnniversaryMainBGM()
    end
end
function AnniversaryMainLineMapMediator:Initial(key)
    self.super.Initial(self, key)

    local parserConfig = anniversaryManager:GetConfigParse()
    local chapterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
    local chapterData = chapterConfig[tostring(self.chapterId)]
    local mapId = checkint(chapterData.map)
    ---@type AnniversaryMainLineMapView
    local viewComponent = require('Game.views.anniversary.AnniversaryMainLineMapView').new({mapId = mapId})
    self:SetViewComponent(viewComponent)
    app.uiMgr:SwitchToScene( viewComponent)
    local viewData = viewComponent.viewData
    local backBtn = viewData.backBtn
    backBtn:setTag(BUTTON_CLICK.CLOSE_LAYER)
    display.commonUIParams(backBtn , {cb = handler(self, self.ButtonAction)})
    self:CreateMoveNode()
    local diceBtn = viewData.diceBtn
    diceBtn:setTag(BUTTON_CLICK.ACTION)
    display.commonUIParams(diceBtn , {cb = handler(self, self.ButtonAction)})
    local shipBtn = viewData.shipBtn
    display.commonUIParams(shipBtn , { cb = handler(self, self.ButtonAction)})
    shipBtn:setTag(BUTTON_CLICK.GOLDREN_AIR)
    local giveUpBtn = viewData.giveUpBtn
    display.commonUIParams(giveUpBtn , { cb = handler(self, self.ButtonAction)})
    giveUpBtn:setTag(BUTTON_CLICK.GIVE_UP)
    if mapId == 2 and app.anniversaryMgr:GetIsAddSpot() then
        viewComponent:AddSpotUpImage()
    end
    self:UpdateGoldenAirShip()
    self:SetTouchNodeIsVisible(true)
    self:SetTouchGoldenNodeIsVisible(false)
    self:AnniversaryMapIsCompleteHide()

end
-- 飞艇
function AnniversaryMainLineMapMediator:CreateAirShipSpine()
    local shareSpineCache = SpineCache(SpineCacheName.ANNIVERSARY)
    local airShipSpine = shareSpineCache:createWithName(anniversaryManager.spineTable.ANNI_FEICHUAN)
    airShipSpine:setName("airShipSpine")
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    viewComponent:addChild(airShipSpine,100)
    airShipSpine:setVisible(false)
    
end
function AnniversaryMainLineMapMediator:SetqAvatarImageIsVisible(isVisible)
    local locationGrid = checkint(self.mapPosIndex)
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    if (not tolua.isnull(viewComponent)) and viewComponent.viewData then
        local viewData = viewComponent.viewData
        local qAvatarImage = viewData.qAvatarImage
        local pos = self.mapPointTable[locationGrid].pos
        qAvatarImage:setPosition(pos.x  , pos.y + 50  )
        qAvatarImage:setVisible(isVisible)
    end
end

function AnniversaryMainLineMapMediator:UpdateGoldenAirShip()
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local consumBg = viewData.consumBg
    display.commonLabelParams(consumBg ,
        fontWithColor(18 , {paddingW = 10 ,  text = string.format(app.anniversaryMgr:GetPoText(__('剩余数量：%d')) , checkint(CommonUtils.GetCacheProductNum(app.anniversaryMgr:GetGoldenAirShipID()))) } ))
end
function AnniversaryMainLineMapMediator:InitEnterUI()
    local chapterQuest = anniversaryManager.chapterQuest
   local type = checkint(self.mapPointTable[self.mapPosIndex].type)
    if type == MAP_TYPE.SMALL_BOSS_TYPE or type == MAP_TYPE.MONSTER_TYPE  then
        if checkint(chapterQuest.gridStatus) == 0   then
            self:EnterBattleView(self.mapPosIndex)
            return
        end
    elseif type == MAP_TYPE.BLOCK_MARKETER_TYPE or type == MAP_TYPE.RECIPE_MARKETER_TYPE then
        local gridShop = chapterQuest.gridShop or {}
        if  checkint(gridShop.isPurchase) == 0   then
           local mediatorName =  "AnniversaryBlackMarketMediator"
            if  type == MAP_TYPE.RECIPE_MARKETER_TYPE then
                mediatorName =   "AnniversayFoodStoreMediator"
            end
            -- 直接打开fe
            local mediator = require('Game.mediator.anniversary' .. mediatorName)
            app:RegistMediator(mediator)
        end
    end
end
function AnniversaryMainLineMapMediator:CreateMoveNode()
    self.anniversaryStatus = ANNIVERARY_STATUS.ENTER_ANIMATION
    ---@type AnniversaryMainLineMapView
    local viewComponent  = self:GetViewComponent()
    local viewData  = viewComponent.viewData
    local parserConfig = anniversaryManager:GetConfigParse()
    local chapterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
    local chapterOneData = chapterConfig[tostring(self.chapterId)]

    local mapId = checkint(chapterOneData.map)
    local data = nil
    for i = 1 , 24 do
        data = self.mapPointTable[i]
        local direction = 21
        if i == 24  then
            direction = 29
        end
        local image =  nil
        local imageSize = nil
        local touchGoldenNode = nil
        local ctype  = checkint(data.type)
        if ctype ~= 2   then
            image = display.newImageView( app.anniversaryMgr:GetResPath(string.format('ui/anniversary/map/anni_maps_level2_%d_spot' ,mapId) ),data.pos.x  , data.pos.y , { ap = display.CENTER } )
            imageSize = image:getContentSize()

            touchGoldenNode = display.newLayer(data.pos.x  , data.pos.y  + direction , {ap = display.CENTER_BOTTOM ,  enable = true , color = cc.c4b(0,0,0,0) , size = cc.size(imageSize.width/2 + 10 , imageSize.height/2 + 10  ) })
            local imageL = display.newImageView(app.anniversaryMgr:GetResPath(string.format('ui/anniversary/map/anni_maps_level2_%d_spot' ,mapId) ) , (imageSize.width/2 + 10)/2 , (imageSize.height/2 + 10)/2)
            touchGoldenNode:addChild(imageL )
            touchGoldenNode:setName("imageL")
            if ctype ~= 1 and ctype ~= 9   then
                local contentImage = display.newImageView( app.anniversaryMgr:GetResPath(string.format('ui/anniversary/map/anni_maps_two_spot_%d' ,checkint(data.type)) ),
                                                           imageSize.width/2 , imageSize.height/2)
                image:addChild(contentImage)
                image:setCascadeOpacityEnabled(true)
                contentImage:setCascadeOpacityEnabled(true)
                local contentImageL = display.newImageView( app.anniversaryMgr:GetResPath(string.format('ui/anniversary/map/anni_maps_two_spot_%d' ,checkint(data.type)) ),
                                                            (imageSize.width/2 + 10)/2 , (imageSize.height/2 + 10)/2)
                touchGoldenNode:addChild(contentImageL)
            end
        elseif  ctype == 2  then

            image = display.newImageView( app.anniversaryMgr:GetResPath(string.format('ui/anniversary/map/anni_maps_two_spot_2_%d' ,mapId) ),data.pos.x  , data.pos.y , { ap = display.CENTER } )
            imageSize = image:getContentSize()
            touchGoldenNode = display.newLayer(data.pos.x  , data.pos.y  + direction , {ap = display.CENTER_BOTTOM ,  enable = true , color = cc.c4b(0,0,0,0) , size = cc.size(imageSize.width/2 + 10 , imageSize.height/2 + 10  ) })
        end

        touchGoldenNode:setVisible(false)
        viewComponent.viewData.lightLayer:addChild(touchGoldenNode )
        local lightImage = display.newImageView( app.anniversaryMgr:GetResPath('ui/anniversary/map/anni_maps_two_spot_light' ) ,(imageSize.width/2 + 10)/2 , (imageSize.height/2 + 10)/2 , { ap = display.CENTER } )
        touchGoldenNode:addChild(lightImage)
        lightImage:setName("lightImage")
        lightImage:setVisible(false)
        display.commonUIParams(touchGoldenNode , {cb = handler(self, self.TouchGoldenNodeClick)})
        touchGoldenNode:setTag(i+ 24)

        local node = display.newLayer(data.pos.x  , data.pos.y  + 6.7 , {ap = display.CENTER_BOTTOM , size = imageSize})
        node:addChild(image )
        image:setName("image")
        image:setPosition(imageSize.width/2, imageSize.height/2 )
        viewData.moveLayer:addChild(node)
        local sizee = 0
        local pos = nil
        local ap = display.CENTER_BOTTOM
        if i == 24  then
            local  locationGrid = checkint(anniversaryManager.homeData.chapterQuest.locationGrid)
            local  gridStatus = checkint(anniversaryManager.homeData.chapterQuest.gridStatus)
            if locationGrid == 24 and gridStatus == 1 then
                sizee = imageSize
                pos = cc.p(imageSize.width/2 , imageSize.height/2 )
                ap = display.CENTER
            else
                sizee = cc.size(imageSize.width/2 + 10 , imageSize.height/2 + 10  )
                pos = cc.p(imageSize.width/2 , imageSize.height/2- 30 )
            end
        else
            sizee = cc.size(imageSize.width/2 + 10 , imageSize.height/2 + 10  )
            pos = cc.p(imageSize.width/2 , imageSize.height/2- 20 )
        end
        local touchNode =  display.newLayer(pos.x , pos.y , {ap = ap ,enable = true ,  color = cc.c4b(0,0,0,0) , size = sizee })
        node:addChild(touchNode )


        display.commonUIParams(touchNode , {cb = handler(self, self.TouchNodeClick)})
        touchNode:setName("touchNode")
        touchNode:setTag(i)
        touchNode:setVisible(false)
        data.node = node
        node:setOpacity(0)
        local seq = nil
        if i == 24  then
            seq =  cc.Sequence:create(
                cc.DelayTime:create((i -1) / 30  ),
                cc.Spawn:create(
                        cc.FadeIn:create(5/30 ),
                        cc.MoveBy:create(5/30,cc.p(0, -6.7))
                ) ,
                cc.CallFunc:create(function()
                    if self.bossIndex > 0   then
                        -- 在这个里面创建spine
                        local  locationGrid = checkint(anniversaryManager.homeData.chapterQuest.locationGrid)
                        local  gridStatus = checkint(anniversaryManager.homeData.chapterQuest.gridStatus)
                        local mode  = locationGrid   % 24
                        mode = mode == 0  and 24 or mode
                        local  bossId  = self.mapPointTable[self.bossIndex].bossId
                        -- 判断是否通过该关卡
                        if gridStatus == 1 and mode == 24  then
                            bossId = 310002
                            local rewardBtn = display.newButton(self.mapPointTable[24].pos.x , self.mapPointTable[24].pos.y + 100 ,                         { n = app.anniversaryMgr:GetResPath('ui/common/common_btn_big_orange')})
                            display.commonLabelParams(rewardBtn,fontWithColor(14,{text = app.anniversaryMgr:GetPoText(__('领取奖励'))}))
                            viewComponent:addChild(rewardBtn , 101)
                            viewComponent:setName("rewardBtn")
                            rewardBtn:setTag(BUTTON_CLICK.DRAW_CHAPTER_REWARD)
                            display.commonUIParams(rewardBtn , {cb = handler(self, self.ButtonAction)})
                            local data = self.mapPointTable[24]
                            local touchNode = data.node:getChildByName("touchNode")
                            touchNode:setVisible(false)
                        end
                        local skinId = CardUtils.GetCardSkinId(bossId)
                        local qAvatar = AssetsUtils.GetCardSpineNode({skinId = skinId, scale = 0.5})
                        qAvatar:update(0)
                        qAvatar:setTag(1)
                        qAvatar:setAnchorPoint(display.LEFT_BOTTOM)
                        local touchNode = display.newLayer(self.mapPointTable[24].pos.x  ,self.mapPointTable[24].pos.y + 150 , {ap = display.CENTER ,  size = cc.size(100, 150) , color = cc.c4b(0,0,0,0) ,enable = true})
                        touchNode:setTag(24)
                        display.commonUIParams(touchNode , {cb = handler(self, self.TouchNodeClick) })
                        viewComponent.viewData.moveLayer:addChild(touchNode,100)
                        local viewComponent = self:GetViewComponent()
                        viewComponent:addChild(qAvatar,1)
                        self.monsterQavatar = qAvatar
                        if self.mapPointTable[24].pos.x > self.mapPointTable[23].pos.x then
                            qAvatar:setScaleX(-1)
                        end
                        local  pos = self.mapPointTable[self.bossIndex].pos
                        qAvatar:setPosition(cc.p(pos.x + 10 , pos.y + 50))
                        local teamCards = anniversaryManager.homeData.teamCards
                        local playerId = nil
                        for i = 1, 5  do
                            if teamCards[i] and checkint(teamCards[i]) > 0  then
                                playerId = teamCards[i]
                                break
                            end
                        end
                        if playerId then
                            local cardData =app.gameMgr:GetCardDataById(playerId)
                            ---@type AnniversaryMainLineMapView
                            local viewComponent = self:GetViewComponent()
                            local qAvatar = viewComponent:CreateCardSpin(cardData)
                            qAvatar:update(0)
                            qAvatar:setAnchorPoint(display.LEFT_BOTTOM)
                            viewComponent:addChild(qAvatar , 100)
                            qAvatar:setScaleY(0.6)
                            qAvatar:setScaleX(self.direction * 0.6)

                            local  pos = self.mapPointTable[mode].pos
                            qAvatar:setPosition(pos.x + 10 , pos.y + 50 )
                            qAvatar:setAnimation(0, 'idle' , true )
                            self.qAvatar = qAvatar
                            if mode == 24 and gridStatus == 1 then
                                qAvatar:setVisible(false)
                            end
                            qAvatar:setOpacity(0)
                            qAvatar:runAction(
                               cc.Sequence:create(
                                    cc.Spawn:create(
                                        cc.TargetedAction:create(self.mapPointTable[mode].node ,
                                             cc.Sequence:create(
                                                 cc.MoveBy:create(2/30 ,cc.p(0,-5.4)  ),
                                                 cc.MoveBy:create(3/30 ,cc.p(0,5.4)  )
                                             )
                                        ),
                                        cc.Sequence:create(
                                            cc.FadeIn:create(2/30),
                                            cc.MoveBy:create(2/30 ,cc.p(0,-5.4)  ),
                                            cc.MoveBy:create(3/30 ,cc.p(0,5.4)  )
                                        )
                                    ) ,
                                    cc.CallFunc:create(function()
                                        self.anniversaryStatus = ANNIVERARY_STATUS.FREE
                                        self:SetqAvatarImageIsVisible(true)
                                    end
                                    )
                               )
                            )
                        end
                    end
                end
                )
            )
        else
            seq  =  cc.Sequence:create(
                    cc.DelayTime:create((i -1) / 30  ),
                    cc.Spawn:create(
                            cc.FadeIn:create(5/30 ),
                            cc.MoveBy:create(5/30,cc.p(0, -6.7))
                    )
            )
        end
        node:runAction( seq)

    end
end
function AnniversaryMainLineMapMediator:RunOperaStoryStory(index)
    local callfuncThree =  function ()
        local viewComponent = self:GetViewComponent()
        if viewComponent and (not tolua.isnull(viewComponent)) then
            self:SetqAvatarImageIsVisible(true)
            self:UpdateIndex(index)
        end
    end
    local callfuncTwo = function()
        -- 存在步骤剧情
        if checkint(self.randStepData.stepStoryId) > 0 then
            self:GetViewComponent():runAction(cc.Sequence:create(
                    cc.DelayTime:create(0.1) ,
                    cc.CallFunc:create(function()
                        anniversaryManager:ShowOperaStage(self.randStepData.stepStoryId ,callfuncThree )
                    end)
            ))
        else
            callfuncThree()
        end
    end
    local  callfuncOne  = function()
        -- 存在节点剧情
        if checkint(self.randStepData.storyId) > 0  then
            anniversaryManager:ShowOperaStage(self.randStepData.storyId , callfuncTwo)
        else
            callfuncTwo()
        end

    end
    callfuncOne()
end
function AnniversaryMainLineMapMediator:GetGriddleSpineAnimation( )
    ---@type AnniversaryMainLineMapView
    local requestData = self.randStepData.requestData
    local moveRand = checkint(requestData.moveRand)
    local moveType = checkint(self.randStepData.moveType)
    self.anniversaryStatus = ANNIVERARY_STATUS.ACTION
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local spineLayer = viewData.spineLayer
    spineLayer:setVisible(true)
    local grideSpine = spineLayer:getChildByName("grideSpine")
    if not grideSpine then
        grideSpine = SpineCache(SpineCacheName.ANNIVERSARY):createWithName(anniversaryManager.spineTable.ANNI_MAPS_ICON_DICE)
        grideSpine:setName("grideSpine")
        spineLayer:addChild(grideSpine)
        grideSpine:setPosition(display.center)
    end
    grideSpine:setToSetupPose()
    local callfuncDirection = nil
    local  spinecallBack = function (event)
        if moveRand  == 0  then
            app:DispatchObservers(ANNIVERSARY_EVENT.MOVE_EVENT , self.randStepData)
            spineLayer:setVisible(false )
        elseif  moveRand  == 1 then
            callfuncDirection()
        end
    end
    callfuncDirection = function()
        local directionLayout = display.newLayer(display.cx , display.cy , {ap = display.CENTER , size = cc.size(780 ,300 )})
        spineLayer:addChild(directionLayout)
        local leftArrow = display.newImageView(app.anniversaryMgr:GetResPath('ui/anniversary/animation/arrow2') , 780/2 - 350 , 75  )
        directionLayout:addChild(leftArrow)
        local rightArrow = display.newImageView(app.anniversaryMgr:GetResPath('ui/anniversary/animation/arrow') ,780/2 +350 , 75   )
        directionLayout:addChild(rightArrow)
        local  leftLightImage = display.newImageView(app.anniversaryMgr:GetResPath('ui/anniversary/animation/anni_maps_icon_dice_shadow') ,100, 25  )
        local leftLightLayout = display.newLayer(780/2 - 350 , 225 , {ap = display.CENTER , size = cc.size(200 , 50 )})
        directionLayout:addChild(leftLightLayout)
        leftLightLayout:addChild(leftLightImage)


        local rightLightLayout = display.newLayer(780/2 +  350 , 225 , {ap = display.CENTER , size = cc.size(200 , 50 )})
        directionLayout:addChild(rightLightLayout)


        local  rightLightImage = display.newImageView(app.anniversaryMgr:GetResPath('ui/anniversary/animation/light') ,100, 25  )
        rightLightLayout:addChild(rightLightImage)


        local backLabel = display.newLabel(100 , 25 , fontWithColor(14, {text =  app.anniversaryMgr:GetPoText(__('后退')) ,  fontSize = 30 }))
        leftLightLayout:addChild(backLabel)

        local forwardLabel = display.newLabel(100, 25 , fontWithColor(14, {text =  app.anniversaryMgr:GetPoText(__('前进')) ,  fontSize = 30 }))
        rightLightLayout:addChild(forwardLabel)

        local lightThree = display.newButton(display.cx   , display.cy  , { n = app.anniversaryMgr:GetResPath('ui/anniversary/animation/light')})
        spineLayer:addChild(lightThree)
        lightThree:setVisible(false)
        display.commonLabelParams(lightThree , fontWithColor(14,{text ='' , fontSize = 30  }))
        local directionX = moveType == 1 and  -1  or 1
        local getAction = function(direction)
            local spawnAction =  cc.Spawn:create(
                    cc.MoveBy:create(  10/30 , cc.p(40 * direction, 0  )  ),
                                       cc.FadeIn:create(10/30 )
                   )
            return spawnAction
        end
        local callfunc = function(status )
            if status == 1 then
                leftArrow:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/arrow'))
                leftArrow:setScaleX(-1)
                leftLightImage:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/light'))

                rightArrow:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/arrow2'))
                rightArrow:setScaleX(-1)
                rightLightImage:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/anni_maps_icon_dice_shadow') )
            else
                rightArrow:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/arrow'))
                rightArrow:setScaleX(1)
                rightLightImage:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/light') )

                leftArrow:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/arrow2'))
                leftArrow:setScaleX(1)
                leftLightImage:setTexture(app.anniversaryMgr:GetResPath('ui/anniversary/animation/anni_maps_icon_dice_shadow') )
            end
        end
        local getActionByRandType = function(moveType)
            local arrowImage = nil
            local lightImage = nil
            local str = ""
            if moveType == 1 then
                arrowImage = rightArrow
                lightImage = rightLightLayout
                str = app.anniversaryMgr:GetPoText(__('向前'))
            else
                arrowImage = leftArrow
                lightImage = leftLightLayout
                str = app.anniversaryMgr:GetPoText(__('向后'))
            end
            display.commonLabelParams(lightThree , {text =str  })
            local seq =  cc.Sequence:create(
                cc.Spawn:create(
                    cc.TargetedAction:create( arrowImage ,
                          cc.Sequence:create(
                              cc.EaseSineOut:create(cc.MoveBy:create(
                                      7/30 , cc.p(0 , 45 )
                              ))   ,
                              cc.EaseSineIn:create(cc.MoveBy:create(
                                      3/30 , cc.p(0 , -45 )
                              )),
                              cc.DelayTime:create(3/30)
                          )
                    ),
                    cc.TargetedAction:create( lightImage ,
                          cc.Sequence:create(
                              cc.DelayTime:create(3/30),
                              cc.EaseSineOut:create(cc.MoveBy:create(
                                      5/30 , cc.p(0 , 45 )
                              ))   ,
                              cc.EaseSineIn:create(cc.MoveBy:create(
                                      5/30 , cc.p(0 , -45 )
                              ))
                          )
                    )
                ),
                cc.DelayTime:create(7/30),
                cc.Spawn:create(
                    cc.TargetedAction:create(directionLayout , cc.FadeOut:create(5/30 )),
                    cc.TargetedAction:create(forwardLabel , cc.FadeOut:create(5/30 )),
                    cc.TargetedAction:create(backLabel , cc.FadeOut:create(5/30 ))
                ),

                cc.TargetedAction:create(
                    lightThree ,  cc.Sequence:create(
                        cc.ScaleTo:create(0, 5),
                        cc.Show:create(),
                        cc.ScaleTo:create(5/30, 1.6),
                        cc.ScaleTo:create(2/30, 2.2),
                        cc.ScaleTo:create(2/30, 2.0),
                        cc.DelayTime:create(0.2)
                    )
                ),
                cc.Hide:create(),
                cc.TargetedAction:create(directionLayout , cc.RemoveSelf:create()),
                cc.TargetedAction:create(lightThree , cc.RemoveSelf:create()),
                cc.CallFunc:create(function()
                    app:DispatchObservers(ANNIVERSARY_EVENT.MOVE_EVENT , self.randStepData)
            end)
            )
            return  seq
        end
        spineLayer:runAction(
            cc.Sequence:create(
                cc.Spawn:create(
                    cc.TargetedAction:create(leftLightLayout ,getAction(-1) ),
                    cc.TargetedAction:create(leftArrow ,getAction(-1) ),
                    cc.TargetedAction:create(rightLightLayout ,getAction(1) ),
                    cc.TargetedAction:create(rightArrow ,getAction(1) )
                ),
                cc.DelayTime:create(5/30) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(0.1 ) ,
                cc.CallFunc:create(function()
                    callfunc(-1*directionX)
                end),
                cc.DelayTime:create(0.1 ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(0.1 ) ,
                cc.CallFunc:create(function()
                    callfunc(-1*directionX)
                end),
                cc.DelayTime:create(0.1 ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(0.1 ) ,
                cc.CallFunc:create(function()
                    callfunc(-1*directionX)
                end),
                cc.DelayTime:create(0.1 ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(4/30  ) ,
                cc.CallFunc:create(function()
                    callfunc(-1*directionX)
                end),
                cc.DelayTime:create(5/30  ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(7/30  ) ,
                cc.CallFunc:create(function()
                    callfunc(-1*directionX)
                end),
                cc.DelayTime:create(8/30  ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(9/30  ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(10/30  ) ,
                cc.CallFunc:create(function()
                    callfunc(1*directionX)
                end),
                cc.DelayTime:create(13/30),
                getActionByRandType(moveType)
            )
        )
    end
    spineLayer:setVisible(true )
    grideSpine:setTimeScale(2)
    grideSpine:setAnimation(0,'idle' .. self.randStepData.randNum , false)
    grideSpine:registerSpineEventHandler(spinecallBack, sp.EventType.ANIMATION_COMPLETE)
end

function AnniversaryMainLineMapMediator:UpdateIndex(index)
    local type = checkint(self.mapPointTable[index].type)
    if type == MAP_TYPE.START_POINT_TYPE then -- 起点
    elseif type == MAP_TYPE.MONSTER_TYPE then -- boss怪物类型
        if self.chapterType == 1 then
            local parserConfig = anniversaryManager:GetConfigParse()
            local chapterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
            local chapterOneConfig = chapterConfig[tostring(self.chapterId)]
            if checkint(anniversaryManager.homeData.gridStatus) == 0   then
                if checkint(chapterOneConfig.inBossStoryId)  > 0  then
                    anniversaryManager:ShowOperaStage(chapterOneConfig.inBossStoryId , function()
                        self:EnterBattleView(index)
                    end )
                else
                    self:CreateCutInSpine(function()
                        self:EnterBattleView(index)
                    end)
                end
            end
        else
            self:CreateCutInSpine(function()
                self:EnterBattleView(index)
            end)
        end

    elseif type == MAP_TYPE.SMALL_BOSS_TYPE then -- 小怪
        self:CreateCutInSpine(function()
            self:EnterBattleView(index)
        end)
    elseif type == MAP_TYPE.SPOT_TYPE then  -- 剧情
    elseif type == MAP_TYPE.BLOCK_MARKETER_TYPE then -- 黑市商人
        self:CreateCutInSpine(function()
            local mediator = require("Game.mediator.anniversary.AnniversaryBlackMarketMediator").new()
            app:RegistMediator(mediator)
        end)

    elseif type == MAP_TYPE.RECIPE_MARKETER_TYPE then -- 食谱商人
        self:CreateCutInSpine(function()
            local mediator = require("Game.mediator.anniversary.AnniversayFoodStoreMediator").new()
            app:RegistMediator(mediator)
        end)
    elseif type == MAP_TYPE.CHEST_TYPE then -- 宝箱
        CommonUtils.DrawRewards( self.randStepData.rewards or {})
        self:CreateCutInSpine(function()
            if self.randStepData.rewards then
                app.uiMgr:AddDialog('common.RewardPopup' , {rewards = self.randStepData.rewards  , addBackpack = false })
            end
        end)
    elseif type == MAP_TYPE.RAND_MOVE_TYPE then -- 随机移动
        self:SendSignal(POST.ANNIVERSARY_RAND_STEP_NUM.cmdName, {randType = 1 , num =0  , moveRand = 1})
    elseif type == MAP_TYPE.SPACE_TYPE then -- 空白

    end
end
function AnniversaryMainLineMapMediator:GetAnimationStartIndexAndEndIndex(startIndex  ,endIndex)
    local seq = {}
    local  vectorIndex =  startIndex > endIndex and - 1 or 1
    local  current = 1
    local Num = 0.5
    for i =  startIndex , endIndex - vectorIndex ,vectorIndex  do

        local scale =  0.6
        if self.mapPointTable[i].pos.x  >=  self.mapPointTable[i+vectorIndex].pos.x then
            current = -1
        else
            current = 1
        end
        scale = scale
        local mode =(i+ vectorIndex)  %24 == 0 and 24 or  (i+vectorIndex) %24
        seq[#seq+1] = cc.ScaleTo:create( 0.0 ,  current   * scale  , scale)
        if i == startIndex  then
            seq[#seq+1] = cc.ScaleTo:create(2/30 *Num  , 0.9*scale*current, 1.1*scale)
        end
        seq[#seq+1] = cc.Sequence:create(
            cc.Spawn:create(
                cc.Sequence:create(
                    cc.JumpTo:create(11/30 *Num  , cc.p( self.mapPointTable[i+vectorIndex].pos.x + 10 ,self.mapPointTable[i+vectorIndex].pos.y + 50) , 70 ,1 ),
                    cc.Spawn:create(
                        cc.Sequence:create(
                            cc.MoveBy:create(2/30 *Num , cc.p(0,-6)),
                            cc.MoveBy:create(2/30 *Num , cc.p(0,6))
                        ),
                        cc.TargetedAction:create( self.mapPointTable[mode].node ,
                            cc.Sequence:create(
                                cc.MoveBy:create(2/30 *Num , cc.p(0,-10)),
                                cc.MoveBy:create(2/30 *Num , cc.p(0,10))
                            )
                        )
                    )
                ),
                cc.Sequence:create(
                    cc.EaseSineIn:create(
                        cc.ScaleTo:create(6/30  *Num , 1 * scale*current,1*scale)
                    ),
                    cc.EaseSineIn:create(
                        cc.ScaleTo:create(6 / 30 *Num , 0.95 * scale * current, 1.15 * scale)
                    ),
                    cc.EaseSineIn:create(
                        cc.ScaleTo:create(3 / 30 *Num , 0.9 * scale * current, 1 * scale)
                    )
                )
            )
        )
        if i == endIndex - vectorIndex  then
            seq[#seq+1] = cc.ScaleTo:create(2/30 ,1*scale*current, 1*scale)
        end
    end
    local funcOne  = cc.CallFunc:create(
        function()
            self.anniversaryStatus = ANNIVERARY_STATUS.ACTION
        end
    )
    local funcTwo =  cc.CallFunc:create(
        function()
            self.anniversaryStatus = ANNIVERARY_STATUS.FREE
        end
    )
    table.insert(seq , 1 ,funcOne)
    seq[#seq+1] = funcTwo
    return cc.Sequence:create(seq)
end
function AnniversaryMainLineMapMediator:AirShipMoveAction(startIndex , endIndex)
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    local airShipSpine = viewComponent:getChildByName("airShipSpine")
    airShipSpine:setPosition( self.mapPointTable[checkint(startIndex)].pos.x ,  self.mapPointTable[checkint(startIndex)].pos.y + 80  )
    airShipSpine:setToSetupPose()
    airShipSpine:setAnimation(0, 'play1', false)
    airShipSpine:setTimeScale(2)
    airShipSpine:setVisible(true)
    local times = 0.1 * math.abs (startIndex - endIndex)
    local spinecallBack = function(event)
        if event.animation == 'play1' then
            airShipSpine:setToSetupPose()
            airShipSpine:setAnimation(0, 'idle',false)
            airShipSpine:runAction(
                cc.MoveTo:create(times ,  cc.p(self.mapPointTable[checkint(endIndex)].pos.x , self.mapPointTable[checkint(endIndex)].pos.y + 80 ) )
            )

        elseif event.animation == 'idle' then
            airShipSpine:setToSetupPose()
            self.qAvatar:setPosition(self.mapPointTable[endIndex].pos.x + 10 , self.mapPointTable[endIndex].pos.y + 80 )
            airShipSpine:addAnimation(0, 'play2',false)
            self.qAvatar:runAction(cc.Spawn:create(
                    cc.MoveBy:create(50/30 , cc.p(0, -30 )),
                    cc.Sequence:create( cc.FadeIn:create(25/30 ) ,cc.DelayTime:create(25/30)  )
            ))
        elseif event.animation == 'play2' then
            self:RunOperaStoryStory(self.mapPosIndex)
            self.anniversaryStatus = ANNIVERARY_STATUS.FREE
        end
    end
    self.anniversaryStatus = ANNIVERARY_STATUS.ACTION
    self.qAvatar:runAction(cc.Spawn:create(
            cc.Sequence:create(
                    cc.CallFunc:create(function()
                        if endIndex > startIndex then
                            if self.mapPointTable[startIndex].pos.x > self.mapPointTable[endIndex].pos.x then
                                self.qAvatar:setScaleX(-0.6)
                            else
                                self.qAvatar:setScaleX(0.6)
                            end
                        end
                        self:SetqAvatarImageIsVisible(false)
                    end),
                    cc.DelayTime:create(50/30)
            ),
            cc.MoveBy:create(50/30 , cc.p(0, 30 )),
            cc.Sequence:create(cc.DelayTime:create(25/30) , cc.FadeOut:create(25/30 ) )
    ))
    airShipSpine:registerSpineEventHandler(spinecallBack, sp.EventType.ANIMATION_COMPLETE)
end
function AnniversaryMainLineMapMediator:ButtonAction(sender)
    local tag = sender:getTag()
    PlayAudioByClickNormal()
    if tag == BUTTON_CLICK.CLOSE_LAYER then
        self:CloseLayer()
    elseif tag == BUTTON_CLICK.ACTION then
        self:ClickButtonAction()
    elseif tag == BUTTON_CLICK.GOLDREN_AIR then
        self:ClickGoldenAir()
    elseif tag == BUTTON_CLICK.GIVE_UP  then
        self:GiveUpChapter()
    elseif tag == BUTTON_CLICK.CANCEL_GOLDREN_AIR then
        self:JumpLayoutMoveOut()
    elseif tag == BUTTON_CLICK.USE_GOLDEN_AIR then
        self:UserGoldenAir()
    elseif tag == BUTTON_CLICK.GIVE_UP_USE_GOLDEN then
        self:GiveUpUseGoldenAir()
    elseif tag == BUTTON_CLICK.DRAW_CHAPTER_REWARD then
        self:DrawChapterReards()
    end
end
function AnniversaryMainLineMapMediator:DrawChapterReards()
    self:SendSignal(POST.ANNIVERSARY_DRAW_CHAPTER_REWARDS.cmdName, {})
end
function AnniversaryMainLineMapMediator:GiveUpUseGoldenAir()
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    viewComponent:MoveOutAnimationLayoutAction(function()
                                               self.anniversaryStatus  = ANNIVERARY_STATUS.FREE
    end)
    self:SetTouchGoldenNodeIsVisible(false)
    self:SetTouchNodeIsVisible(true)
end
function AnniversaryMainLineMapMediator:CloseLayer()
    ---@type Router
    local router = app:RetrieveMediator('Router')
    router:Dispatch({ name = "anniversary.AnniversaryMainLineMapMediator" } ,
                    { name = "anniversary.AnniversaryMainMediator" })
end
function AnniversaryMainLineMapMediator:ClickButtonAction()
    if  self.anniversaryStatus ==  ANNIVERARY_STATUS.FREE  then
        local type =  checkint(self.mapPointTable[self.mapPosIndex].type)
        -- 表示的是小怪关卡
        local chapterQuest =  anniversaryManager.homeData.chapterQuest or {}
        if type == MAP_TYPE.SMALL_BOSS_TYPE or type == MAP_TYPE.MONSTER_TYPE  then
            if checkint(chapterQuest.gridStatus) == 0   then
                app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('请先通关当前关卡')))
                self:EnterBattleView(self.mapPosIndex)
                return
            else
                self:SendSignal(POST.ANNIVERSARY_RAND_STEP_NUM.cmdName , { randType = 1 ,  num = 0  })
            end
        elseif type == MAP_TYPE.BLOCK_MARKETER_TYPE or type == MAP_TYPE.RECIPE_MARKETER_TYPE then
            local gridShop = chapterQuest.gridShop or {}
            if  checkint(gridShop.isPurchase) == 0   then
                app.uiMgr:AddCommonTipDialog({ descr  = app.anniversaryMgr:GetPoText(__('确定放弃购买商店物品么？')) ,callback = function()
                    self:SendSignal(POST.ANNIVERSARY_RAND_STEP_NUM.cmdName , { randType = 1 ,  num = 0})
                end })
            else
                self:SendSignal(POST.ANNIVERSARY_RAND_STEP_NUM.cmdName , {randType = 1 ,  num = 0 })
            end
        else
            self:SendSignal(POST.ANNIVERSARY_RAND_STEP_NUM.cmdName , { randType = 1 ,  num = 0})
        end
    else
        if  self.anniversaryStatus ==  ANNIVERARY_STATUS.ACTION then
            --app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('正在游戏中')))
            return
        elseif self.anniversaryStatus ==  ANNIVERARY_STATUS.USE_GOLDEN then
            app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('请选择前往的目的地')))
            return
        end
    end
end
function AnniversaryMainLineMapMediator:ClickGoldenAir()
    if self.anniversaryStatus == ANNIVERARY_STATUS.FREE  then
        local chapterQuest = anniversaryManager.homeData.chapterQuest
        local type =  self.mapPointTable[self.mapPosIndex].type
        local goldenNum = CommonUtils.GetCacheProductNum(app.anniversaryMgr:GetGoldenAirShipID())
        if goldenNum <= 0  then
            app.uiMgr:AddDialog('common.GainPopup',{goodsId = app.anniversaryMgr:GetGoldenAirShipID() })
            return
        end
        if self.anniversaryStatus == ANNIVERARY_STATUS.FREE then
            if type == MAP_TYPE.SMALL_BOSS_TYPE or type == MAP_TYPE.MONSTER_TYPE  then
                if checkint(chapterQuest.gridStatus) == 0   then
                    app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('请先通关当前关卡')))
                    self:EnterBattleView(self.mapPosIndex)
                    return
                else
                    self:AddCreateAmitionLayout()
                end
            elseif type == MAP_TYPE.BLOCK_MARKETER_TYPE or type == MAP_TYPE.RECIPE_MARKETER_TYPE then
                local gridShop = chapterQuest.gridShop or {}
                if  checkint(gridShop.isPurchase) == 0   then
                    app.uiMgr:AddCommonTipDialog({ descr  = app.anniversaryMgr:GetPoText(__('确定放弃购买商店物品么？')) ,callback = function()
                        self:AddCreateAmitionLayout()
                    end })
                else
                    self:AddCreateAmitionLayout()
                end
            else
                self:AddCreateAmitionLayout()
            end
        elseif  self.anniversaryStatus == ANNIVERARY_STATUS.USE_GOLDEN  then
            app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('请选择前往的目的地')))
            return
        elseif  self.anniversaryStatus == ANNIVERARY_STATUS.ACTION  then
            --app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('正在游戏中')))
            return
        end
    elseif  self.anniversaryStatus == ANNIVERARY_STATUS.USE_GOLDEN  then
        app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('请选择前往的目的地')))
        return
    elseif  self.anniversaryStatus == ANNIVERARY_STATUS.ACTION  then
        --app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('正在游戏中')))
    end
end
function AnniversaryMainLineMapMediator:AddCreateAmitionLayout()
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    viewComponent:CreateAnimationLayout()
    local animationLayout = viewComponent:getChildByName("animationLayout")
    viewComponent:EnterCreateAnimationLayoutAction()
    animationLayout:setVisible(true)
    local viewData = animationLayout.viewData
    local cancelBtn = viewData.cancelBtn
    cancelBtn:setTag(BUTTON_CLICK.CANCEL_GOLDREN_AIR)
    display.commonUIParams(cancelBtn ,{cb = handler(self, self.ButtonAction) } )

    local travelBtn = viewData.travelBtn
    travelBtn:setTag(BUTTON_CLICK.USE_GOLDEN_AIR)
    display.commonUIParams(travelBtn ,{cb = handler(self, self.ButtonAction) } )

    local backBtn = viewData.backBtn
    backBtn:setTag(BUTTON_CLICK.GIVE_UP_USE_GOLDEN)
    display.commonUIParams(backBtn ,{cb = handler(self, self.ButtonAction) } )
    self:RunActionGolden()
end
function AnniversaryMainLineMapMediator:GiveUpChapter()
    app.uiMgr:AddCommonTipDialog({ descr  = app.anniversaryMgr:GetPoText(__('确定要放弃该章节么？')) ,callback = function()
        self:SendSignal(POST.ANNIVERSARY_QUIT_CHAPTER.cmdName , {} )
    end })
end
function AnniversaryMainLineMapMediator:UserGoldenAir()
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    viewComponent:MoveOutAnimationLayoutAction()
    self:SendSignal(POST.ANNIVERSARY_RAND_STEP_NUM.cmdName , {randType = 2 , num =  self.selectGoldrenIndex  -   (24 + self.mapPosIndex)  })
end
function AnniversaryMainLineMapMediator:RunActionGolden()
    self.anniversaryStatus = ANNIVERARY_STATUS.USE_GOLDEN
    self:SetTouchGoldenNodeIsVisible(true)
    self:SetTouchNodeIsVisible(false)
    local startIndex = self.mapPosIndex + 1
    local endStartIndex= self.mapPosIndex + MOVE_MAX_SETUP > 24 and 24  or  self.mapPosIndex + MOVE_MAX_SETUP
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local lightLayer = viewData.lightLayer
    for i = startIndex , endStartIndex do
        local node =  lightLayer:getChildByTag(i + 24 )
        local lightImage = node:getChildByName("lightImage")
        lightImage:setVisible(true)
        lightImage:runAction(
            cc.RepeatForever:create(
                cc.Sequence:create(
                    cc.FadeTo:create(0.5,125 ) ,
                    cc.FadeTo:create(0.5,250 )
                )
            )
        )
    end
end

function AnniversaryMainLineMapMediator:StopActionGolden()
    self.anniversaryStatus = ANNIVERARY_STATUS.USE_GOLDEN
    local startIndex = self.mapPosIndex + 1
    local endStartIndex= self.mapPosIndex + MOVE_MAX_SETUP > 24 and 24  or  self.mapPosIndex + MOVE_MAX_SETUP
    local viewComponent = self:GetViewComponent()
    local viewData =viewComponent.viewData
    for i = startIndex , endStartIndex do
        local node = viewData.lightLayer:getChildByTag(24 + i )
        local lightImage = node:getChildByName("lightImage")
        lightImage:setVisible(false)
        lightImage:stopAllActions()
        lightImage:setOpacity(0)
    end
end

function AnniversaryMainLineMapMediator:TouchNodeClick(sender)
    local tag = sender:getTag()
    -- 如果是相同才能执行点击的事件
    print("self.anniversaryStatus  = " , self.anniversaryStatus )
    if self.anniversaryStatus ~= ANNIVERARY_STATUS.FREE then
        return
    end
    local type = checkint(self.mapPointTable[self.mapPosIndex].type)
    if self.mapPosIndex == tag  then
        if type == MAP_TYPE.SMALL_BOSS_TYPE or type == MAP_TYPE.MONSTER_TYPE then
            local homeData = anniversaryManager.homeData
            local chapterQuest = homeData.chapterQuest or {}
            if checkint(chapterQuest.gridStatus )  == 0  then
                self:EnterBattleView(self.mapPosIndex)
            end
        elseif  type == MAP_TYPE.BLOCK_MARKETER_TYPE  or type == MAP_TYPE.RECIPE_MARKETER_TYPE  then
            local homeData = anniversaryManager.homeData
            local chapterQuest = homeData.chapterQuest or {}
            local gridShop = chapterQuest.gridShop or {}
            local isPurchase = gridShop.isPurchase
            if isPurchase   == 0  then
                if type == MAP_TYPE.BLOCK_MARKETER_TYPE then -- 黑市商人
                    local mediator = require("Game.mediator.anniversary.AnniversaryBlackMarketMediator").new()
                    app:RegistMediator(mediator)
                elseif type == MAP_TYPE.RECIPE_MARKETER_TYPE then -- 食谱商人
                    local mediator = require("Game.mediator.anniversary.AnniversayFoodStoreMediator").new()
                    app:RegistMediator(mediator)
                end
            else
                app.uiMgr:ShowInformationTips(app.anniversaryMgr:GetPoText(__('已购买过商品 请继续游戏')))
            end
        end
    else
        type = checkint(self.mapPointTable[tag].type)
        if type ~= MAP_TYPE.SPACE_TYPE and type ~= MAP_TYPE.START_POINT_TYPE then
            if type == MAP_TYPE.MONSTER_TYPE then
                ---@type AnniversaryMainLineMapView
                local viewComponent = self:GetViewComponent()
                viewComponent:CreateChapterRewardLayer(self.chapterId)
            else
                local parserConfig = anniversaryManager:GetConfigParse()
                local questNodeTypeConf =  anniversaryManager:GetConfigDataByName(parserConfig.TYPE.QUEST_NODE_TYPE)
                local questOneNodeType = questNodeTypeConf[tostring(type)] or {}
                app.uiMgr:ShowInformationTipsBoard({targetNode = sender, title =questOneNodeType.name or "", descr = questOneNodeType.descr, type = 5})
            end
        end
    end
end

function AnniversaryMainLineMapMediator:TouchGoldenNodeClick(sender)
    local tag = sender:getTag()
    if self.anniversaryStatus ~= ANNIVERARY_STATUS.FREE and self.anniversaryStatus ~= ANNIVERARY_STATUS.USE_GOLDEN then
        return
    end
    if tag -   (self.mapPosIndex + 24)  <= MOVE_MAX_SETUP  and tag -   (self.mapPosIndex + 24)  > 0    then
        self.selectGoldrenIndex  = tag
        local viewComponent = self:GetViewComponent()
        local arrowImage = viewComponent:getChildByName("arrowImage")
        local sendPos = cc.p(sender:getPosition())
        if not arrowImage then

            arrowImage = display.newImageView(app.anniversaryMgr:GetResPath('ui/anniversary/map/anni_maps_two_arrow'),sendPos.x  , sendPos.y  , {ap = display.CENTER_BOTTOM})
            viewComponent:addChild(arrowImage,10000)
            arrowImage:setName("arrowImage")
        else
            arrowImage:setVisible(true)
            arrowImage:setPosition(sendPos)
        end
        self:JumpLayoutMoveIn()
    end
end
function AnniversaryMainLineMapMediator:JumpLayoutMoveIn()
    local viewComponent = self:GetViewComponent()
    local animationLayout = viewComponent:getChildByName("animationLayout")
    -- 添加检测的容错
    if not animationLayout then
       return
    end
    local viewData = animationLayout.viewData
    local judageLayout = viewData.judageLayout
    judageLayout:setVisible(true)
    local judagePos = cc.p(judageLayout:getPosition())
    if  judagePos.y < 90  then
        judageLayout:runAction(
            cc.Sequence:create(
                cc.CallFunc:create(
                    function()
                        self.anniversaryStatus =   ANNIVERARY_STATUS.ACTION
                    end
                ),
                cc.MoveTo:create(0.2, cc.p(670, 90)),
                cc.CallFunc:create(
                    function()
                        self.anniversaryStatus =   ANNIVERARY_STATUS.FREE
                    end
                )
            )
        )
    end
end
function AnniversaryMainLineMapMediator:JumpLayoutMoveOut()
    local viewComponent = self:GetViewComponent()
    local animationLayout = viewComponent:getChildByName("animationLayout")
    local viewData = animationLayout.viewData
    local judageLayout = viewData.judageLayout
    local viewComponent = self:GetViewComponent()
    local arrowImage = viewComponent:getChildByName("arrowImage")
    if arrowImage then
        arrowImage:setVisible(false)
    end
    judageLayout:runAction(
        cc.Sequence:create(
            cc.CallFunc:create(
                function()
                    self.anniversaryStatus =   ANNIVERARY_STATUS.ACTION
                end
            ),
            cc.MoveTo:create(0.2, cc.p(670, 0)),
            cc.CallFunc:create(
                function()
                    self.anniversaryStatus =   ANNIVERARY_STATUS.FREE
                end
            )
        )
    )
end
function AnniversaryMainLineMapMediator:SetTouchGoldenNodeIsVisible(isVisible)
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local lightLayer = viewData.lightLayer
    local endIndex =  self.mapPosIndex + 6  > 24 and 24 or self.mapPosIndex + 6
    for i = self.mapPosIndex+1 ,endIndex  do
        local touchGoldenNode = lightLayer:getChildByTag(i + 24)
        touchGoldenNode:setVisible(isVisible)
        if self.monsterQavatar then
            if i == 24   then
                if isVisible then
                    self.monsterQavatar:setLocalZOrder(1001)
                else
                    self.monsterQavatar:setLocalZOrder(1)
                end
            end
        end

    end
end

function AnniversaryMainLineMapMediator:SetTouchNodeIsVisible(isVisible)
    for i = 1 , #self.mapPointTable do
        local node = self.mapPointTable[i].node
        local touchGoldenNode = node:getChildByTag(i)
        touchGoldenNode:setVisible(isVisible)
    end
end

function AnniversaryMainLineMapMediator:EnterBattleView(index)
    local parserConfig =  anniversaryManager:GetConfigParse()
    local mapGridConfig =  anniversaryManager:GetConfigDataByName(parserConfig.TYPE.MAP_GRID)
    local mapGridValue = anniversaryManager.homeData.chapterGrids[tostring(index)]
    local mapGridOneConfig  = mapGridConfig[tostring(mapGridValue)] or {}
    local questId = mapGridOneConfig.questId
    local serverCommand = BattleNetworkCommandStruct.New(
            POST.ANNIVERSARY_QUEST_AT.cmdName,
            {questId = questId},
            POST.ANNIVERSARY_QUEST_AT.sglName,
            POST.ANNIVERSARY_QUEST_GRADE.cmdName,
            {questId = questId},
            POST.ANNIVERSARY_QUEST_GRADE.sglName,
            nil,
            nil,
            nil
    )
    -- 跳转信息
    local name = "anniversary.AnniversaryMainLineMapMediator"
    if self.mapPosIndex == 24  then
        name = "anniversary.AnniversaryMainMediator"
    end
    local fromToStruct = BattleMediatorsConnectStruct.New(
            "anniversary.AnniversaryMainLineMapMediator",
            name
    )

    -- 阵容信息
    local  teamData = {}
    for k, v in pairs(anniversaryManager.homeData.teamCards) do
        teamData[checkint(k)] = checkint(v)
    end
    -- 选择的主角技信息
    local playerSkillData = {
        0, 0

    }
    for k , v in pairs(anniversaryManager.homeData.skill or {} )   do
        playerSkillData[checkint(k)] = v
    end
    -- 创建战斗构造器
    local battleConstructor = require('battleEntry.BattleConstructor').new()

    battleConstructor:InitStageDataByNormalEvent(
            checkint(questId),
            serverCommand,
            fromToStruct,
            teamData,
            playerSkillData
    )
    battleConstructor:OpenBattle()
end
-- 创建过场动画
function AnniversaryMainLineMapMediator:CreateCutInSpine(callback)
    local layer = display.newLayer(display.cx , display.cy , {size = display.size, ap = display.CENTER ,enable = true})
    local viewComponent = self:GetViewComponent()
    local colorView = display.newLayer(display.cx , display.cy ,{enable = true ,  ap = display.CENTER ,  size = display.size , color = cc.c4b(0,0,0,175) })
    layer:addChild(colorView)
    viewComponent:addChild(layer ,1000)
    local parserConfig = anniversaryManager:GetConfigParse()
    local chapterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
    local chapterData  = chapterConfig[tostring(self.chapterId)]
    local mapId = chapterData.map
    local mapBgImage  =  display.newImageView(app.anniversaryMgr:GetResPath("ui/anniversary/map/anni_catin_2"),display.width/2 , display.height/2)
    layer:addChild(mapBgImage )
    mapBgImage:setOpacity(0)
    local mapBgImageSize = mapBgImage:getContentSize()
    local mapImage = display.newImageView(app.anniversaryMgr:GetResPath(string.format('ui/anniversary/map/anni_catin_1_%d', mapId) ) , mapBgImageSize.width/2 , mapBgImageSize.height/2 )
    --mapImage:setOpacity(0)
    mapBgImage:setCascadeOpacityEnabled(true)
    mapBgImage:addChild(mapImage )
    local catineBgSpine = SpineCache(SpineCacheName.ANNIVERSARY):createWithName(anniversaryManager.spineTable.ANNI_CATIN_BG)
    catineBgSpine:setPosition(display.center )
    catineBgSpine:setAnimation(0, 'guang' , false)
    layer:addChild(catineBgSpine)
    catineBgSpine:setTimeScale(1.25)
    mapBgImage:runAction(
        cc.Sequence:create(
            cc.DelayTime:create(8/30),
            cc.FadeIn:create(8/30),
            cc.DelayTime:create(24/30 ),
            cc.FadeOut:create(10/30)
        )
    )
    local spinecallBack =  function (event)
        layer:runAction(
            cc.Sequence:create(
                cc.CallFunc:create(function()
                    if callback and type(callback ) == 'function' then
                        callback()
                        catineBgSpine:setTimeScale(1)
                    end
                end),

                cc.RemoveSelf:create()
            )
        )
    end
    catineBgSpine:registerSpineEventHandler(spinecallBack, sp.EventType.ANIMATION_COMPLETE)

    local nodeType = self.mapPointTable[self.mapPosIndex].type
    local getAction  = function()
        return   cc.Sequence:create(cc.DelayTime:create(5/30) ,
              cc.Spawn:create(
                  cc.Sequence:create(
                      cc.FadeIn:create(10/30),
                      cc.DelayTime:create(14/30 ),
                      cc.FadeOut:create(11/30)
                  ),
                  cc.Sequence:create(
                      cc.MoveBy:create(7/30 , cc.p(-415 , 0 )   ) ,
                      cc.MoveBy:create(38/30 , cc.p(-335, 0 ))
                  )
              )
        )
    end
    if nodeType == MAP_TYPE.MONSTER_TYPE or nodeType ==MAP_TYPE.SMALL_BOSS_TYPE
    or nodeType == MAP_TYPE.BLOCK_MARKETER_TYPE or  nodeType == MAP_TYPE.RECIPE_MARKETER_TYPE then
        local clipNodeStr  = ""
        local mapGridConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.MAP_GRID)
        local chapterGrids = anniversaryManager.homeData.chapterGrids  or {}
        local locationGrid = chapterGrids[tostring(self.mapPosIndex)]
        local mapGridData = mapGridConfig[tostring(locationGrid)]
        local cutIn = checkint(mapGridData.cutIn) > 0  and checkint(mapGridData.cutIn) or 1
        if  nodeType ==MAP_TYPE.MONSTER_TYPE then
            clipNodeStr = app.anniversaryMgr:GetResPath( string.format('ui/anniversary/map/anni_catin_boss_%d.png' , checkint(cutIn)))
            if  not  utils.isExistent(clipNodeStr) then
                clipNodeStr = app.anniversaryMgr:GetResPath('ui/anniversary/map/anni_catin_xiaoguai')
            end
        elseif nodeType ==  MAP_TYPE.SMALL_BOSS_TYPE then
            clipNodeStr = app.anniversaryMgr:GetResPath('ui/anniversary/map/anni_catin_xiaoguai')
        elseif nodeType == MAP_TYPE.RECIPE_MARKETER_TYPE  then
            clipNodeStr = app.anniversaryMgr:GetResPath('ui/anniversary/map/anni_catin_shiwushangren')
        elseif nodeType == MAP_TYPE.BLOCK_MARKETER_TYPE  then
            clipNodeStr = app.anniversaryMgr:GetResPath('ui/anniversary/map/anni_catin_shenmishangren')
        end
        local bossImage = display.newImageView( clipNodeStr,
                                                display.width/2 + 100    , display.height/2 )
        bossImage:setOpacity(0)
        layer:addChild(bossImage)
        bossImage:runAction(getAction())
    else
        local clipNode = cc.ClippingNode:create()
        clipNode:setContentSize(cc.size(display.width , 250 ))
        clipNode:setAnchorPoint(display.CENTER)
        clipNode:setPosition(display.center)
        clipNode:setInverted(false)
        clipNode:setAlphaThreshold(0.05)
        local stencilNode = display.newLayer(0 , 0  , {  color = cc.c4b(0,0,0,125), size = cc.size(display.width , 250 )})
        clipNode:setStencil(stencilNode)
        local chapterGrids = anniversaryManager.homeData.chapterGrids  or {}
        local locationGrid = chapterGrids[tostring(self.mapPosIndex)]
        local parserConfig =  anniversaryManager:GetConfigParse()
        local mapGridConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.MAP_GRID)
        local mapGridData = mapGridConfig[tostring(locationGrid)]
        local cutIn = checkint(mapGridData.cutIn) > 0  and checkint(mapGridData.cutIn) or 1
        cutIn =  cutIn <= 6  and cutIn or 1
        --local cutInTable = {
        --     'idle' ,
        --}
        -- 不同cuting 播放不同的spine
        local diamondSpine = SpineCache(SpineCacheName.ANNIVERSARY):createWithName(anniversaryManager.spineTable.ANNI_CATIN_ZHUAN)
        diamondSpine:setAnimation(0, 'idle' .. cutIn , false)
        diamondSpine:setPosition(display.width/2 , 260/2 -10 )
        diamondSpine:setAnchorPoint(display.CENTER)
        clipNode:addChild(diamondSpine)
        layer:addChild(clipNode,20 )
    end
end
--==============================--
---@Description: 当地图完成的时候隐藏 界面行动和飞艇 否则显示
---@author : xingweihao
---@date : 2018/11/22 2:47 PM
--==============================--

function AnniversaryMainLineMapMediator:AnniversaryMapIsCompleteHide()
    ---@type AnniversaryMainLineMapView
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local isVisible = true
    local chapterQuest =   anniversaryManager.homeData.chapterQuest  or {}
    local locationGrid = checkint(chapterQuest.locationGrid)
    local gridStatus = checkint(chapterQuest.gridStatus)
    if locationGrid == 24 and gridStatus ==1  then
        isVisible = false
    end
    viewData.leftBottomLayout:setVisible(isVisible)
    viewData.rightBottomLayout:setVisible(isVisible)
    viewData.giveUpBtn:setVisible(isVisible)
end
function AnniversaryMainLineMapMediator:OnRegist()
    regPost(POST.ANNIVERSARY_RAND_STEP_NUM)
    regPost(POST.ANNIVERSARY_QUIT_CHAPTER)
    regPost(POST.ANNIVERSARY_DRAW_CHAPTER_REWARDS)
    app:DispatchObservers(HomeScene_ChangeCenterContainer, "rightHide")
    app:DispatchObservers(HomeScene_ChangeCenterContainer, "allhide")

end

function AnniversaryMainLineMapMediator:OnUnRegist()
    -- 清除自己的 viewComponent
    self:SetViewComponent(nil)
    unregPost(POST.ANNIVERSARY_RAND_STEP_NUM)
    unregPost(POST.ANNIVERSARY_QUIT_CHAPTER)
    unregPost(POST.ANNIVERSARY_DRAW_CHAPTER_REWARDS)
    app:DispatchObservers(HomeScene_ChangeCenterContainer, "rightShow")
    app:DispatchObservers(HomeScene_ChangeCenterContainer, "hide")
end

return AnniversaryMainLineMapMediator
