---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/10/15 2:07 PM
---
--[[
扭蛋系统mediator
--]]
local Mediator                      = mvc.Mediator
---@class AnniversaryChooseCardMediator :Mediator
local AnniversaryChooseCardMediator = class("AnniversaryChooseCardMediator", Mediator)
local NAME                          = "AnniversaryChooseCardMediator"
local anniversaryManager = app.anniversaryMgr
local BUTTON_CLICK = {
    CHOOSE_CARD = 1001 , -- 选择卡牌按钮
}
function AnniversaryChooseCardMediator:ctor(param, viewComponent)
    self.super:ctor(NAME, viewComponent)
    local param = param or {}
    self.chooseCardId  =param.cardId
    self.cards = self:GetCards()
    self.selectIndex = param.cardId and self:GetCardIndex() or 1
end
function AnniversaryChooseCardMediator:GetCards()
    local  Tdatas = {}
    if not self.hideSkill then
        local Tdata = {}
        local tempData = {}
        local McardsData = {}
        local RcardsData = {}
        for name,val in orderedPairs(app.gameMgr:GetUserInfo().cards) do
            local cardData = CommonUtils.GetConfig('cards', 'card', val.cardId)
            local qualityId = 1
            if cardData then
                qualityId = checkint(cardData.qualityId)
            end
            val.qualityId = qualityId

            if checkint(self.chooseCardId) == checkint(val.cardId) then
                tempData = val
            else
                if checkint(qualityId) == 1 then
                    table.insert(McardsData,val)
                elseif checkint(qualityId) == 2 then
                    table.insert(RcardsData,val)
                else
                    table.insert(Tdata,val)
                end

            end
        end
        --排序规则： M卡>R卡有技能的>其他卡R卡>SR>UR
        Tdatas = clone(Tdata)

        sortByMember(Tdatas, "qualityId", true)

        local v = CommonUtils.GetBusinessSkillByCardId(cardId, {from = self.from, moduleId = self.moduleId})


        for i,v in ipairs(RcardsData) do
            if next(CommonUtils.GetBusinessSkillByCardId(v.cardId, {from = self.from, moduleId = self.moduleId})) ~= nil then
                v.hasSkill = 2
            else
                v.hasSkill = 1
            end
        end
        sortByMember(RcardsData, "hasSkill", true)

        for i,v in ipairs(RcardsData) do
            table.insert(Tdatas,1,v)
        end

        for i,v in ipairs(McardsData) do
            table.insert(Tdatas,1,v)
        end

        --将当前装备的卡牌置为第一位
        if table.nums(tempData) > 0 then
            table.insert(Tdatas,1,tempData)
        end
    else
        local chooseCardData = nil
        for k,v in orderedPairs(gameMgr:GetUserInfo().cards) do
            local cardData = CommonUtils.GetConfig('cards', 'card', v.cardId)
            local qualityId = 1
            if cardData then
                qualityId = checkint(cardData.qualityId)
            end
            v.qualityId = qualityId
            if checkint(self.chooseCardId) == checkint(v.cardId) then
                chooseCardData = v
            else
                table.insert( Tdatas, v )
            end
        end
        sortByMember(Tdatas, "qualityId", true)
        if chooseCardData then table.insert( Tdatas, 1, chooseCardData ) end
    end
    return  Tdatas
end
function AnniversaryChooseCardMediator:GetCardIndex()
    for i, v in pairs(self.cards) do
        if checkint(v.cardId) == self.chooseCardId  then
            return i
        end
    end
    return 1
end
function AnniversaryChooseCardMediator:InterestSignals()
    local signals = {
        POST.ANNIVERSARY_HOME.sglName
    }

    return signals
end

function AnniversaryChooseCardMediator:ProcessSignal(signal)
    local name = signal:GetName()
    local data = signal:GetBody()
end
function AnniversaryChooseCardMediator:Initial(key)
    self.super.Initial(self, key)
    ---@type AnniversaryMainView
    local viewComponent = require('Game.views.ChooseLobbyPeopleView').new({ cb  = function()
                            app:UnRegsitMediator(NAME)
    end })
    self:SetViewComponent(viewComponent)
    viewComponent:setPosition(display.center)
    app.uiMgr:GetCurrentScene():AddDialog(viewComponent)
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    viewData.chooseCardBtn:setTag(BUTTON_CLICK.CHOOSE_CARD)
    display.commonUIParams(viewData.chooseCardBtn ,{cb = handler(self, self.ButtonAction) })
    self.viewData = viewData
    local gridView = viewData.gridView
    gridView:setDataSourceAdapterScriptHandler(handler(self,self.OnDataSourceAction))
    gridView:setCountOfCell(table.nums(self.cards))
    gridView:reloadData()
    for i, v in pairs(viewData.buttons) do
        v:setVisible(false)
    end
    self:CreateSkillLayout()
    self:UpdateUI(self.cards[self.selectIndex])
end

function AnniversaryChooseCardMediator:OnDataSourceAction(cell , index )
    local index  = index +1
    local cardHeadNode = nil 
    local id = checkint(self.cards[index].id)
    xTry(function()
        if not  cell then
            cell = CGridViewCell:new()
            cell:setContentSize(self.viewData.gridView:getSizeOfCell())
            cardHeadNode = require('common.CardHeadNode').new({id = checkint(id)})
            cardHeadNode:setName("cardHeadNode")
            cardHeadNode:setScale(0.73)
            cardHeadNode:setPosition(utils.getLocalCenter(cell))
            cardHeadNode:setOnClickScriptHandler(handler(self,self.HeadCallback))
            cell:addChild(cardHeadNode)
            cardHeadNode:setTag(index)
            local selectImg = display.newImageView(app.anniversaryMgr:GetResPath('ui/common/common_bg_frame_goods_elected.png'),0,0)
            selectImg:setScale(1.2)
            selectImg:setName("selectImg")
            selectImg:setVisible(false)
            selectImg:setPosition(utils.getLocalCenter(cell))
            cell:addChild(selectImg,1)
            cardHeadNode:setOnClickScriptHandler(handler(self,self.HeadCallback))
        else
            cardHeadNode = cell:getChildByName("cardHeadNode")
            local selectImg = cell:getChildByName("selectImg")
            cardHeadNode:RefreshUI({id = checkint(id)})
            cardHeadNode:setTag(index)
            if self.selectIndex == index  then
                selectImg:setVisible(true)
            else
                selectImg:setVisible(false)
            end
        end
    end,__G__TRACKBACK__)
    if cell == nil then
        cell = CGridViewCell:new()
    end
    return cell
end
function AnniversaryChooseCardMediator:HeadCallback(sender)
    PlayAudioByClickNormal()
    local tag = sender:getTag()
    local gridView = self.viewData.gridView
    local preCell =gridView:cellAtIndex(self.selectIndex - 1)
    if preCell and (not tolua.isnull(preCell) ) then
        local selectImg  = preCell:getChildByName("selectImg")
        selectImg:setVisible(false)
    end
    local cell =gridView:cellAtIndex(tag - 1)
    if cell and (not tolua.isnull(cell) ) then
        local selectImg  = cell:getChildByName("selectImg")
        selectImg:setVisible(true)
    end
    self.selectIndex = tag
    self:UpdateUI(self.cards[self.selectIndex])
end
function AnniversaryChooseCardMediator:UpdateUI(data)
    if tolua.isnull(self.viewComponent) then return end
    local clickCardNode = self.viewData.clickCardNode--选中头像
    local nameLabel = self.viewData.nameLabel--名字
    local operaProgressBar = self.viewData.operaProgressBar--新鲜度叶子
    local vigourLabel = self.viewData.vigourLabel--新鲜度数字
    local chooseCardBtn = self.viewData.chooseCardBtn--
    if data then
        local cardId = checkint(data.cardId)
        local breakLevel = checkint(data.breakLevel)
        local level = checkint(data.level)
        local vigour = checkint(data.vigour)
        nameLabel:setString(CommonUtils.GetCardNameById(data.id))
        vigourLabel:setString(vigour)
        local maxVigour = app.restaurantMgr:getCardVigourLimit(data.id)
        local ratio = (vigour / maxVigour) * 100
        operaProgressBar:setValue(ratio)
        if data.id then
            local x , y =  clickCardNode:getPosition()
            clickCardNode:removeFromParent()
            local clickCardNode = require('common.CardHeadNode').new({
                                                                         showActionState = self.showActionState,
                                                                         id = data.id })
            clickCardNode:setScale(0.73)
            clickCardNode:setPosition(cc.p(x , y ))
            self.viewData.clickCardNode = clickCardNode
            self.viewData.cview:addChild(clickCardNode)
            clickCardNode:setName('clickCardNode')
        else
            clickCardNode:RefreshUI({
                                        cardData = {cardId = cardId,level  = level,breakLevel = breakLevel},
                                        showActionState = self.showActionState
                                    })
        end
        if checkint(self.chooseCardId) == checkint(cardId) then
            chooseCardBtn:getLabel():setString(app.anniversaryMgr:GetPoText(__('雇佣')))
        else
            if not self.chooseCardId then
                chooseCardBtn:getLabel():setString(app.anniversaryMgr:GetPoText(__('雇佣')))
            else
                chooseCardBtn:getLabel():setString(app.anniversaryMgr:GetPoText(__('替换')))
            end
        end
        self:UpdateSkillUI(data)
    end

end
function AnniversaryChooseCardMediator:CreateSkillLayout()
    local skillSize = cc.size(358, 130 )
    local skillLayout = display.newLayer(230 ,304,{
        ap = display.CENTER_TOP , size = skillSize
    }  )
    self.viewData.cview:addChild(skillLayout)
    local bgImage = display.newImageView(app.anniversaryMgr:GetResPath('ui/home/lobby/peopleManage/restaurant_recharge_btn_skill_default.png'),skillSize.width/2 , skillSize.height/2 ,{
        scale9 = true , size = skillSize
    } )
    skillLayout:addChild(bgImage)
    local skillName = display.newLabel(78,skillSize.height - 25,
                                       {text = '名字', fontSize = 22, color = 'b1613a', ap = cc.p(0, 0.5)})--2b2017
    skillLayout:addChild(skillName)
    skillName:setName("skillName")
    local skillDecrLabel = display.newLabel(78 ,skillSize.height - 50,
                                         { text = '等级：1', fontSize = 22, color = '5c5c5c', ap = cc.p(0, 1)})--2b2017
    skillLayout:addChild(skillDecrLabel)
    skillDecrLabel:setName("skillDecrLabel")

    local skillBgImage = display.newImageView(app.anniversaryMgr:GetResPath('ui/cards/skillNew/card_skill_bg_skill.png') ,10, skillSize.height * 0.5 ,{ap = display.LEFT_CENTER} )
    skillLayout:addChild(skillBgImage,1)
    skillBgImage:setScale(0.5)

    local skillImage = display.newImageView(app.anniversaryMgr:GetResPath(CommonUtils.GetSkillIconPath(9999)) ,13, skillSize.height * 0.5,{ap =display.LEFT_CENTER} )
    skillLayout:addChild(skillImage,2)
    skillImage:setScale(0.35)
    skillImage:setName("skillImage")
    self.viewData.skillLayout = skillLayout
end
function AnniversaryChooseCardMediator:UpdateSkillUI(data )
    local viewData = self.viewData
    local parserConfig = anniversaryManager:GetConfigParse()
    local assistantConfig =anniversaryManager:GetConfigDataByName(parserConfig.TYPE.ASSISTANT)
    local assistantOneConfig = assistantConfig[tostring(data.cardId)]
    for i,v in ipairs(viewData.buttons) do
        v:setVisible(false)
    end
    if assistantOneConfig then
        local assistantBuffTypeConfig =anniversaryManager:GetConfigDataByName(parserConfig.TYPE.ASSISTANT_BUFF_TYPE)
        local assistantSkillConfig =anniversaryManager:GetConfigDataByName(parserConfig.TYPE.ASSISTANT_SKILL)
        local viewData = self.viewData
        local skillLayout = self.viewData.skillLayout
        if checkint(assistantOneConfig.skillId) > 0  then
            skillLayout:setVisible(true)
            local skillName = skillLayout:getChildByName("skillName")
            local skillImage = skillLayout:getChildByName("skillImage")
            local skillDecrLabel = skillLayout:getChildByName("skillDecrLabel")
            viewData.dialogue_tips:setVisible(false)
            local buffType = assistantSkillConfig[tostring(assistantOneConfig.skillId)].type
            local assistatnsBuffTypeOneConfig = assistantBuffTypeConfig[tostring(buffType)]
            local  name = assistatnsBuffTypeOneConfig.name
            skillImage:setTexture(app.anniversaryMgr:GetResPath( string.format('ui/anniversary/skill/anni_skill_icon_%d', checkint(assistantOneConfig.skillId))))
            local descr =  anniversaryManager:GetAssistantSkillDescrBySkillId(assistantOneConfig.skillId)
            display.commonLabelParams(skillName ,{text = name })
            display.commonLabelParams(skillDecrLabel , { text = descr ,w = 250  })
         else
            viewData.dialogue_tips:setVisible(true)
            skillLayout:setVisible(false)
        end
    else

        local viewData = self.viewData
        local skillLayout = viewData.skillLayout
        viewData.dialogue_tips:setVisible(true)
        skillLayout:setVisible(false)
    end
end
function AnniversaryChooseCardMediator:ButtonAction(sender)
    local tag = sender:getTag()
    if tag == BUTTON_CLICK.CHOOSE_CARD then
        local selectCardData = self.cards[self.selectIndex] or {}
        if selectCardData.cardId and   checkint(self.chooseCardId)  == checkint(selectCardData.cardId) then
            app:DispatchObservers(ANNIVERSARY_CHOOSE_CARD_EVENT , {cardId = selectCardData.cardId})
            app:UnRegsitMediator(NAME)
        else
            app:DispatchObservers(ANNIVERSARY_CHOOSE_CARD_EVENT , {cardId = selectCardData.cardId})
            app:UnRegsitMediator(NAME)
        end
    end
end
function AnniversaryChooseCardMediator:OnRegist()

end
function AnniversaryChooseCardMediator:OnUnRegist()
    local viewComponent = self:GetViewComponent()
    if viewComponent and (not tolua.isnull(viewComponent)) then
        viewComponent:stopAllActions()
        viewComponent:runAction(cc.RemoveSelf:create())
    end
end

return AnniversaryChooseCardMediator
