---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/8/7 4:31 PM
---
local Mediator = mvc.Mediator
---@class FishingRewardMediator :Mediator
local FishingRewardMediator = class("FishingRewardMediator", Mediator)
---@type UIManager
local uiMgr = AppFacade.GetInstance():GetManager("UIManager")
local NAME = "FishingRewardMediator"
local BTN_TAG = {
    CLOSE_TAG = 11001,
    REWARD_TAG = 11002
}
function FishingRewardMediator:ctor( params, viewComponent )
    self.super:ctor(NAME,viewComponent)
    self.isAction = true
    self.datas = params or {}
end

function FishingRewardMediator:InterestSignals()
    local signals = {
        POST.FISHPLACE_DRAW_FISHINGR_EWARDS.sglName  ,  -- 领取奖励
        POST.FISHPLACE_QUERY_FISHINGR_EWARDS.sglName  , -- 查询奖励
    }
    return signals
end

function FishingRewardMediator:ProcessSignal( signal )
    local name = signal:GetName()
    local body = checktable(signal:GetBody())
    if name == POST.FISHPLACE_DRAW_FISHINGR_EWARDS.sglName then
        app.fishingMgr:SetQueryFishRewardsTime(0)
        app.fishingMgr:SetQueryFishRewards({})
        local viewComponent = self:GetViewComponent()
        if viewComponent then
            local viewData = viewComponent.viewData
            local rewardBtn = viewData.rewardBtn
            rewardBtn:setVisible(false)
            self:GetFacade():UnRegsitMediator(NAME)
        end
    elseif name == POST.FISHPLACE_QUERY_FISHINGR_EWARDS.sglName then
        local rewards = body.rewards  or {}
        for i =#rewards , 1, -1 do
            if rewards[i].num and checkint( rewards[i].num) ==0  then
                table.remove(rewards , i)
            end
        end
        app.fishingMgr:SetQueryFishRewardsTime(getServerTime())
        app.fishingMgr:SetQueryFishRewards(rewards)
        local viewComponent = self:GetViewComponent()
        if viewComponent then
            self:ShowRewardLayers(rewards)
        end
    end
end

function FishingRewardMediator:ShowRewardLayers(rewards)
    local baseReward = {}
    local otherReward = {}
    local goodsId = nil
    for i, v in pairs(rewards) do
        goodsId = checkint(v.goodsId)
        if  goodsId  == WATER_CRYSTALLIZATION_ID or goodsId == WIND_CRYSTALLIZATION_ID
                or goodsId == RAY_CRYSTALLIZATION_ID or goodsId == FISH_POPULARITY_ID  then
            baseReward[#baseReward+1] = v
        else
            otherReward[#otherReward+1] = v
        end
    end
    if table.nums(rewards) > 0  then
        self:GetViewComponent():CreateRewardLayer(baseReward)
        if table.nums(otherReward) > 0 then
            self:GetViewComponent():CreateOtherRewardLayer(otherReward)
        end
    else
        self:ShowNotRewardsLayer()
    end
end

function FishingRewardMediator:Initial( key )
    self.super.Initial(self,key)
    ---@type FishingRewardView
    local viewComponent = require("Game.views.fishing.FishingRewardView").new()
    self:SetViewComponent(viewComponent)
    uiMgr:GetCurrentScene():AddDialog(viewComponent)
    viewComponent:setPosition(display.center)
    local viewData = viewComponent.viewData
    local rewardBtn = viewData.rewardBtn
    rewardBtn:setTag(BTN_TAG.REWARD_TAG)
    display.commonUIParams(rewardBtn , {cb =  handler(self, self.ButtonAction)})
    local closeLayer = viewData.closeLayer
    closeLayer:setTag(BTN_TAG.CLOSE_TAG)
    display.commonUIParams(closeLayer , {cb =  handler(self, self.ButtonAction) , animate = false})
    self:OnEnterAction()
end
function FishingRewardMediator:ButtonAction(sender)
    if self.isAction then
        return
    end
    local tag = sender:getTag()
    if tag == BTN_TAG.CLOSE_TAG then
        sender:setEnabled(false)
        self:OnExitAction()
    elseif tag == BTN_TAG.REWARD_TAG  then
        self:SendSignal(POST.FISHPLACE_DRAW_FISHINGR_EWARDS.cmdName , {})
        sender:setEnabled(false)
    end
end
--[[
　　---@Description: 当没有奖励的时候奖励界面的情况
　　---@param :
　  ---@return :
　　---@author : xingweihao
　　---@date : 2018/8/24 2:58 PM
--]]
function FishingRewardMediator:ShowNotRewardsLayer()
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    local rewardBtn = viewData.rewardBtn
    rewardBtn:setVisible(false)
end
function FishingRewardMediator:EnterLayer()
    self:SendSignal(POST.FISHPLACE_QUERY_FISHINGR_EWARDS.cmdName , {})
end
function FishingRewardMediator:OnEnterAction()
    self.isAction = true 
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    viewData.closeLayer:setOpacity(0)
    viewData.bgLayout:setScaleY(0)

    local actionTime = 0.15
    viewComponent:runAction(cc.Sequence:create({
        cc.Spawn:create({
            cc.TargetedAction:create(viewData.blackLayer, cc.FadeTo:create(actionTime, 150)),
            cc.TargetedAction:create(viewData.bgLayout, cc.ScaleTo:create(actionTime, 1))
        }),
        cc.CallFunc:create(function()
            self.isAction = false
        end)
    }))
end
function FishingRewardMediator:OnExitAction()

    self.isAction = true
    local viewComponent = self:GetViewComponent()
    local viewData = viewComponent.viewData
    viewData.closeLayer:setOpacity(150)
    viewData.bgLayout:setScale(1)
    local actionTime = 0.1
    viewComponent:stopAllActions()
    viewComponent:runAction(cc.Sequence:create({
        cc.Spawn:create({
            cc.TargetedAction:create(viewData.blackLayer, cc.FadeTo:create(actionTime, 0)),
            cc.TargetedAction:create(viewData.bgLayout, cc.ScaleTo:create(actionTime, 1, 0))
        }), cc.DelayTime:create(0.2) ,
        cc.CallFunc:create(function()
            self:GetFacade():UnRegsitMediator(NAME)
        end)
    }))
end
function FishingRewardMediator:OnRegist(  )
    regPost(POST.FISHPLACE_DRAW_FISHINGR_EWARDS)
    regPost(POST.FISHPLACE_QUERY_FISHINGR_EWARDS)
    self:EnterLayer()
end


function FishingRewardMediator:OnUnRegist(  )
    unregPost(POST.FISHPLACE_DRAW_FISHINGR_EWARDS)
    unregPost(POST.FISHPLACE_QUERY_FISHINGR_EWARDS)
    local viewComponent = self:GetViewComponent()
    self:SetViewComponent(nil)
    if viewComponent and (not tolua.isnull(viewComponent)) then
        viewComponent:stopAllActions()
        viewComponent:runAction(cc.RemoveSelf:create())
    end
end

return FishingRewardMediator
