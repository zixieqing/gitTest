---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2020/6/10 2:28 PM
---
local GameScene = require( "Frame.GameScene" )
---@class PopMainScene
local PopMainScene = class("PopMainScene", GameScene)
local GoodPurchaseNode = require('common.GoodPurchaseNode')

local RES_DICT={
	POP_FARM_ICON_BG                         = _res("ui/link/popMain/pop_farm_icon_bg.png"),
	POP_FARM_ICON_COOKING                    = _res("ui/link/popMain/pop_farm_icon_cooking.png"),
	POP_FARM_ICON_RECORD                     = _res("ui/link/popMain/pop_farm_icon_record.png"),
	POP_FARM_ICON_BUY                        = _res("ui/link/popMain/pop_farm_icon_buy.png"),
	POP_FARM_TITLE_BG                        = _res("ui/link/popMain/pop_farm_title_bg.png"),
	POP_FARM_ICON_PRIMARY                    = _res("ui/link/popMain/pop_farm_icon_primary.png"),
	POP_FARM_ICON_INTERMEDIATE               = _res("ui/link/popMain/pop_farm_icon_intermediate.png"),
	POP_FARM_ICON_HIGH                       = _res("ui/link/popMain/pop_farm_icon_high.png"),
	POP_FARM_BTN_REAPED_BG1                  = _res("ui/link/popMain/pop_farm_btn_reaped_bg1.png"),
	POP_FARM_ICON_REAPED                     = _res("ui/link/popMain/pop_farm_icon_reaped.png"),
	POP_FARM_BTN_REAPED_BG                   = _res("ui/link/popMain/pop_farm_btn_reaped_bg.png"),
	POP_FARM_BTN_PLOT_UP_1                   = _res("ui/link/popMain/pop_farm_btn_plot_up_1.png"),
	POP_FARM_BTN_PLOT_PIPI                   = _res("ui/link/popMain/pop_farm_btn_plot_pipi.png"),
	COMMON_BTN_SWITCH                        = _res("ui/common/common_btn_switch.png"),
	COMMON_BTN_BACK                          = _res("ui/common/common_btn_back.png"),
	COMMON_BTN_ORANGE                        = _res("ui/home/activity/common_btn_orange.png"),
	POP_FARM_BTN_PLOT_DOWN_1                 = _res("ui/link/popMain/pop_farm_btn_plot_down_1.png"),
	POP_FARM_BTN_PLOT_POP                    = _res("ui/link/popMain/pop_farm_btn_plot_pop.png"),
	POP_FARM_BTN_PLOT_UP_2                   = _res("ui/link/popMain/pop_farm_btn_plot_up_2.png"),
	POP_FARM_BTN_PLOT_PIPI_2                 = _res("ui/link/popMain/pop_farm_btn_plot_pipi_2.png"),
	POP_FARM_ICON_FIGHT                      = _res("ui/link/popMain/pop_farm_icon_fight.png"),
	COMMON_BTN_BIG_ORANGE                    = _res("ui/common/common_btn_big_orange.png"),
	POP_FARM_BTN_PLOT_DOWN_2                 = _res("ui/link/popMain/pop_farm_btn_plot_down_2.png"),
	COMMON_BG_TIPS                           = _res("ui/link/popMain/common_bg_tips.png"),
	POP_FARM_BTN_PLOT_POP_2                  = _res("ui/link/popMain/pop_farm_btn_plot_pop_2.png"),
	POP_FARM_LAND_BG                         = _res("ui/link/popMain/pop_farm_land_bg.png"),
	POP_BG_1                                 = _res("ui/link/popMain/pop_bg_1.jpg"),
	POP_BG                                   = _res("ui/link/popMain/pop_bg.jpg"),
	COMMON_BTN_ORANGE_DISABLE                = _res('ui/common/common_btn_orange_disable.png'),
	COMMON_TITLE                             = _res('ui/common/common_title.png'),
	COMMON_BTN_TIPS                          = _res('ui/common/common_btn_tips.png'),
	COMMON_BG_8                              = _res('ui/common/common_bg_8.png'),
	COMMON_ICO_LOCK                          = _res('ui/common/common_ico_lock.png'),
	COMMON_HINT_CIRCLE_RED_ICO               = _res('ui/common/common_hint_circle_red_ico.png'),
	POP_FARM_ICON_LAND                       = _spn("ui/link/popMain/animation/pop_farm_icon_land"),
	GARDEN_MAIN_BTN_EGG                      = _spn("ui/link/popMain/animation/garden_main_btn_egg"),
	POP_COME_1                               = _spn("ui/link/popMain/animation/pop_come_1"),
	POP_COME_2                               = _spn("ui/link/popMain/animation/pop_come_2"),
	POP_FARM_GUIDE_1                         = _spn("ui/link/popMain/animation/pop_farm_guide_1"),
	POP_FARM_GUIDE_2                         = _spn("ui/link/popMain/animation/pop_farm_guide_2"),
	POP_FARM_GUIDE_3                         = _spn("ui/link/popMain/animation/pop_farm_guide_3"),
}
local POP_MAIN_EVENT = {
	POP_EVENT                  = "POP_EVENT",              -- 左侧弹出框弹出
	IN_COME_EVENT              = "IN_COME_EVENT",          -- 左侧弹出框收入
	PART_ONE_EVENT             = "PART_ONE_EVENT",         -- 上篇事件
	PART_TWO_EVENT             = "PART_TWO_EVENT",         -- 下篇事件
	UNLOCK_VEGETABLE_EVENT     = "UNLOCK_VEGETABLE_EVENT", -- 开荒事件
	POP_REWARD_RECORD_EVENT    = "POP_REWARD_RECORD_EVENT",
	POP_SOW_SEED_EVENT         = "POP_SOW_SEED_EVENT",
	POP_ONE_KEY_REWARD_EVENT   = "POP_ONE_KEY_REWARD_EVENT",
	POP_BUY_SEED_EVENT         = "POP_BUY_SEED_EVENT",
	POP_SHOW_BATTLE_BOSS_EVENT = "POP_SHOW_BATTLE_BOSS_EVENT",
	POP_RECIPE_EVENT           = "POP_RECIPE_EVENT",
}

local FARM_STATUS = {
	LOCK_ZONE             = 1, -- 区域未解锁
	UNLOCK_FIRST_ZONE     = 2, -- 解锁第一区域
	UNLOCK_FIRST_LAND     = 3, -- 解锁第一区域
	CLEAR_FIRST_ZONE      = 4, -- 通关上篇区域
	UNLOCK_SECOND_ZONE    = 5, -- 解锁第二区域
	CLEAR_SECOND_ZONE     = 6, -- 通关下篇区域
}

function PopMainScene:ctor(param)
	local data = param or {}
	self.lockStatus = data.lockStatus
	self.summaryId = data.summaryId
	self.zoneArray = data.zoneArray
	self.isClearance = data.isClearance
	self.landsMature = {
		["1"] = false,
		["2"] = false,
		["3"] = false,
		["4"] = false,
		["5"] = false,
		["6"] = false,
	}
	self:InitUI()
end
--[[
init ui
--]]
function PopMainScene:InitUI()
	self:CreateBottomLayer()
	if self.lockStatus == FARM_STATUS.LOCK_ZONE then
		self:CreateLockZoneVegeTableLayout()
	elseif self.lockStatus == FARM_STATUS.UNLOCK_FIRST_ZONE then
		self:CreateVegeTableLayout()
	elseif self.lockStatus >=  FARM_STATUS.CLEAR_FIRST_ZONE
	or self.lockStatus == FARM_STATUS.UNLOCK_FIRST_LAND then
		self:CreateVegeTableLayout()
		self:CreateTopLayer()
	end
	self:CreateIncomeLayout()
end

function PopMainScene:CreateBottomLayer()
	local bottomLayer  = display.newLayer(display.cx, display.cy ,{ap = display.CENTER,size = display.size})
	self:addChild(bottomLayer,1)
	local swallowLayer = display.newLayer(display.cx, display.cy ,{ap = display.CENTER,size = display.size , color = cc.c4b(0,0,0,255)})
	bottomLayer:addChild(swallowLayer,0)
	local bgImagePath = self:GetBgImage()
	local bgImage = display.newImageView( bgImagePath,display.cx + 0, display.cy  + 0,{ap = display.CENTER})
	bottomLayer:addChild(bgImage,0)

	local backBtn = display.newImageView(RES_DICT.COMMON_BTN_BACK, display.SAFE_L + 56, display.height + -55,
	                             { ap = display.CENTER, tag = 210, enable = true})
	backBtn:setScale(1, 1)
	backBtn:setPosition(display.SAFE_L + 56, display.height + -55)
	bottomLayer:addChild(backBtn)

	local tabNameLabel = display.newButton(97, 744, { ap = display.LEFT_TOP ,  n = RES_DICT.COMMON_TITLE, d = RES_DICT.COMMON_TITLE, s = RES_DICT.COMMON_TITLE, scale9 = true, size = cc.size(303, 78) })
	display.commonLabelParams(tabNameLabel, {text = "" , fontSize = 14, color = '#414146'})
	tabNameLabel:setPosition(display.SAFE_L + 130, display.size.height)
	self:addChild(tabNameLabel ,101)
	display.commonUIParams(tabNameLabel , { cb = function()
       app.uiMgr:ShowIntroPopup({moduleId = -65})
	end})

	local moduleName = display.newLabel(138, 30,
	                                    fontWithColor('14' , { outline = false ,  ap = display.CENTER, color = '#5b3c25', text =  "", fontSize = 30, tag = 71 }))
	tabNameLabel:addChild(moduleName)

	local tipButton = display.newNSprite(RES_DICT.COMMON_BTN_TIPS, 257, 30,
	                                     { ap = display.CENTER, tag = 72 })
	tipButton:setScale(1, 1)
	tabNameLabel:addChild(tipButton)
	local tabNameLabelPos = cc.p(tabNameLabel:getPosition())
	tabNameLabel:setPositionY(display.height + 100)
	local action = cc.EaseBounceOut:create(cc.MoveTo:create(1, tabNameLabelPos))
	tabNameLabel:runAction( action )

	self.bottomData = {
		bottomLayer  = bottomLayer,
		bgImage      = bgImage,
		moduleName      = moduleName,
		backBtn      = backBtn,
		swallowLayer = swallowLayer,
	}
end

function PopMainScene:CreateTopLayer()
	local topLayer = display.newLayer(display.cx, display.cy , {ap = display.CENTER , size = display.size})
	self:addChild(topLayer , 10 )
	local topRightLayout = display.newLayer(display.SAFE_R + -2.5, display.cy+ 154 ,{ap = display.RIGHT_CENTER,size = cc.size(115,338)})
	topLayer:addChild(topRightLayout,0)
	local topBgImage = display.newImageView( RES_DICT.POP_FARM_ICON_BG ,57.5, 169,{ap = display.CENTER})
	topRightLayout:addChild(topBgImage,0)
	local cookBtn = display.newButton(49.5, 174 , {n = RES_DICT.POP_FARM_ICON_COOKING,ap = display.CENTER,scale9 = true,size = cc.size(100,100)})
	topRightLayout:addChild(cookBtn,0)
	display.commonLabelParams(cookBtn ,fontWithColor(14 , {fontSize = 24,text = __('料理'),color = '#ffffff',offset = cc.p(0 , -50),safeW = 60}))
	display.commonUIParams(cookBtn , {cb = function()
      app:DispatchObservers(POP_MAIN_EVENT.POP_RECIPE_EVENT , {})
	end})
	local recordBtn = display.newButton(52.5, 67 , {n = RES_DICT.POP_FARM_ICON_RECORD,ap = display.CENTER,scale9 = true,size = cc.size(100,100)})
	topRightLayout:addChild(recordBtn,0)
	display.commonLabelParams(recordBtn ,fontWithColor(14 , {fontSize = 24,text = __('收获记录'),color = '#ffffff',offset = cc.p(0 , -50),safeW = 60}))
	display.commonUIParams(recordBtn, {cb = function()
        app:DispatchObservers(POP_MAIN_EVENT.POP_REWARD_RECORD_EVENT , {} )
	end })

	local buySeedBtn = display.newButton(52.5, 291 , {n = RES_DICT.POP_FARM_ICON_BUY,ap = display.CENTER,scale9 = true,size = cc.size(100,100)})
	topRightLayout:addChild(buySeedBtn,0)
	display.commonLabelParams(buySeedBtn ,fontWithColor(14 , {fontSize = 24,text = __('购买种子'),color = '#ffffff',offset = cc.p(0 , -50),safeW = 60}))
	display.commonUIParams(buySeedBtn, {cb = function()
        app:DispatchObservers(POP_MAIN_EVENT.POP_BUY_SEED_EVENT , {})
	end })

	local bossBtnSize = cc.size(130,130)
	local bossBtn = display.newLayer(display.SAFE_R - 120 , display.height -50 , {
		color = cc.c4b(0,0,0,0),
		ap = display.RIGHT_TOP ,
		enable = true ,
		size = bossBtnSize 
	} )
	topLayer:addChild(bossBtn)
	local redIconPopLink = display.newImageView( RES_DICT.COMMON_HINT_CIRCLE_RED_ICO , 120, 120)
	bossBtn:addChild(redIconPopLink,20)
	redIconPopLink:setVisible(false)
	local bossImage = FilteredSpriteWithOne:create(RES_DICT.POP_FARM_ICON_FIGHT)
	bossImage:setPosition(bossBtnSize.width/2 , bossBtnSize.height)
	bossImage:setAnchorPoint(display.CENTER_TOP)
	bossBtn:addChild(bossImage)


	if self.isClearance then
		local activity = app.activityMgr:GetActivityDataByType(ACTIVITY_TYPE.LINK_POP_ACTIVITY)
		if table.nums(activity) > 0 and  checkint(activity[1].tip) > 0 then
			redIconPopLink:setVisible(true)
		end
	else
		redIconPopLink:setVisible(false)
		bossImage:setFilter(GrayFilter:create())
	end

	display.commonUIParams(bossBtn , { cb = function()
		app:DispatchObservers(POP_MAIN_EVENT.POP_SHOW_BATTLE_BOSS_EVENT , {})
	end})

	local bossLabel = display.newLabel(bossBtnSize.width/2 , 30 ,fontWithColor(14, {text = __('BOSS副本')}) )
	bossBtn:addChild(bossLabel)


	local bottomLayout = display.newLayer(display.cx + 0, 0 ,{ap = display.CENTER_BOTTOM,size = cc.size(display.width,339)})
	self:addChild(bottomLayout,10)
	local bottomBgImage = display.newImageView( RES_DICT.POP_FARM_TITLE_BG ,667, 169.5,{ap = display.CENTER})
	bottomLayout:addChild(bottomBgImage,0)
	local primayBtn = display.newButton(939, 132.5 , {
		n = RES_DICT.POP_FARM_ICON_PRIMARY,
		color = '#b1633a', fontSize = 20 ,
		ap = display.CENTER,scale9 = true,
		size = cc.size(118,118)
	})
	display.commonUIParams(primayBtn , { cb = function()
         app:DispatchObservers(POP_MAIN_EVENT.POP_SOW_SEED_EVENT ,{seedId = 1})
	end})

	display.commonLabelParams(primayBtn , {	text = __('初级\n种子') , fontSize = 20,	color = '#000000',offset = cc.p(0 , -20),hAlign = display.TAC})
	bottomLayout:addChild(primayBtn,0)

	local middleBtn = display.newButton(1070, 132.5 , {n = RES_DICT.POP_FARM_ICON_INTERMEDIATE,ap = display.CENTER,scale9 = true,size = cc.size(118,118)})
	bottomLayout:addChild(middleBtn,0)
	display.commonUIParams(middleBtn , { cb = function()
		app:DispatchObservers(POP_MAIN_EVENT.POP_SOW_SEED_EVENT ,{seedId = 2})
	end})
	display.commonLabelParams(middleBtn ,{ fontSize = 20 , text = __('中级\n种子'),hAlign = display.TAC ,  color = '#000000', offset = cc.p(0 , -20)})
	local highBtn = display.newButton(1203, 132.5 , {n = RES_DICT.POP_FARM_ICON_HIGH,ap = display.CENTER,scale9 = true,size = cc.size(118,118)})
	bottomLayout:addChild(highBtn,0)
	display.commonUIParams(highBtn , { cb = function()
		app:DispatchObservers(POP_MAIN_EVENT.POP_SOW_SEED_EVENT ,{seedId = 3})
	end})
	display.commonLabelParams(highBtn ,{fontSize = 20,text = __('高级\n种子'),color = '#b1633a',offset = cc.p(0 , -20),  color = '#000000',hAlign = display.TAC})
	local oneImage = display.newImageView( RES_DICT.POP_FARM_BTN_REAPED_BG1 ,939, 41.5,{ap = display.CENTER})
	bottomLayout:addChild(oneImage,10)
	local twoImage = display.newImageView( RES_DICT.POP_FARM_BTN_REAPED_BG1 ,1069, 41.5,{ap = display.CENTER})
	bottomLayout:addChild(twoImage,10)
	local threeImage  = display.newImageView( RES_DICT.POP_FARM_BTN_REAPED_BG1 ,1200, 41.5,{ap = display.CENTER})
	bottomLayout:addChild(threeImage ,10)
	local oneLabel = display.newLabel(941, 39.5 ,fontWithColor(14 , {text = '',ap = display.CENTER}))
	bottomLayout:addChild(oneLabel,11)
	local twoLabel = display.newLabel(1073, 39.5 ,fontWithColor(14 , {text = '',ap = display.CENTER}))
	bottomLayout:addChild(twoLabel,11)
	local threeLabel = display.newLabel(1205, 40.5 ,fontWithColor(14 , {text = '',ap = display.CENTER}))
	bottomLayout:addChild(threeLabel,11)
	local leftBottomLayout = display.newLayer(149, 30.5 , {
		enable = true ,
		color = cc.c4b(0,0,0,0),
		ap = display.CENTER_BOTTOM,
		size = cc.size(198, 175),
		cb = function()
			local isMature = false
			for landId , mature in pairs(self.landsMature) do
				if mature then
					isMature =  true
					break 
				end
			end
			if not isMature then
				app.uiMgr:ShowInformationTips(__('没有成熟的菜地'))
				return
			end
			app:DispatchObservers(POP_MAIN_EVENT.POP_ONE_KEY_REWARD_EVENT , {})
		end
	})
	bottomLayout:addChild(leftBottomLayout , 0)
	local leftBottomSpine = sp.SkeletonAnimation:create(RES_DICT.GARDEN_MAIN_BTN_EGG.json , RES_DICT.GARDEN_MAIN_BTN_EGG.atlas , 1)
	leftBottomSpine:setToSetupPose()
	leftBottomSpine:setPosition(100, 50)
	leftBottomLayout:addChild(leftBottomSpine , 10 )
	local leftBottomBtn = display.newButton(88, 5.5 , {n = RES_DICT.POP_FARM_BTN_REAPED_BG,ap = display.CENTER,scale9 = true,size = cc.size(239,60)})
	leftBottomLayout:addChild(leftBottomBtn, 20)
	display.commonLabelParams(leftBottomBtn ,fontWithColor(14 , {fontSize = 26,text = __('一键收获'),color = '#ffffff',paddingW  = 20,safeW = 199}))
	self.viewTopData = {
		topLayer                  = topLayer ,
		topRightLayout            = topRightLayout,
		topBgImage                = topBgImage,
		cookBtn                   = cookBtn,
		recordBtn                 = recordBtn,
		buySeedBtn                = buySeedBtn,
		bottomLayout              = bottomLayout,
		bottomBgImage             = bottomBgImage,
		primayBtn                 = primayBtn,
		middleBtn                 = middleBtn,
		highBtn                   = highBtn,
		oneImage                  = oneImage,
		twoImage                  = twoImage,
		threeImage                = threeImage ,
		oneLabel                  = oneLabel,
		twoLabel                  = twoLabel,
		threeLabel                = threeLabel,
		leftBottomLayout          = leftBottomLayout,
		leftBottomSpine           = leftBottomSpine,
		redIconPopLink            = redIconPopLink,
		bossBtn                   = bossBtn,
		leftBottomBtn             = leftBottomBtn
	}
end

function PopMainScene:AddMenusGoodLayout(iconData)
	local iconData = iconData
	local cellSize = cc.size(190,40)
	local len = #iconData
	local  topSize = cc.size(cellSize.width * len + 20 ,cellSize.height)
	local menusLayout = display.newLayer( display.SAFE_R,display.height, { ap = display.RIGHT_TOP , size =  topSize})
	self:addChild(menusLayout,20)
	local imageImage = display.newImageView(_res('ui/home/nmain/main_bg_money.png'),topSize.width/2,topSize.height/2,{enable = false, scale9 = true, size = cc.size(topSize.width + 60, 54)})
	menusLayout:addChild(imageImage)
	---@type table <string , GoodPurchaseNode>
	local purchaseNodes = {}
	for k ,v  in pairs(iconData) do
		local purchaseNode = GoodPurchaseNode.new({id = v , isEnableGain = true , animate = true   })
		purchaseNode:RefershUI(v)
		purchaseNode:setPosition(cc.p(cellSize.width * (k -0.5) , cellSize.height/2 ))
		menusLayout:addChild(purchaseNode,10)
		purchaseNode.viewData.touchBg:setTag(checkint(v))
		purchaseNodes[tostring(v)] = purchaseNode
	end
	self.menuGoodsData = {
		menusLayout = menusLayout ,
		purchaseNodes = purchaseNodes
	}
end


function PopMainScene:CreatePopupLayout()
	local farmZoneConf = CONF.ACTIVITY_POP.FARM_ZONE:GetValue(self.summaryId)
	local topText = farmZoneConf[self.zoneArray[1]].name
	local bottomText = farmZoneConf[self.zoneArray[2]].name
	local popUpLayout = display.newLayer(display.SAFE_L + -4.799927, display.cy + 40 ,{ap = display.LEFT_CENTER,size = cc.size(617,348)})
	self:addChild(popUpLayout,8)
	local popUpSwallowLayout  = display.newLayer(308.5, 174 ,{ap = display.CENTER,size = cc.size(617,348),color = cc.c4b(0,0,0,0),enable = true})
	popUpLayout:addChild(popUpSwallowLayout ,0)
	local topImage = display.newImageView( RES_DICT.POP_FARM_BTN_PLOT_UP_2 ,308.5, 260,{ap = display.CENTER})
	popUpLayout:addChild(topImage,0)
	local topfilteredSprite = FilteredSpriteWithOne:create(RES_DICT.POP_FARM_BTN_PLOT_PIPI_2)
	popUpLayout:addChild(topfilteredSprite,0)
	topfilteredSprite:setPosition(272.5 , 260)
	local lockBackBtn = display.newButton(580.5, 311 , {n = RES_DICT.COMMON_BTN_SWITCH,ap = display.CENTER,scale9 = true,size = cc.size(88,88)})
	popUpLayout:addChild(lockBackBtn,0)
	lockBackBtn:setScaleX(-1)
	display.commonUIParams(lockBackBtn , {cb = function(sender)
		sender:setEnabled(false)
		app:DispatchObservers(POP_MAIN_EVENT.IN_COME_EVENT , {})
	end})
	display.commonLabelParams(lockBackBtn ,{fontSize = 20,text = '',color = '#ffffff',paddingW  = 20,safeW = 48})
	local topGoBtn = display.newButton(329.5, 231 , {n = RES_DICT.COMMON_BTN_BIG_ORANGE,ap = display.CENTER,scale9 = true,size = cc.size(148,71)})
	popUpLayout:addChild(topGoBtn,0)
	display.commonUIParams(topGoBtn , {cb = function(sender)
		app:DispatchObservers(POP_MAIN_EVENT.PART_ONE_EVENT , {})
	end})


	local popTopSpine = sp.SkeletonAnimation:create(RES_DICT.POP_FARM_GUIDE_2.json , RES_DICT.POP_FARM_GUIDE_2.atlas , 1)
	popTopSpine:setAnimation(0 , "idle" , true)
	popTopSpine:setPosition(329.5, 231)
	popUpLayout:addChild(popTopSpine,0)
	popTopSpine:setVisible(false)


	local topText = display.newLabel(329.5, 297 , {fontSize = 24,ttf = true,font = TTF_GAME_FONT,text = topText ,color = '#78564b',ap = display.CENTER})
	popUpLayout:addChild(topText,0)
	local bottomImage = display.newImageView( RES_DICT.POP_FARM_BTN_PLOT_DOWN_2 ,259.5, 81,{ap = display.CENTER})
	popUpLayout:addChild(bottomImage,0)
	local bottomfilteredSprite = FilteredSpriteWithOne:create(RES_DICT.POP_FARM_BTN_PLOT_POP_2)
	popUpLayout:addChild(bottomfilteredSprite,0)
	bottomfilteredSprite:setPosition(241.5 , 81)
	local bottomGoBtn = display.newButton(199.5, 54 , {n = RES_DICT.COMMON_BTN_BIG_ORANGE,ap = display.CENTER,scale9 = true,size = cc.size(148,71)})
	popUpLayout:addChild(bottomGoBtn,0)
	local popBottomSpine = sp.SkeletonAnimation:create(RES_DICT.POP_FARM_GUIDE_2.json , RES_DICT.POP_FARM_GUIDE_2.atlas , 1)
	popBottomSpine:setAnimation(0 , "idle" , true)
	popBottomSpine:setPosition(199.5, 54)
	popUpLayout:addChild(popBottomSpine,0)
	popBottomSpine:setVisible(false)

	display.commonUIParams(bottomGoBtn , {cb = function(sender)
		app:DispatchObservers(POP_MAIN_EVENT.PART_TWO_EVENT , {})
	end})
	display.commonLabelParams(bottomGoBtn ,{fontSize = 20,text = '',color = '#ffffff',paddingW  = 20,safeW = 108})
	local bottomText = display.newLabel(199.5, 121 , {fontSize = 24,ttf = true,font = TTF_GAME_FONT,text = bottomText,color = '#78564b',ap = display.CENTER})
	popUpLayout:addChild(bottomText,0)
	self.viewPopupData = {
		popUpLayout               = popUpLayout,
		popUpSwallowLayout        = popUpSwallowLayout ,
		topImage                  = topImage,
		topfilteredSprite         = topfilteredSprite,
		lockBackBtn               = lockBackBtn,
		topGoBtn                  = topGoBtn,
		topText                   = topText,
		bottomImage               = bottomImage,
		popBottomSpine            = popBottomSpine,
		popTopSpine               = popTopSpine,
		bottomfilteredSprite      = bottomfilteredSprite,
		bottomGoBtn               = bottomGoBtn,
		bottomText                = bottomText
	}
end


function PopMainScene:CreateIncomeLayout()
	local incomeLayout = display.newLayer(display.SAFE_L + -2.949928, display.cy + 35.20007 ,{ap = display.LEFT_CENTER,size = cc.size(208.3,357.6)})
	self:addChild(incomeLayout,8)
	local incomeSwallowLayout = display.newLayer(104.15, 178.8 ,{ap = display.CENTER,size = cc.size(208.3,357.6),color = cc.c4b(0,0,0,0),enable = true})
	incomeLayout:addChild(incomeSwallowLayout,0)
	local untopImage = display.newImageView( RES_DICT.POP_FARM_BTN_PLOT_UP_1 ,103.15, 269.6,{ap = display.CENTER})
	incomeLayout:addChild(untopImage,0)
	local unTopFilteredSprite = FilteredSpriteWithOne:create(RES_DICT.POP_FARM_BTN_PLOT_PIPI)
	incomeLayout:addChild(unTopFilteredSprite , 0)
	unTopFilteredSprite:setPosition(67.15 , 269.6)
	local unlockBackBtn = display.newButton(173.85, 322.1 , {enable = true  ,  n = RES_DICT.COMMON_BTN_SWITCH,ap = display.CENTER,scale9 = true,size = cc.size(88,88)})
	incomeLayout:addChild(unlockBackBtn,0)

	display.commonUIParams(unlockBackBtn , {cb = function(sender)
		sender:setEnabled(false)
		app:DispatchObservers(POP_MAIN_EVENT.POP_EVENT , {})
	end})

	if self.lockStatus == FARM_STATUS.LOCK_ZONE then
		unlockBackBtn:setOpacity(0)
		local popFarmGuide = sp.SkeletonAnimation:create(RES_DICT.POP_FARM_GUIDE_1.json , RES_DICT.POP_FARM_GUIDE_1.atlas , 1)
		popFarmGuide:setAnimation(0 , "idle" , true)
		popFarmGuide:setPosition(173.85, 322.1)
		incomeLayout:addChild(popFarmGuide , 0 )
	end

	display.commonLabelParams(unlockBackBtn ,{fontSize = 20,text = '',color = '#ffffff',paddingW  = 20,safeW = 48})
	local unBottomImage = display.newImageView( RES_DICT.POP_FARM_BTN_PLOT_DOWN_1 ,82.65, 91.4,{ap = display.CENTER})
	incomeLayout:addChild(unBottomImage,0)
	local unBottomFilteredSprite = FilteredSpriteWithOne:create(RES_DICT.POP_FARM_BTN_PLOT_POP)
	incomeLayout:addChild(unBottomFilteredSprite , 0)
	unBottomFilteredSprite:setPosition(67.15 , 90.7)
	self.viewIncomeData = {
		incomeLayout              = incomeLayout,
		incomeSwallowLayout       = incomeSwallowLayout,
		untopImage                = untopImage,
		unTopFilteredSprite       = unTopFilteredSprite,
		unlockBackBtn             = unlockBackBtn,
		unBottomImage             = unBottomImage,
		unBottomFilteredSprite    = unBottomFilteredSprite
	}
end

function PopMainScene:CreateRightTimeLayout()
	local timeLayout = display.newLayer(display.SAFE_L + 687, display.cy + 155 ,{ap = display.LEFT_CENTER,size = cc.size(300,40)})
	local guideRight = display.newImageView( RES_DICT.POP_FARM_GUIDE_LINE_RIGHT ,79, 17,{ap = display.CENTER})
	timeLayout:addChild(guideRight,0)
	local timeBgImage = display.newImageView( RES_DICT.COMMON_BG_TIPS ,190.9, 17,{ap = display.CENTER,scaleX = 0.85,scaleY = 0.85})
	timeLayout:addChild(timeBgImage,0)
	local timeLabel = display.newLabel(197.5, 20 , {fontSize = 24,ttf = true,font = TTF_GAME_FONT,text = '',color = '#78564b',ap = display.CENTER})
	timeLayout:addChild(timeLabel,0)
	local viewDta = {
		timeLayout = timeLayout ,
		guideRight = guideRight ,
		timeLabel = timeLabel ,
		timeBgImage = timeBgImage ,
	}
	return viewDta
end

function PopMainScene:CreateTwoTime()
	local timeLayout = display.newLayer(display.SAFE_R + -742.4, display.cy+ 51 ,{ap = display.RIGHT_CENTER,size = cc.size(300,40)})
	self:addChild(timeLayout,0)
	local guideLeft = display.newImageView( RES_DICT.POP_FARM_GUIDE_LINE_LEFT ,208.3, 17,{ap = display.CENTER})
	timeLayout:addChild(guideLeft,0)
	local timeBgImage = display.newImageView( RES_DICT.COMMON_BG_TIPS ,101.7, 17.7,{ap = display.CENTER,scaleX = 0.85,scaleY = 0.85})
	timeLayout:addChild(timeBgImage,0)
	local timeLabel = display.newLabel(108.3, 20.70001 , {fontSize = 24,ttf = true,font = TTF_GAME_FONT,text = '',color = '#78564b',ap = display.CENTER})
	timeLayout:addChild(timeLabel,0)
	local viewDta = {
		timeLayout  = timeLayout,
		guideLeft   = guideLeft,
		timeBgImage = timeBgImage,
		timeLabel   = timeLabel,
	}
	return viewDta
end
function PopMainScene:CreateVegeTableLayout()
	local vegeTablePos = require("Game.views.link.popMain.PopVegetablePos")
	local layoutSize = cc.size(817.4,468.6)
	---@type table<string,PopMainVegeTableNode>
	local cells = {}
	local vegeTableLayout = display.newLayer(display.cx + -17, display.cy  + -56.40002  , {
		ap = display.CENTER , size =layoutSize , color = cc.c4b(0,0,0,0)
	})
	vegeTableLayout:setTouchEnabled(true)

	self:addChild(vegeTableLayout , 2 )
	local vegeTableNode = require("Game.views.link.popMain.PopMainVegeTableNode")
	for i = 1 , #vegeTablePos do
		local cell = vegeTableNode.new()
		cell:setTag(i)
		cell:setVisible(false)
		cell:setPosition(vegeTablePos[i].x , vegeTablePos[i].y)
		cell:setAnchorPoint(display.LEFT_BOTTOM)
		vegeTableLayout:addChild(cell)
		cells[tostring(i)]= cell
	end
	vegeTableLayout:setOnTouchBeganScriptHandler(function()
		return 1
	end)
	vegeTableLayout:setOnTouchCancelledScriptHandler(function()
		return false
	end)
	vegeTableLayout:setOnTouchEndedScriptHandler(function(sender, touch)
		self.isAction = false
		if self.isAction  then
			return
		end
		self.isAction = true
		local worldPos = touch:getLocation()
		vegeTableLayout:stopAllActions()
		vegeTableLayout:setTouchEnabled(false)
		vegeTableLayout:runAction(
			cc.Sequence:create(
				cc.DelayTime:create(0.5),
				cc.CallFunc:create(function()
					self.isAction = false
					vegeTableLayout:setTouchEnabled(true)
					for i =1 , 6 do
						cells[tostring(i)]:CheckVegeTableNode(worldPos)
					end
				end)
			)

		)
		return true

	end)
	self.viewVegeData = {
		vegeTableLayout = vegeTableLayout,
		cells = cells
	}
end


function PopMainScene:CreateLockZoneVegeTableLayout()
	local layoutSize = cc.size(817.4,468.6)
	local vegeTableLayout = display.newLayer(display.cx + -17, display.cy  + -56.40002  , {
		ap = display.CENTER , size = layoutSize
	})
	self:addChild(vegeTableLayout , 10)
	local spine = display.newPathSpine(RES_DICT.POP_FARM_ICON_LAND)
	spine:setPosition(layoutSize.width/2 + 50 , layoutSize.height/2+ 76)
	spine:setAnchorPoint(display.CENTER)
	spine:setAnimation(0, "idle" , true )
	vegeTableLayout:addChild(spine)

	local clickBtn = display.newButton(817.4 / 2 + 50 ,468.6 /2 + 80 , {
		ap = display.CENTER , size = cc.size(240, 250),
		enable = true ,color = cc.r4b(), cb = function(sender)
			sender:setEnabled(false)
			self:UnlockVegeTableAnimation()
		end })
	vegeTableLayout:addChild(clickBtn)
	local forestLabel = display.newLabel(0 , 35 , {fontSize = 24 , color = "5b3c25", text =__('点击开荒') })
	spine:addChild(forestLabel)
	self.viewLockVegeTableData = {
		vegeTableLayout = vegeTableLayout,
		spine           = spine,
		forestLabel     = forestLabel,
		clickBtn        = clickBtn
	}
end

function PopMainScene:CreateOneCome()
	local oneComeLayer = display.newLayer(display.cx , display.cy , {ap = display.CENTER , size = display.size })
	self:addChild(oneComeLayer , 5 )
	oneComeLayer:runAction(cc.Sequence:create(
		cc.DelayTime:create(0.3) ,
		cc.CallFunc:create(function()
			local popOneComeSpine = sp.SkeletonAnimation:create(RES_DICT.POP_COME_1.json , RES_DICT.POP_COME_1.atlas , 1)
			popOneComeSpine:setAnimation(0 , "play" , false)
			popOneComeSpine:setPosition(display.center)
			popOneComeSpine:registerSpineEventHandler(function(event)
				if event.animation == 'play' then
					popOneComeSpine:setAnimation(0 , "idle" , true)
				end
			end, sp.EventType.ANIMATION_COMPLETE)
			oneComeLayer:addChild(popOneComeSpine)
		end)
	))
end


function PopMainScene:CreateTwoCome()
	local twoComeLayer = display.newLayer(display.cx , display.cy , { ap = display.CENTER , size = display.size })
	self:addChild(twoComeLayer , 5 )
	twoComeLayer:runAction(cc.Sequence:create(
		cc.DelayTime:create(0.5) ,
		cc.CallFunc:create(function()
			local popTwoComeSpine = sp.SkeletonAnimation:create(RES_DICT.POP_COME_2.json , RES_DICT.POP_COME_2.atlas , 1)
			popTwoComeSpine:setAnimation(0 , "play" , false)
			popTwoComeSpine:setPosition(display.center)
			twoComeLayer:addChild(popTwoComeSpine)
			popTwoComeSpine:registerSpineEventHandler(function(event)
				if event.animation == 'play' then
					popTwoComeSpine:setAnimation(0 , "idle" , true)
				end
			end, sp.EventType.ANIMATION_COMPLETE)
		end)
	))
end
-- 解锁下片剧情
function PopMainScene:UnlockTwoPartPlot(callbck)
	local farmZoneConf = CONF.ACTIVITY_POP.FARM_ZONE:GetValue(self.summaryId)
	local unlock = farmZoneConf["2"].unlock
	local canvas = display.newLayer(display.cx, display.cy ,{ap = display.CENTER,size = display.size})
	app.uiMgr:GetCurrentScene():AddDialog(canvas)
	local closeLayer = display.newLayer(display.cx, display.cy ,{
		ap = display.CENTER,
		size = display.size,
		color = cc.c4b(0,0,0,175),
		enable = true , 
		cb = function()
			canvas:runAction(cc.RemoveSelf:create())
		end
	})
	canvas:addChild(closeLayer,0)
	local centerLayer = display.newLayer(display.cx + 0, display.cy  + 0 ,{ap = display.CENTER,size = cc.size(435,308)})
	canvas:addChild(centerLayer,0)
	local centerSwallowLayer = display.newLayer(217.5, 154 ,{ap = display.CENTER,size = cc.size(435,308),color = cc.c4b(0,0,0,0),enable = true})
	centerLayer:addChild(centerSwallowLayer,0)
	local commonBgImage = display.newImageView( RES_DICT.COMMON_BG_8 ,217.5, 154,{ap = display.CENTER})
	centerLayer:addChild(commonBgImage,0)
	local goodNode = require("common.GoodNode").new({goodsId = farmZoneConf["2"].cardId })
	centerLayer:addChild(goodNode)
	goodNode:setPosition(435/2 ,308/2)
	local matureLabel = display.newLabel(217.5, 238 , {fontSize = 26,ttf = true,font = TTF_GAME_FONT,text = __('花费钻石解锁下篇剧情：'),color = '#b1613a',ap = display.CENTER})
	centerLayer:addChild(matureLabel,0)
	local makeBtn = display.newButton(218.5, 55 , {n = RES_DICT.COMMON_BTN_ORANGE,ap = display.CENTER,scale9 = true,size = cc.size(123,59)})
	centerLayer:addChild(makeBtn,0)
	display.commonLabelParams(makeBtn ,{fontSize = 20,text = '',color = '#ffffff',paddingW  = 20,safeW = 83})
	local consumeLabel = display.newRichLabel(61.5, 29.5 ,{ r = true , ap = display.CENTER,c = {
		{fontSize = 24,ttf = true,font = TTF_GAME_FONT,text = unlock[1].num,color = '#fffff'},
		{img = GoodsUtils.GetIconPathById(unlock[1].goodsId) , scale = 0.2 },
	}})
	CommonUtils.AddRichLabelTraceEffect(consumeLabel)
	makeBtn:addChild(consumeLabel,0)
	display.commonUIParams(makeBtn , {cb = function()
		callbck()
		canvas:runAction(
			cc.Sequence:create(
				cc.Hide:create(),
				cc.RemoveSelf:create()
			)
		)
	end})
end
--[[
	更新menus 的信息
--]]
function PopMainScene:UpdateMenusGoods()
	if self.menuGoodsData then
		for goodsId , node in pairs(self.menuGoodsData.purchaseNodes) do
			node:RefershUI( goodsId )
		end
	end
end
function PopMainScene:UpdateLockStatus(status)
	self.lockStatus = status
end
-- 弹出状态更新
function PopMainScene:UpdatePopStatus(zones)
	if self.viewIncomeData and
			(not tolua.isnull(self.viewIncomeData.incomeLayout)) then
		self.viewIncomeData.incomeLayout:runAction(cc.RemoveSelf:create())
		self.viewIncomeData = nil
	end
	if not self.viewPopupData then
		self:CreatePopupLayout()
	end
	local viewPopupData = self.viewPopupData
	if #zones == 0 then
		viewPopupData.topfilteredSprite:setFilter(GrayFilter:create())
		viewPopupData.bottomfilteredSprite:setFilter(GrayFilter:create())
		display.commonLabelParams(self.viewPopupData.topGoBtn ,fontWithColor(14,{fontSize = 24,text = __('点击开荒'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		display.commonLabelParams(self.viewPopupData.bottomGoBtn ,fontWithColor(14, {fontSize = 24,text = __('未解锁'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		self.viewPopupData.bottomGoBtn:setNormalImage(RES_DICT.COMMON_BTN_ORANGE_DISABLE)
		self.viewPopupData.bottomGoBtn:setSelectedImage(RES_DICT.COMMON_BTN_ORANGE_DISABLE)
	elseif #zones == 1 then
		viewPopupData.topfilteredSprite:clearFilter()
		viewPopupData.bottomfilteredSprite:setFilter(GrayFilter:create())
		display.commonLabelParams(self.viewPopupData.topGoBtn ,fontWithColor(14,{fontSize = 24,text = __('进入剧情'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		display.commonLabelParams(self.viewPopupData.bottomGoBtn ,fontWithColor(14,{fontSize = 24,text = __('未解锁'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		if self.lockStatus == FARM_STATUS.CLEAR_FIRST_ZONE then
			self.viewPopupData.bottomGoBtn:setNormalImage(RES_DICT.COMMON_BTN_BIG_ORANGE)
			self.viewPopupData.bottomGoBtn:setSelectedImage(RES_DICT.COMMON_BTN_BIG_ORANGE)
			display.commonLabelParams(self.viewPopupData.topGoBtn ,fontWithColor(14,{fontSize = 24,text = __('已完成'),color = '#ffffff',paddingW  = 20,safeW = 108}))
			display.commonLabelParams(self.viewPopupData.bottomGoBtn ,fontWithColor(14,{fontSize = 24,text = __('点击解锁'),color = '#ffffff',paddingW  = 20,safeW = 108}))
			viewPopupData.bottomfilteredSprite:clearFilter()
		else
			self.viewPopupData.bottomGoBtn:setNormalImage(RES_DICT.COMMON_BTN_ORANGE_DISABLE)
			self.viewPopupData.bottomGoBtn:setSelectedImage(RES_DICT.COMMON_BTN_ORANGE_DISABLE)
		end
	elseif #zones == 2 then
		viewPopupData.topfilteredSprite:clearFilter()
		viewPopupData.bottomfilteredSprite:clearFilter()
		display.commonLabelParams(self.viewPopupData.topGoBtn ,fontWithColor(14,{fontSize = 24,text = __('已完成'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		display.commonLabelParams(self.viewPopupData.bottomGoBtn ,fontWithColor(14,{fontSize = 24,text = __('进入剧情'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		if  self.lockStatus == FARM_STATUS.CLEAR_SECOND_ZONE then
			display.commonLabelParams(self.viewPopupData.bottomGoBtn ,fontWithColor(14,{fontSize = 24,text = __('已完成'),color = '#ffffff',paddingW  = 20,safeW = 108}))
		end
		self.viewPopupData.bottomGoBtn:setNormalImage(RES_DICT.COMMON_BTN_BIG_ORANGE)
		self.viewPopupData.bottomGoBtn:setSelectedImage(RES_DICT.COMMON_BTN_BIG_ORANGE)
	end

	if self.lockStatus == FARM_STATUS.LOCK_ZONE then
		viewPopupData.popTopSpine:setVisible(true)
	--elseif self.lockStatus == FARM_STATUS.CLEAR_FIRST_ZONE then
	--	viewPopupData.popBottomSpine:setVisible(true)
	end
end

function PopMainScene:UpdateIncomeStatus(zones)
	if self.viewPopupData and
	(not tolua.isnull(self.viewPopupData.popUpLayout)) then
		self.viewPopupData.popUpLayout:runAction(cc.RemoveSelf:create())
		self.viewPopupData = nil
	end
	if not self.viewIncomeData then
		self:CreateIncomeLayout()
	end
	local viewIncomeData = self.viewIncomeData
	if #zones == 0 then
		viewIncomeData.unTopFilteredSprite:setFilter(GrayFilter:create())
		viewIncomeData.unBottomFilteredSprite:setFilter(GrayFilter:create())
	elseif #zones == 1 then
		viewIncomeData.unTopFilteredSprite:clearFilter()
		if checkint(zones[#zones].hasDrawn) == 1 then
			viewIncomeData.unBottomFilteredSprite:clearFilter()
		else
			viewIncomeData.unBottomFilteredSprite:setFilter(GrayFilter:create())
		end

	elseif #zones == 2 then
		viewIncomeData.unTopFilteredSprite:clearFilter()
		viewIncomeData.unBottomFilteredSprite:clearFilter()
	end
end
function PopMainScene:UpdateAllVegeTableNode(allLandData)
	local lands = {
		["1"] = false,
		["2"] = false,
		["3"] = false,
		["4"] = false,
		["5"] = false,
		["6"] = false
	}
	for i , landData in pairs(allLandData) do
		lands[tostring(landData.landId)] = true
		local cloneLandData = clone(landData)
		cloneLandData.summaryId = self.summaryId
		cloneLandData.unlock = true
		local cell = self.viewVegeData.cells[tostring(landData.landId)]
		cell:UpdateLand(cloneLandData)
		cell:setVisible(true)
	end
	for landId, unlock in pairs(lands) do
		if not unlock then
			self.viewVegeData.cells[landId]:UpdateLand({
				landId = landId , unlock = false })
			local cell = self.viewVegeData.cells[landId]
			cell:setVisible(true)
		end
	end
end

function PopMainScene:UpdateVegeTableNode(landData)
	if not self.viewVegeData then
		return
	end
	local landId = landData.landId
	local vegeTableNode =  self.viewVegeData.cells[tostring(landId)]
	if vegeTableNode then
		vegeTableNode:UpdateLand(landData)
	end

end

function PopMainScene:UnlockVegeTableAnimation()
	local farmZoneConf = CONF.ACTIVITY_POP.FARM_ZONE:GetValue(self.summaryId)
	local oneZoneConf = farmZoneConf["1"]
	local path = string.format("conf/%s/activity/farmStory.json",i18n.getLang())
	local stage = require( "Frame.Opera.OperaStage" ).new({id = oneZoneConf.storyId, path = path, guide = false, isHideBackBtn = true, cb = function (tag)
		local spinecallBack = function()
			app:DispatchObservers(POP_MAIN_EVENT.UNLOCK_VEGETABLE_EVENT)
		end
		local viewLockVegeTableData = self.viewLockVegeTableData
		if viewLockVegeTableData.spine and (not tolua.isnull(viewLockVegeTableData.spine)) then
			viewLockVegeTableData.spine:setToSetupPose()
			viewLockVegeTableData.spine:registerSpineEventHandler(spinecallBack, sp.EventType.ANIMATION_COMPLETE)
			viewLockVegeTableData.spine:setAnimation(0, "play" , false)
			viewLockVegeTableData.spine:runAction(
					cc.Spawn:create(
						cc.Sequence:create(
							cc.DelayTime:create(1),
							cc.FadeOut:create(0.1)
						),
						cc.TargetedAction:create(viewLockVegeTableData.forestLabel ,
								cc.Sequence:create(
									cc.DelayTime:create(1),
									cc.FadeOut:create(0.1)
								)
						)


					)
			)
		else
			app:DispatchObservers(POP_MAIN_EVENT.UNLOCK_VEGETABLE_EVENT)
		end
	end})
	stage:setPosition(cc.p(display.cx,display.cy))
	sceneWorld:addChild(stage, GameSceneTag.Dialog_GameSceneTag)
end

function PopMainScene:UpdateSeeds(seeds)
	if not self.viewTopData then
		return
	end
	local seedViewData = {
		["1"] = self.viewTopData.oneLabel,
		["2"] = self.viewTopData.twoLabel,
		["3"] = self.viewTopData.threeLabel
	}
	for seedId , uiLabel in pairs(seedViewData) do
		local num = checkint(seeds[tostring(seedId)])
		uiLabel:setString(num)
	end
end

function PopMainScene:UpdateBossRedIcon(isVisible)
	local viewTopData = self.viewTopData
	if not viewTopData  then return end
	viewTopData.redIconPopLink:setVisible(isVisible)
end
function PopMainScene:UpdateOneKeyAnimation(landData)
	local isPreMature = false
	for landId , isMature in pairs(self.landsMature) do
		if isMature then
			isPreMature = isMature
			break
		end
	end
	table.merge(self.landsMature , landData)
	local isCurentMature = false
	for landId , isMature in pairs(self.landsMature) do
		if isMature then
			isCurentMature = isMature
			break
		end
	end
	-- 合并数据
	if isCurentMature == isPreMature then
		return
	end

	if isCurentMature then
		self.viewTopData.leftBottomSpine:setToSetupPose()
		self.viewTopData.leftBottomSpine:setAnimation(0, "idle" , true)
	else
		self.viewTopData.leftBottomSpine:setToSetupPose()
		self.viewTopData.leftBottomSpine:setAnimation(0, "idle" , false)
	end
end
function PopMainScene:UpdateModuleName(name)
	local moduleName = self.bottomData.moduleName
	display.commonLabelParams(moduleName ,{text = name})
end
function PopMainScene:GetBgImage()
	if checkint(self.lockStatus) > 1 then
		return RES_DICT.POP_BG_1
	end
	return RES_DICT.POP_BG
end

return PopMainScene