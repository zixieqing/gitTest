---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/10/12 3:27 PM
---
---@class AnniversaryFirstEnterView
local AnniversaryFirstEnterView = class('AnniversaryFirstEnterView', function ()
    local node = CLayout:create(display.size)
    node.name = 'Game.views.artifact.AnniversaryFirstEnterView'
    node:setName('AnniversaryFirstEnterView')
    node:enableNodeEvents()
    return node
end)
local anniversaryManager = app.anniversaryMgr
local newImageView = display.newImageView
local newButton = display.newButton
local newLayer = display.newLayer
local RES_DICT = {
    DIALOGUE_BG_2          = app.anniversaryMgr:GetResPath('arts/stage/ui/dialogue_bg_2.png'),
    STORY_BG_NAME          = app.anniversaryMgr:GetResPath('arts/stage/ui/story_bg_name.png')
}
function AnniversaryFirstEnterView:ctor()
    app.anniversaryMgr:GetChangeSkinData()
    app.anniversaryMgr:GetMainSpine()
    anniversaryManager:AddSpineCache()
    self.isAction = true
    self.isClose = false
    self:InitUI()
    self:RunAction()
end
function AnniversaryFirstEnterView:InitUI()
    local swallowLayer = newLayer(display.cx , display.cy , {ap = display.CENTER , size = display.size ,
    enable = true , color = cc.c4b(0,0,0,0) , cb = function()
            if  not  self.isAction  then
                if not self.isClose then
                    self.isClose = true
                    self.viewData.quatar:setVisible(true)
                    self.viewData.quatar:setAnimation(0, 'anni_main_open', false)
                end
            end
    end})
    self:addChild(swallowLayer)
    local anniversaryActivityId =  app.activityMgr:GetActivityIdByType(ACTIVITY_TYPE.ANNIVERSARY)
    local isOpen = cc.UserDefault:getInstance():getBoolForKey(app.gameMgr:GetUserInfo().playerId .. "ANNIVERSARY_OPEN" .. anniversaryActivityId, false )
    local roleName = nil
    local cardImage = nil
    local roleNameBtn = nil
    local mainBgImage = nil
    local dialogueText = nil
    local dialogue = nil

    local changeSkinData = app.anniversaryMgr.changeSkinTable
    local mainBgImagePath =  app.anniversaryMgr:GetResPath("arts/stage/bg/main_bg_03.jpg")
    local isNpc = true
    local npcPos = cc.p(display.cx + 300 , display.cy - 450)
    local roleId = 'role_14'
    if changeSkinData then
        mainBgImagePath = app.anniversaryMgr:GetResPath(changeSkinData.entryViewData.mainBgImage)
        isNpc  = changeSkinData.isNpc
        npcPos = changeSkinData.entryViewData.npcPos
        roleId = changeSkinData.entryViewData.cardId
    end
    if not  isOpen then
        mainBgImage = newImageView(mainBgImagePath,display.cx ,display.cy)
        self:addChild(mainBgImage)
        fullScreenFixScale(mainBgImage)
        mainBgImage:setOpacity(0)
        local animationLayer = display.newLayer(display.cx , display.cy, {ap = display.CENTER })
        if not isNpc then
            cardImage = AssetsUtils.GetCardDrawNode(roleId)
            roleName = CommonUtils.GetConfig('cards', 'card', tostring(roleId)).name
        else
            cardImage = CommonUtils.GetRoleNodeById(roleId, 1)
            roleName = app.gameMgr:GetRoleInfo(roleId).roleName
        end

        cardImage:setPosition(npcPos)
        cardImage:setOpacity(0)
        animationLayer:addChild(cardImage)
        self:addChild(animationLayer)
        dialogue = display.newImageView(RES_DICT.DIALOGUE_BG_2,0,  0, {ap = cc.p(0.5, 0.5)})
        local size = dialogue:getContentSize()
        dialogue:setPosition(size.width/2 , size.height/2)
        dialogue:setOpacity(0)
        local content = display.newLayer(display.cx , display.cy - 150   , { ap = display.CENTER ,  size =cc.size(size.width, size.height)})
        content:addChild(dialogue)
        animationLayer:addChild(content,5)
        dialogueText = display.newLabel(dialogue:getContentSize().width/ 2, dialogue:getContentSize().height/ 2,
                                               {text = app.anniversaryMgr:GetDialogText().startText, fontSize = 22, color = '#5b3c25', w = 400})
        content:addChild(dialogueText)
        dialogueText:setVisible(false)

        roleNameBtn =  newButton(display.cx + 280 , display.cy -260  , { n = RES_DICT.STORY_BG_NAME })
        self:addChild(roleNameBtn)
        roleNameBtn:setOpacity(0)
        display.commonLabelParams(roleNameBtn , fontWithColor(6, {text =roleName , fontSize = 24 , color = "#805528" , offset = cc.p(0, -5 )}))
    end
    print(anniversaryManager.spineTable.ANNI_MAIN_OPEN)
    local quatar =  SpineCache(SpineCacheName.ANNIVERSARY):createWithName(anniversaryManager.spineTable.ANNI_MAIN_OPEN)
    quatar:setVisible(false)
    self:addChild(quatar)
    quatar:setPosition(display.center)

    local spinecallBack = function()
        self:stopAllActions()
        self:runAction(cc.Sequence:create(
                cc.FadeOut:create(0.1) ,
                cc.RemoveSelf:create()
        ) )
    end
    quatar:registerSpineEventHandler(spinecallBack, sp.EventType.ANIMATION_COMPLETE)
    self.viewData = {
        roleName     = roleName,
        cardImage    = cardImage,
        dialogueText = dialogueText,
        quatar       = quatar,
        roleNameBtn  = roleNameBtn,
        mainBgImage  = mainBgImage,
        dialogue  = dialogue
    }
end
function AnniversaryFirstEnterView:RunAction()
    local num = 2
    local anniversaryActivityId =  app.activityMgr:GetActivityIdByType(ACTIVITY_TYPE.ANNIVERSARY)
    local isOpen = cc.UserDefault:getInstance():getBoolForKey(app.gameMgr:GetUserInfo().playerId .. "ANNIVERSARY_OPEN" .. anniversaryActivityId, false )
    if isOpen  then
        self.isAction = false
        self.isClose = true
        self.viewData.quatar:setVisible(true)
        self.viewData.quatar:setAnimation(0, 'anni_main_open', false)
        sceneWorld:runAction(
            cc.Sequence:create(
                cc.DelayTime:create(0.5),
                cc.CallFunc:create(
                    function()
                        local router =  app:RetrieveMediator("Router")
                        router:Dispatch({} , {name = "anniversary.AnniversaryMainMediator"})
                    end
                )
            )
        )
    else
        self:runAction(
            cc.Spawn:create(
                cc.TargetedAction:create( self.viewData.mainBgImage ,
                      cc.Sequence:create(
                        cc.FadeIn:create(0.4*num),
                        cc.DelayTime:create(0.5*num)
                      )
                ),
                cc.TargetedAction:create( self.viewData.cardImage ,
                   cc.Sequence:create(
                       cc.DelayTime:create(0.5*num),
                       cc.FadeIn:create(0.3*num),
                       cc.DelayTime:create(0.1*num)
                   )
                ),
                cc.TargetedAction:create( self.viewData.dialogue ,
                    cc.Sequence:create(
                        cc.DelayTime:create(0.6*num),
                        cc.FadeIn:create(0.3*num)
                    )
                ),
                cc.TargetedAction:create( self.viewData.roleNameBtn ,
                    cc.Sequence:create(
                        cc.DelayTime:create(0.6*num),
                        cc.FadeIn:create(0.3*num)
                    )
                ) ,
                cc.TargetedAction:create( self.viewData.dialogueText ,
                    cc.Sequence:create(
                        cc.FadeIn:create(0.6*num),
                        cc.Show:create(),
                        TypewriterAction:create(0.3*num),
                        cc.CallFunc:create(function()
                            self.isAction = false
                            --local mediator = require('Game.mediator.anniversary.AnniversaryMainMediator').new()
                            --app:RegistMediator(mediator)
                            ---@type Router
                            local router =  app:RetrieveMediator("Router")
                            router:Dispatch({} , {name = "anniversary.AnniversaryMainMediator"})
                            cc.UserDefault:getInstance():setBoolForKey(app.gameMgr:GetUserInfo().playerId .. "ANNIVERSARY_OPEN"  .. anniversaryActivityId, true )
                        end)
                    )
                )
            )
        )
    end
end
return AnniversaryFirstEnterView
