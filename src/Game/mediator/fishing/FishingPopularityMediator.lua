---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/8/7 4:31 PM
---
local Mediator = mvc.Mediator
---@class FishingPopularityMediator :Mediator
local FishingPopularityMediator = class("FishingPopularityMediator", Mediator)
---@type FishConfigParser
local fishConfigParser = require('Game.Datas.Parser.FishConfigParser')
---@type UIManager
local uiMgr = AppFacade.GetInstance():GetManager("UIManager")
---@type GameManager
local gameMgr = AppFacade.GetInstance():GetManager("GameManager")
local NAME = "FishingPopularityMediator"
function FishingPopularityMediator:ctor( params, viewComponent )
    self.super:ctor(NAME,viewComponent)
    self.mediatorName     = NAME
    self.datas            = params or {}
    self.canUpgrade       = true
    self.goldEnough       = true
    self.popularityEnough = true
    self.materialEnough   = true
end

function FishingPopularityMediator:InterestSignals()
    local signals = {
        POST.FISHPLACE_LEVEL_UP.sglName  , -- 领取奖励
        SGL.REFRESH_NOT_CLOSE_GOODS_EVENT
    }
    return signals
end

function FishingPopularityMediator:ProcessSignal( signal )
    local name = signal:GetName()
    local body = checktable(signal:GetBody())
    if name == POST.FISHPLACE_LEVEL_UP.sglName then
        local currentLevel = checkint(body.level)
        local levelConfigs = CommonUtils.GetConfigAllMess(fishConfigParser.TYPE.LEVEL, 'fish') or {}
        app.fishingMgr:SetHomeDataByKeyalue('level',currentLevel )
        app.gameMgr:GetUserInfo().fishPlaceLevel = currentLevel
        local levelData = levelConfigs[tostring(currentLevel)] or {}
        local consumeData = clone(levelData.consume or {})
        for i, v in pairs(consumeData) do
            v.num = - checkint(v.num)
        end
        consumeData[#consumeData+1] = { goodsId = FISH_POPULARITY_ID ,num = - checkint(levelData.fishingPopularity) }
        CommonUtils.DrawRewards(consumeData)
        self:GetFacade():DispatchObservers(FISH_LEVEL_UP_EVENT , {level = currentLevel} )
        app.uiMgr:AddDialog("Game.views.fishing.FishingUpgrdeView")
        self.canUpgrade = true
        self.goldEnough       = true
        self.popularityEnough = true
        self.materialEnough   = true
        self:UpdateUI()
    elseif name == SGL.REFRESH_NOT_CLOSE_GOODS_EVENT then
        self.canUpgrade = true
        self.goldEnough       = true
        self.popularityEnough = true
        self.materialEnough   = true
        self:UpdateUI()
    end
end

function FishingPopularityMediator:Initial( key )
    self.super.Initial(self,key)
    ---@type FishingPopularityView
    local viewComponent = require("Game.views.fishing.FishingPopularityView").new()
    self:SetViewComponent(viewComponent)
    local viewData = viewComponent.viewData_
    local upgradeBtn = viewData.upgradeBtn
    viewData.popularityIcon:setOnClickScriptHandler(function(sender)
        --app.uiMgr:ShowIntroPopup({moduleId = JUMP_MODULE_DATA.FISHING_GROUND})
        uiMgr:ShowInformationTipsBoard({targetNode = sender, iconId = FISH_POPULARITY_ID , type = 1})
    end)
    viewData.tipsIcon:setOnClickScriptHandler(function(sender)
        app.uiMgr:ShowIntroPopup({moduleId = JUMP_MODULE_DATA.FISHING_GROUND})
    end)
    display.commonUIParams(upgradeBtn ,{cb = handler(self, self.ButtonAction)})
end
function FishingPopularityMediator:ButtonAction(sender)
    local tag = sender:getTag()
    if tag == RemindTag.BTN_FISH_UPGRADE then
        if self.canUpgrade  then
            self:SendSignal(POST.FISHPLACE_LEVEL_UP.cmdName,{})
        else
            if not self.materialEnough then
                uiMgr:ShowInformationTips(__('材料不足'))
            elseif not self.goldEnough then
                uiMgr:ShowInformationTips(__('金币不足'))
            elseif not self.popularityEnough then
                uiMgr:ShowInformationTips(__('钓场人气度不足'))
            end
        end
    end
end

function FishingPopularityMediator:UpdateUI()
    -- 升级信息
    local nextLevel = 1
    local currentLevel = app.fishingMgr:GetHomeDataByKey('level')
    local fishingVaule = CommonUtils.GetCacheProductNum(FISH_POPULARITY_ID)
    local viewData_ =  self:GetViewComponent().viewData_
    local levelConfigs = CommonUtils.GetConfigAllMess(fishConfigParser.TYPE.LEVEL, 'fish') or {}
    if (currentLevel + 1) > table.nums(levelConfigs) then
        nextLevel = currentLevel
    else
        nextLevel = currentLevel + 1
    end
    local upgradeDatas = levelConfigs[tostring(nextLevel)]
    local fishingPopularity = tonumber(upgradeDatas.fishingPopularity)
    local consumeGoods = upgradeDatas.consume
    display.reloadRichLabel(viewData_.rankLabel , { c= {
        fontWithColor(6, {text = __('当前钓场规模：')}) ,
        fontWithColor(11, {text = string.fmt(__('_num_级钓场'), {['_num_'] = currentLevel}) })
    } })
    viewData_.expProgressBar:setMaxValue(fishingPopularity)
    viewData_.expProgressBar:setValue(fishingVaule)
    if viewData_.materialBg:getChildByTag(2222) then
        viewData_.materialBg:getChildByTag(2222):removeFromParent()
    end
    if checkint(fishingVaule) < checkint(upgradeDatas.fishingPopularity) then
        self.canUpgrade = false
        self.popularityEnough = false
    end
    viewData_.expLabel:setString(tostring(fishingVaule) .. '/' .. fishingPopularity)
    -- 到达满级
    if currentLevel == nextLevel then
        self:CreateUpgradeStatus()
        return
    end
    local materialLayout = CLayout:create(cc.size(90 + (#consumeGoods-2)*120, 100))
    materialLayout:setTag(2222)
    materialLayout:setPosition(cc.p(viewData_.materialBg:getContentSize().width/2, 90))
    viewData_.materialBg:addChild(materialLayout)
    for i,v in ipairs(consumeGoods) do
        if v.goodsId == GOLD_ID then
            if gameMgr:GetUserInfo().gold < v.num then
                self.canUpgrade = false
                self.goldEnough = false
            end
            display.reloadRichLabel(viewData_.costLabel, {c = {
                {text = tostring(v.num), fontSize = 24, color = '#78564b'},
                {img = _res('arts/goods/goods_icon_' .. GOLD_ID .. '.png'), scale = 0.18},
            }})
        else
            local function callBack(sender)
                uiMgr:AddDialog("common.GainPopup", {goodId = v.goodsId, isFrom = 'AvatarMediator'})
            end
            local materialNode = require('common.GoodNode').new({id = v.goodsId, showAmount = false, callBack = callBack})
            materialNode:setPosition(cc.p(45 + (i-1)*120, 45))
            materialNode:setScale(0.8)
            materialLayout:addChild(materialNode, 10)
            local hasNum = gameMgr:GetAmountByGoodId(v.goodsId)
            local showEnough = true
            if checkint(hasNum) < checkint(v.num) then
                self.canUpgrade = false
                self.materialEnough = false
                showEnough = false
            end
            if showEnough then
                local materialNumLabel = cc.Label:createWithBMFont('font/small/common_text_num.fnt', '')
                display.commonUIParams(materialNumLabel, {ap = cc.p(1, 0)})
                materialNumLabel:setPosition(cc.p(86 + (i-1)*120, 2))
                materialNumLabel:setString(tostring(hasNum) .. '/' .. v.num)
                materialLayout:addChild(materialNumLabel,10)
            else
                local materialNumLabel = cc.Label:createWithBMFont('font/small/common_text_num.fnt', '')
                display.commonUIParams(materialNumLabel, {ap = cc.p(1, 0)})
                materialNumLabel:setPosition(cc.p(86 + (i-1)*120, 2))
                materialNumLabel:setString('/' .. v.num)
                materialLayout:addChild(materialNumLabel,10)
                local hasNumLabel = cc.Label:createWithBMFont('font/small/common_num_unused.fnt', '')
                display.commonUIParams(hasNumLabel, {ap = cc.p(1, 0)})
                hasNumLabel:setPosition(cc.p(86 + (i-1)*120 - materialNumLabel:getContentSize().width, 2))
                hasNumLabel:setString(tostring(hasNum))
                materialLayout:addChild(hasNumLabel,10)
            end
        end
    end
end
function FishingPopularityMediator:CreateUpgradeStatus()
    local viewData_ =  self:GetViewComponent().viewData_
    local fullLevelImage = display.newImageView(_res('ui/common/common_tips_no_pet.png'))
    local view = viewData_.view
    fullLevelImage:setScale(0.8)
    local viewSize = view:getContentSize()
    fullLevelImage:setPosition(viewSize.width /2 , 180)
    view:addChild(fullLevelImage,10)
    viewData_.materialBg:setVisible(false)
    viewData_.costLabel:setVisible(false)
    viewData_.upgradeBtn:setVisible(false)
    local fullLevelLabel = display.newLabel(viewSize.width /2 +70, 130,
            fontWithColor(8 , {ap = display.CENTER , hAlign = display.TAC, fontSize = 24 ,w = 280,  text =   __('钓场已达到最高等级') }))
    view:addChild(fullLevelLabel,10)
end
function FishingPopularityMediator:OnRegist(  )
    regPost(POST.FISHPLACE_LEVEL_UP)
end
function FishingPopularityMediator:OnUnRegist(  )
    unregPost(POST.FISHPLACE_LEVEL_UP)
end

return FishingPopularityMediator
