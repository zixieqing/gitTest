---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 27/02/2018 7:14 PM
---

local Mediator = mvc.Mediator
local NAME = "TastingTourChooseRecipeMediator"
---@class TastingTourChooseRecipeMediator :Mediator
local TastingTourChooseRecipeMediator = class(NAME, Mediator)
---@type UIManager
local uiMgr = AppFacade.GetInstance():GetManager("UIManager")
---@type TastingTourManager
local tastingTourMgr = AppFacade.GetInstance():GetManager("TastingTourManager")
local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
--[[
    {
        zoneId = 1
    }
--]]
local BUTTON_CLICK = {
    MAKE_RECIPE_BTN   = 1001,  -- 制作菜品
    SUBMIT_RECIPE_BTN = 1002,  -- 提交菜品
    BACK_BTN          = 1003 , --返回关闭按钮
    ATTR_BTN          = 1004 , --属性按钮选择
}
function TastingTourChooseRecipeMediator:ctor(params, viewComponent )
    self.super:ctor(NAME,viewComponent)
    params = params or {}
    self.pos = params.pos or 1
    self.questId =  params.questId or 1
    self.stageId = params.stageId or 1  -- 当前大关卡的id
    self.currentData = {}  -- 当前选择的菜谱数据
    self.recipeId = params.recipeId
    self.currentIndex =  1 -- 当前选择的菜谱
    self.menuTag = 0  -- 当前的menuTag
    self.attrTag = 0  -- 当前的属性选项 默认选择是1
    local stageConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.STAGE)
    local stageOneConfig = stageConfig[tostring(self.stageId)]
    self.styleId = stageOneConfig.cookId
    self.ownRecipeTable =  self:GetOwnRecipeTable()
    self.kindName = {
        ["0"] = 'all',
        ["1"] = 'taste',
        ["2"] = 'museFeel',
        ["3"] = 'fragrance',
        ["4"] = 'exterior',
    }
end

function TastingTourChooseRecipeMediator:InterestSignals()
    local signals = {
        SGL.RecipeCookingMaking_Callback ,
        SGL.SEND_NEXT_SERVING_RECIPE_EVENT ,
        "REFRESH_RECIPE_DETAIL" ,
    }
    return signals
end
function TastingTourChooseRecipeMediator:GetOwnRecipeTable()
    ---@type GameManager
    local gameMgr   = AppFacade.GetInstance():GetManager("GameManager")
    local styleData = gameMgr:GetUserInfo().cookingStyles[tostring(self.styleId)] or {}
    local recipeTable = {}
    for i, v in pairs(styleData) do
        recipeTable[tostring(v.recipeId)] = true
    end
    return recipeTable
end
function TastingTourChooseRecipeMediator:ProcessSignal(signal)
    local name = signal:GetName()
    local body = signal:GetBody() or {}
    --做菜的时候的刷新时间
    if name == SGL.RecipeCookingMaking_Callback then
        self.viewComponent:runAction(cc.Sequence:create(cc.DelayTime:create(0.01) , cc.CallFunc:create(
                function()
                    local recipeData = self.currentData[self.currentIndex]
                    recipeData = app.cookingMgr:GetRecipeAttrDataByRecipeId(recipeData.recipeId)
                    self.currentData[self.currentIndex] = recipeData
                    self:UpdateRightView()
                end
        )) )
    elseif name == SGL.SEND_NEXT_SERVING_RECIPE_EVENT then
        local pos = body.pos
        if pos ~= 0 then
            local questOneConfig = questConfig[tostring(self.questId)] or {}
            local num = table.nums(questOneConfig.foodsAttr)
            -- 判断位置是否合法
            if pos  <=  num then
                self:QuestRecipeRequirements()
                self:UpdateView()
            else -- 位置不合法直接关闭界面
                self:GetFacade():UnRegsitMediator(NAME)
            end
        end
    elseif name == "REFRESH_RECIPE_DETAIL" then
        local recipeNew = body.recipeNew
        if recipeNew then
            self.ownRecipeTable[tostring(body.recipeId)] = true
            self.viewComponent:runAction(cc.Sequence:create(
                cc.DelayTime:create(0.01) ,
                cc.CallFunc:create(
                    function()
                        self:SelectMenuTag(self.menuTag)
                    end
                )
            ))
        end
    end
end
--[[
    关卡菜品具体位置的要求
--]]
function TastingTourChooseRecipeMediator:QuestRecipeRequirements()
    local questOneConfig = questConfig[tostring(self.questId)]
    if questOneConfig  then
        local foodOneAttr = questOneConfig.foodsAttr[checkint(self.pos) ]
        self.menuTag = foodOneAttr.foodTagMainType
        self.attrTag = foodOneAttr.maxFoodAttrId
    end
end


function TastingTourChooseRecipeMediator:Initial(key)
    self.super.Initial(self, key)
    
    local viewComponent =  require("Game.views.tastingTour.TastingTourChooseRecipeView").new({stageId =  self.stageId})
    self.viewComponent = viewComponent
    viewComponent:setPosition(display.center)
    uiMgr:GetCurrentScene():AddGameLayer(viewComponent)
    self:AnimationView()
end
--[[
    更新界面
--]]
function TastingTourChooseRecipeMediator:UpdateView()
    local viewData = self.viewComponent.viewData
    viewData.backBtn:setOnClickScriptHandler(
        function ()
            self:GetFacade():UnRegsitMediator(NAME)
        end)
    viewData.submitBtn:setOnClickScriptHandler(handler(self, self.ButtonAction))
    viewData.makeBtn:setOnClickScriptHandler(handler(self, self.ButtonAction))
    viewData.kindBtn:setOnClickScriptHandler(handler(self, self.ButtonAction))
    viewData.gridView:setDataSourceAdapterScriptHandler(handler(self, self.OnDataSource))
    for k , v in pairs(viewData.buttonTable) do
        v:setOnClickScriptHandler(function (sender)
            local  tag =  sender:getTag()
            self:SelectMenuTag(tag)
        end)
    end
    self:SelectMenuTag(self.menuTag)
    local sortTable = tastingTourMgr:GetSortRecipeByAttrAndFoodTag(self.styleId  , self.kindName[tostring(self.attrTag)] , self.menuTag)
    viewData.gridView:setCountOfCell(#sortTable)
    self.currentData = sortTable
    if checkint(self.recipeId) ~=0   then
        for k , v in pairs(self.currentData) do
            if checkint(v.recipeId)  == checkint(self.recipeId) then
                self.currentIndex = k
                break
            end
        end
    else
        self.currentIndex = 1
    end
    viewData.gridView:reloadData()
    self:UpdateRightView()
    self:UpdateTopView()


end

--[[
    页面的动画
--]]
function TastingTourChooseRecipeMediator:AnimationView()
    local viewData = self.viewComponent.viewData
    local topPos = cc.p( viewData.topLayer:getPosition())
    local parentNode = viewData.leftLayout:getParent()
    -- 转化顶部
    local topWorldPos = parentNode:convertToWorldSpace(topPos)
    local topHeigt = display.height
    local topStartPos = cc.p(topPos.x , topPos.y + topHeigt -  topWorldPos.y )

    local time = 0.23
    self.viewComponent:runAction(
        cc.Sequence:create(
            cc.CallFunc:create(
            function ()
                viewData.topLayer:setPosition(cc.p(topStartPos))
                viewData.topLayer:setOpacity(0)
                viewData.bottomLayout:setOpacity(0)
                viewData.leftLayout:setOpacity(0)
            end),
            cc.Spawn:create(
                cc.TargetedAction:create(viewData.topLayer, cc.Sequence:create( cc.Spawn:create(cc.FadeIn:create(time)  , cc.JumpTo:create(time , topPos ,-30,1) ))  ),
                cc.TargetedAction:create(viewData.leftLayout , cc.FadeIn:create(time)),
                cc.TargetedAction:create(viewData.bottomLayout , cc.FadeIn:create(time))
            ),
            cc.CallFunc:create(
                function ()
                    self:UpdateView()
                end
            )
        )
    )
end

-- 点击的回调事件
function TastingTourChooseRecipeMediator:ButtonAction(sender)
    local tag = sender:getTag()
    if tag == BUTTON_CLICK.MAKE_RECIPE_BTN then
        local isTrue = self:GetCurrentRecipeOwn(self.currentIndex)
        if isTrue then
            local data = app.cookingMgr:GetRecipeAttrDataByRecipeId(self.currentData[self.currentIndex].recipeId)
            data.type = 1
            local mediator = require("Game.mediator.RecipeDetailMediator").new(data)
            self:GetFacade():RegistMediator(mediator)
        else
            local mediator = require("Game.mediator.RecipeResearchAndMakingMediator").new({presStyleTag = 1002})
            self:GetFacade():RegistMediator(mediator)
        end
    elseif tag == BUTTON_CLICK.SUBMIT_RECIPE_BTN then
        --提交的菜 和位置
        self:GetFacade():DispatchObservers(SGL.SUBMIT_THE_DISHES_EVENT,{pos = self.pos ,  recipeId = self.currentData[self.currentIndex].recipeId})
        self:GetFacade():UnRegsitMediator(NAME)
    elseif tag == BUTTON_CLICK.ATTR_BTN then
        local viewComponent  = self.viewComponent
        local selectView = viewComponent:CreateSelectAtttrView(viewComponent.viewData.kindBtn, self.attrTag)
        selectView:setName("selectView")
        selectView.closeSelectView:setOnClickScriptHandler(
        function ()
            if selectView  and(not  tolua.isnull(selectView)) then
                selectView:runAction(cc.RemoveSelf:create())
                selectView = nil
            end
        end)
        local nodesTable =  selectView.listView:getNodes()
        for k ,v in pairs(nodesTable) do
            local button = v:getChildByName("button")
            button:setOnClickScriptHandler(
            function (sender)
                local tag  = sender:getTag()
                local attr = self.kindName[tostring(tag)]
                local sortTable = tastingTourMgr:GetSortRecipeByAttrAndFoodTag(self.styleId  , attr , self.menuTag)
                viewComponent.viewData.gridView:setCountOfCell(#sortTable)
                self.currentData = sortTable
                self.attrTag = tag
                viewComponent.viewData.gridView:reloadData()
                self:UpdateRightView()
                if selectView  and(not  tolua.isnull(selectView)) then
                    selectView:runAction(cc.RemoveSelf:create())
                    selectView = nil
                end
            end)
        end
    end
end

function TastingTourChooseRecipeMediator:OnDataSource(cell,idx)
    local pcell = cell
    local index = idx +1
    xTry(function()
        if index>= 1 and index <= #self.currentData  then
            if not  pcell then
                pcell = self.viewComponent:CreateGridCell()
            end
            local isSelect = self.currentIndex == index
            local data = self.currentData[index]
            pcell.bgLayout:setTouchEnabled(true)
            pcell.bgLayout:setTag(index)
            pcell.bgLayout:setOnClickScriptHandler(handler(self, self.SetCellClick))
            self.viewComponent:UpdateGridCell(pcell ,data ,isSelect)
            local isTrue = self:GetCurrentRecipeOwn(index)
            self:SetGrayFilterStatus(pcell.bgImage , isTrue)
            self:SetGrayFilterStatus(pcell.bgImageBottom , isTrue)
            self:SetGrayFilterStatus(pcell.recipeImage , isTrue)
        end
    end, __G__TRACKBACK__)
    return pcell
end
--[[
   选择选中菜谱的所分的大类
--]]
function TastingTourChooseRecipeMediator:SelectMenuTag(tag)
    -- 代表全部 是不进行分类的
    local viewData = self.viewComponent.viewData
    local preButton = viewData.buttonTable[tostring(self.menuTag)]
    preButton:setNormalImage(_res('ui/union/lobby/guild_btn_channel_default.png'))
    preButton:setSelectedImage(_res('ui/union/lobby/guild_btn_channel_default.png'))
    preButton:setNormalImage(_res('ui/union/lobby/guild_btn_channel_default.png'))
    local currentBtn = viewData.buttonTable[tostring(tag)]
    currentBtn:setNormalImage(_res('ui/union/lobby/guild_btn_channel_select.png'))
    currentBtn:setSelectedImage(_res('ui/union/lobby/guild_btn_channel_select.png'))
    currentBtn:setNormalImage(_res('ui/union/lobby/guild_btn_channel_select.png'))
    self.menuTag = tag
    local sortTable = tastingTourMgr:GetSortRecipeByAttrAndFoodTag(self.styleId, self.kindName[tostring(self.attrTag)]  , self.menuTag) or {}
    viewData.gridView:setCountOfCell(#sortTable)
    self.currentIndex =  1
    self.currentData = sortTable
    viewData.gridView:reloadData()

    self:UpdateRightView()
end

--[[
    设置cell的点击回调事件
--]]
function TastingTourChooseRecipeMediator:SetCellClick(sender)
    local tag = sender:getTag()
    if tag == self.currentIndex then
        return
    end
    local cell = self.viewComponent.viewData.gridView:cellAtIndex(tag-1)
    if cell and (not tolua.isnull(cell)) then
        self.viewComponent:UpdateGridCell(cell, self.currentData[tag], true)

    end
    local preCell = self.viewComponent.viewData.gridView:cellAtIndex(self.currentIndex -1)
    if preCell and (not tolua.isnull(preCell)) then
        self.viewComponent:UpdateGridCell(preCell, self.currentData[self.currentIndex], false)
    end
    self.currentIndex = tag
    self:UpdateRightView()
end
--[[
    更新右侧的菜谱详情的叙述
--]]
function TastingTourChooseRecipeMediator:UpdateRightView()
    local recipeData = self.currentData[self.currentIndex] or {}
    local viewData = self.viewComponent.viewData
    if not  next(recipeData) then
        viewData.attrLayout:setVisible(false)
    else
        viewData.attrLayout:setVisible(true)
    end

    local isTrue = self:GetCurrentRecipeOwn(self.currentIndex)
    self:SetGrayFilterStatus(viewData.recipeImage, isTrue)
    local attrSize = viewData.attrLayout:getContentSize()
    local recipeConfigData = CommonUtils.GetConfigAllMess('recipe','cooking')
    local recipeOneConfig =recipeConfigData[tostring(recipeData.recipeId)] or {}
    if checkint(recipeOneConfig.cookingStyleId) == RECIPE_STYLE.SHI_LUO_CAI_XI then
        -- 失落的菜系没有的时候不能提交也不能制作
        if isTrue then
            viewData.makeBtn:setVisible(true)
            viewData.submitBtn:setVisible(true)
            viewData.makeBtn:setPosition(cc.p(attrSize.width/2 - 95 ,45 ))
            viewData.submitBtn:setPosition(cc.p(attrSize.width/2 +  95 ,45 ))
            display.commonLabelParams(viewData.makeBtn , {text = __('制作') ,  paddingW = 20})
        else
            viewData.makeBtn:setVisible(false)
            viewData.submitBtn:setVisible(false)
        end
    else
        if isTrue then
            viewData.makeBtn:setVisible(true)
            viewData.submitBtn:setVisible(true)
            viewData.makeBtn:setPosition(cc.p(attrSize.width/2 - 95 ,45 ))
            viewData.submitBtn:setPosition(cc.p(attrSize.width/2 +  95 ,45 ))
            display.commonLabelParams(viewData.makeBtn , {text = __('制作') , paddingW = 20})
        else
            viewData.makeBtn:setVisible(true)
            viewData.submitBtn:setVisible(false)
            viewData.makeBtn:setPosition(cc.p(attrSize.width/2  ,45 ))
            display.commonLabelParams(viewData.makeBtn , {text = __('研究') , paddingW = 20})
        end
    end


    local attrRecipeTable = viewData.attrRecipeTable
    local tasteValue      = checkint(recipeData.taste)
    local museFeelValue   = checkint(recipeData.museFeel)
    local fragranceValue  = checkint(recipeData.fragrance)
    local exteriorValue   = checkint(recipeData.exterior)
    display.commonLabelParams(attrRecipeTable.taste, {text = tasteValue})
    display.commonLabelParams(attrRecipeTable.museFeel, {text = museFeelValue})
    display.commonLabelParams(attrRecipeTable.fragrance, {text = fragranceValue})
    display.commonLabelParams(attrRecipeTable.exterior, {text = exteriorValue})
    local recipeConfigData = CommonUtils.GetConfig('goods','goods',recipeData.recipeId) or {}
    local name = recipeConfigData.name or ""
    local descr = recipeConfigData.descr
    viewData.recipeImage:setTexture(CommonUtils.GetGoodsIconPathById(recipeData.recipeId))
    display.commonLabelParams(viewData.recipeName, {text = name , w = 180 ,hAlign = display.TAC  })
    display.commonLabelParams(viewData.recipeDescr, {text = descr})




end
function TastingTourChooseRecipeMediator:GetCurrentRecipeOwn(index)
    local recipeData = self.currentData[index] or {}
    if self.ownRecipeTable[tostring(recipeData.recipeId)] then
        return true
    else
        return false
    end
end
function TastingTourChooseRecipeMediator:SetGrayFilterStatus(node , isTrue)
    if isTrue then
        node:clearFilter()
    else
        node:setFilter(GrayFilter:create())
    end
end


--[[
    更新顶部的按钮界面
--]]
function TastingTourChooseRecipeMediator:UpdateTopView()
    local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
    local questOneConfig = questConfig[tostring(self.questId)]
    local menuTable = {}
    local viewData = self.viewComponent.viewData
    local foodsAttrData = questOneConfig.foodsAttr
    -- 菜品的要求
    local recipeRequirementsData = foodsAttrData[checkint(self.pos)]
    local menuTagConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.MENU_TAG)
    local foodTagConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.FOOD_MATERIALTAG)

    local oneMenuTagConfig = menuTagConfig[ tostring(recipeRequirementsData.foodTagMainType)]
    if oneMenuTagConfig then
        menuTable[#menuTable+1] =string.format(__("【%s】") ,   oneMenuTagConfig.name)
    end
    local attrIndex = recipeRequirementsData.maxFoodAttrId
    local attrNameTable = {
        __('味道') ,
        __('口感') ,
        __('香味') ,
        __('外观')
    }
    print("attrIndex",attrIndex)
    if attrIndex and checkint(attrIndex) > 0 then
        menuTable[#menuTable+1] = string.format(__("【%s达到%s】") , attrNameTable[checkint(attrIndex)] ,tostring(recipeRequirementsData.foodAttrMax ))
    end
    local str = nil
    for i, v in pairs(recipeRequirementsData.foodMaterialTag or {}) do
        local oneFoodTagConfig = foodTagConfig[tostring(v)]
        if oneFoodTagConfig then
            str =  str  and  str  .. "   " .. oneFoodTagConfig.name or  oneFoodTagConfig.name
        end
    end
    if str ~= "" then
        menuTable[#menuTable+1] = string.format(__("【%s】") , str)
    end
    for k, v in pairs(menuTable) do
        local v = viewData.requirementsTable[k]
        v:setVisible(true)
        display.commonLabelParams(v, {text = menuTable[checkint(k)]})
    end
end


-----------------------------------

function TastingTourChooseRecipeMediator:OnRegist()
end

function TastingTourChooseRecipeMediator:OnUnRegist()
    if self.viewComponent and (not tolua.isnull(self.viewComponent)) then
        self.viewComponent:runAction(cc.RemoveSelf:create())
    end
end
return TastingTourChooseRecipeMediator
