---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2018/10/12 3:27 PM
---
---@class AnniversaryChooseBranchTypeView
local AnniversaryChooseBranchTypeView = class('AnniversaryChooseBranchTypeView', function ()
    local node = CLayout:create(display.size)
    node.name = 'Game.views.artifact.AnniversaryChooseBranchTypeView'
    node:setName('AnniversaryChooseBranchTypeView')
    node:enableNodeEvents()
    return node
end)
local anniversaryManager = app.anniversaryMgr
local newLayer = display.newLayer
local CHAPTER_STATUS = {
	NOT_CHOOSE = 0 , --未选择为零
	MAIN_LINE = 1 , -- 1、为主线  大于1为支线
}
---@type Observer
local RES_DICT = {
    ANNI_TASK_BG_CARD_BACK    = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_bg_card_back.png'),
    ANNI_TASK_BG_CARD_SUB     = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_bg_card_sub.png'),
    ANNI_TASK_ICO_AREA_1      = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_ico_area_1.png'),
    ANNI_TASK_ICO_AREA_2      = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_ico_area_2.png'),
    ANNI_TASK_ICO_AREA_3      = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_ico_area_3.png'),
    ANNI_TASK_ICO_AREA_4      = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_ico_area_4.png'),
    ANNI_TASK_ICO_AREA_5      = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_ico_area_5.png'),
    ANNI_TASK_LABEL_INTRO     = app.anniversaryMgr:GetResPath('ui/anniversary/task/anni_task_label_intro.png'),
    DIALOGUE_BG_2             = app.anniversaryMgr:GetResPath('arts/stage/ui/dialogue_bg_2.png'),
    COMMON_BTN_GREEN          = app.anniversaryMgr:GetResPath('ui/common/common_btn_green'),
    COMMON_BTN_ORANGE_DISABLE = app.anniversaryMgr:GetResPath('ui/common/common_btn_orange_disable'),

}
local BRANCH_TYPE_KIND_POS_TABLE   ={
    ['1'] = {
        cc.p(  display.cx ,display.cy)
    },
    ['2'] = {
        cc.p(  507,375)  , cc.p( 826,375)
    },
    ['3'] = {
        cc.p(  346,375)  , cc.p( 666,375),cc.p(  985,375)
    },
    ['4'] = {
        cc.p(  187,375)  , cc.p( 507,375),cc.p(  826,375),cc.p(  1145,375 )
    },
    ['5'] = {
        cc.p(  187,375)  , cc.p( 427,375),cc.p(  666,375),cc.p(  906,375),cc.p(  1145,375 )
    }
}
function AnniversaryChooseBranchTypeView:ctor( param  )
    local view = newLayer(display.cx, display.cy,{ap = display.CENTER, size = display.size})
    self:addChild(view)
    local closeLayer = newLayer(display.cx , display.cy ,{ap = display.CENTER , color = cc.c4b(0,0,0,175) ,enable = true , cb = function()
        if not  self.isAction then
            self.isAction = true
            self:stopAllActions()
            self:removeFromParent()
        else
            if self.openType == 1 then
                self.viewData.animationLayer:stopAllActions()
                self.viewData.animationLayer:setVisible(false)
                self.viewData.cardImage:stopAllActions()
                if self.qavatar  then
                    self.qavatar:setToSetupPose()
                    self.qavatar:stopAllActions()
                    self.qavatar:setVisible(false)
                end
                self.isInterrupt = true
                self:InitUI({openType = 2})
                self.openType = 2
            end
        end
    end })
    view:addChild(closeLayer,2)
    self.viewData =  {
        closeLayer       = closeLayer ,
    }
    self:InitUI(param)
end
function AnniversaryChooseBranchTypeView:InitUI(param)
    param = param or  {}
    local  openType = param.openType or 1
    self.isAction = true
    self.openType = openType
    self.isInterrupt = false
    if openType == 1  then
        local animationTable =   self:CreateAnimationView()
        self.viewData.content        = animationTable.content
        self.viewData.dialogueText   = animationTable.dialogueText
        self.viewData.dialogue       = animationTable.dialogue
        self.viewData.cardImage       = animationTable.cardImage
        self.viewData.animationLayer = animationTable.animationLayer
        self:addChild(animationTable.animationLayer)
    else
        if not self.isInterrupt then
            local cardLayerTable  =   self:CreateFlipCardsLayer()
            self.viewData.cardLayer = cardLayerTable.cardLayer
            self:addChild(cardLayerTable.cardLayer)
            self.viewData.cardLayouts = cardLayerTable.cardLayouts
            self.isInterrupt = true
            self:RunEnterCardsAction()
        end

    end
end
function AnniversaryChooseBranchTypeView:ProcessSignal(signal)
    local name = signal:GetName()
    local data = signal:GetBody()
    if name == POST.ANNIVERSARY_REFRESH_BRANCH_TYPE.sglName then
        local requestData = data.requestData or {}
        local index = requestData.index or 1
        local homeData = anniversaryManager.homeData
        local branchRefresh  = homeData.branchRefresh
        if  not branchRefresh  then
            homeData.branchRefresh = {}
            branchRefresh =  homeData.branchRefresh
        end
        if not  branchRefresh.refresh then
            branchRefresh.refresh = {}
        end
        if checkint(branchRefresh.type) ~= 0   then
            branchRefresh.refresh[#branchRefresh.refresh+1] = branchRefresh.type
        end
        branchRefresh.type = checkint(data.questType)
        self:FlipCardActions(index)
    end
end
function AnniversaryChooseBranchTypeView:CreateAnimationView()
    local animationLayer = display.newLayer(display.cx , display.cy, {ap = display.CENTER })
    local showCardId = "200129_5"
    local changeSkinTable =  app.anniversaryMgr.changeSkinTable
    if changeSkinTable then
        showCardId = changeSkinTable.branchDrawNode
    end
    local cardImage  = AssetsUtils.GetCardDrawNode(showCardId)
    cardImage:setAnchorPoint(display.CENTER)
    cardImage:setPosition(display.cx + 400 , display.cy - 300 )
    animationLayer:addChild(cardImage)
    local dialogue = display.newImageView(RES_DICT.DIALOGUE_BG_2,0,  0, {ap = cc.p(0.5, 0.5)})
    local size = dialogue:getContentSize()
    dialogue:setOpacity(0)
    dialogue:setPosition(size.width/2 , size.height/2)
    local content = display.newLayer(display.cx , display.cy - 200  , { ap = display.CENTER ,  size =cc.size(size.width, size.height)})
    content:addChild(dialogue)
    animationLayer:addChild(content,11)
    local  dialogueText = display.newLabel(dialogue:getContentSize().width/ 2, dialogue:getContentSize().height/ 2,
                                           {text = app.anniversaryMgr:GetDialogText().choiceText, fontSize = 22, color = '#5b3c25', w = 400})
    content:addChild(dialogueText)
    dialogueText:setOpacity(0)
    cardImage:setOpacity(0)
    local cardPos = cc.p(cardImage:getPosition())
    cardImage:setPosition(display.width + 300 , display.cy - 300)
    dialogue:setScale(0.2)
    cardImage:runAction(
            cc.Sequence:create(

                    cc.Spawn:create(
                            cc.Sequence:create(
                                cc.Spawn:create(
                                    cc.EaseSineInOut:create(cc.MoveTo:create(0.34, cardPos ))  ,
                                    cc.FadeIn:create(0.34 )
                                ),
                                cc.DelayTime:create(0.7)
                            ),
                            cc.TargetedAction:create(dialogueText ,
                                 cc.Spawn:create(
                                     cc.Sequence:create(
                                         cc.DelayTime:create(0.4),
                                         cc.Spawn:create(
                                                 TypewriterAction:create( 0.6) ,
                                                 cc.FadeIn:create(0.6)
                                         )

                                     )
                                 )
                            ),
                            cc.TargetedAction:create(dialogue ,
                                 cc.Spawn:create(
                                         cc.Sequence:create(
                                                 cc.DelayTime:create(0.2) ,
                                                 cc.Spawn:create(
                                                         cc.FadeIn:create(0.4) ,
                                                         cc.ScaleTo:create(0.4 , 1)
                                                 ),
                                                 cc.DelayTime:create(0.4)
                                         )
                                 )
                            )
                    ),

                    cc.Sequence:create(
                            cc.DelayTime:create(0.5),
                            cc.CallFunc:create(function()
                                local  qavatar = SpineCache(SpineCacheName.ANNIVERSARY):createWithName(anniversaryManager.spineTable.ANNI_MAIN_CARD)
                                animationLayer:addChild(qavatar )
                                self.qavatar = qavatar
                                qavatar:setPosition(display.cx  -100 , display.cy +30 )
                                qavatar:setAnimation(0, 'anni_main_card', false)
                                local spinecallBack = function()

                                end
                                qavatar:registerSpineEventHandler(spinecallBack, sp.EventType.ANIMATION_COMPLETE)
                                qavatar:runAction(
                                        cc.Sequence:create(
                                            cc.DelayTime:create(3.1),
                                            cc.CallFunc:create(function()
                                                    self.isAction = true
                                                    self:InitUI({openType = 2})
                                                    qavatar:setVisible(false)
                                             end)
                                        )
                                )
                            end),
                            cc.DelayTime:create(0.54)
                    ),
                    cc.CallFunc:create(
                            function()
                                self:AnimationMove()
                            end
                    )
            )

    )
    return {
        animationLayer = animationLayer ,
        content =content ,
        dialogueText = dialogueText ,
        cardImage = cardImage ,
        dialogue = dialogue
    }
end

function AnniversaryChooseBranchTypeView:AnimationMove()
    local content = self.viewData.content
    local cardImage = self.viewData.cardImage
    local dialoguePosX = content:getPositionX()
    cardImage:runAction(
        cc.Sequence:create(
            cc.Spawn:create(
                cc.MoveBy:create(0.4, cc.p(display.width,0  )),
                cc.TargetedAction:create( content ,
                      cc.MoveTo:create(0.4 , cc.p(dialoguePosX , -200) )
                )
            )
        )
    )
end
function AnniversaryChooseBranchTypeView:RunEnterCardsAction()
    local viewData  = self.viewData
    local posTable = BRANCH_TYPE_KIND_POS_TABLE[tostring(#viewData.cardLayouts)]
    for i = 1, #viewData.cardLayouts do
        local pos = anniversaryManager:ConverUIPosToGamePos(posTable[i])
        self:CardAnimationWayOne(viewData.cardLayouts[i] , pos , i )
    end

end
function AnniversaryChooseBranchTypeView:FlipCardActions(index )
    local viewData = self.viewData
    self:stopAllActions()
    self:runAction(
        cc.Sequence:create(
            cc.CallFunc:create(function()
                for i =1 , #viewData.cardLayouts do
                    if i ~= index  then
                        viewData.cardLayouts[i]:stopAllActions()
                        viewData.cardLayouts[i]:runAction(
                            cc.Sequence:create(
                                cc.FadeOut:create(0.2),
                                cc.CallFunc:create(
                                    function()
                                        viewData.cardLayouts[i]:setVisible(false)
                                    end
                                )
                            )
                        )
                    end
                end
            end),
            cc.TargetedAction:create(
                viewData.cardLayouts[index] , cc.Sequence:create(
                    cc.ScaleTo:create(0.15, 1 , 1) ,
                    cc.DelayTime:create(0.25),
                    cc.ScaleTo:create(0.25, 0 , 1) ,
                    cc.CallFunc:create(
                            function()
                                local  branchRefresh = anniversaryManager.homeData.branchRefresh or {}
                                local type = branchRefresh.type or 1
                                self:UpdateImage(viewData.cardLayouts[index] , type )
                            end
                    ),
                    cc.ScaleTo:create(0.25, 1 , 1)

                )
            ) ,
            cc.FadeOut:create(0.5) ,
            cc.CallFunc:create(function()
                self:stopAllActions()
                local mediator =  app:RetrieveMediator('AnniversaryTeamMediator')
                if not mediator then
                    local homeData = anniversaryManager.homeData
                    local branchRefresh =  homeData.branchRefresh
                    local chapterType = branchRefresh.type
                    local chapterId , chapterSort = anniversaryManager:GetNewChapterIdAndChapterSortByType(chapterType)
                    local mediator = require('Game.mediator.anniversary.AnniversaryTeamMediator').new({ chapterType = chapterType , chapterSort = chapterSort ,chapterId = chapterId })
                    app:RegistMediator(mediator)
                end
            end),
            cc.RemoveSelf:create()
        )
    )
end
-- 翻牌
function AnniversaryChooseBranchTypeView:CreateFlipCardsLayer()
    local notChoose =  anniversaryManager:GetNotChooseBranchTable()
    local cardLayer = display.newLayer(display.cx ,display.cy ,{ap = display.CENTER , size = display.size})
    local cardLayouts = {}
    local posTable = BRANCH_TYPE_KIND_POS_TABLE[tostring(table.nums(notChoose))] or { }
    for i = 1 , #posTable do
        local layout = self:CreateCardLayout()
        layout:setPosition(379/2 + display.width , display.height/2  )
        local cardImage = layout:getChildByName("cardImage")
        cardImage:setTag(i)
        cardImage:setOnClickScriptHandler(handler(self, self.CardClick))
        cardLayouts[#cardLayouts+1] = layout
        cardLayer:addChild(layout)
    end
    return   {
        cardLayer = cardLayer ,
        cardLayouts = cardLayouts
    }
end

function AnniversaryChooseBranchTypeView:CardClick(sender)
    local tag = sender:getTag()
    if not  self.isClick  then
        self:SendSignal(tag)
        self.isClick = true
    end


end

function AnniversaryChooseBranchTypeView:CreateCardLayout()
    local cardSize = cc.size(379,500 )
    local cardLayout = display.newLayer(0,0, {ap = display.CENTER , size = cardSize    })
    cardLayout:setScale(0.8)
    local cardImage = display.newImageView(RES_DICT.ANNI_TASK_BG_CARD_BACK , cardSize.width/2 , cardSize.height/2 , {enable = true })
    cardLayout:addChild(cardImage)
    cardImage:setName("cardImage")
    local mapImage =  display.newImageView(RES_DICT.ANNI_TASK_ICO_AREA_1 ,cardSize.width/2 ,cardSize.height/2  )
    cardLayout:addChild(mapImage)
    mapImage:setName('mapImage')
    mapImage:setVisible(false)
    cardLayout:setOpacity(0)
    return cardLayout
end

function AnniversaryChooseBranchTypeView:CardAnimationWayOne(cardLayout , pos ,index   )
    local viewData = self.viewData
    cardLayout:setPositionX (pos.x + display.width )
    cardLayout:runAction(
        cc.Sequence:create(
             cc.DelayTime:create(0.2* (index -1 )),

                 cc.Spawn:create(
                     cc.Sequence:create( cc.FadeIn:create(0.5) ),
                     cc.MoveTo:create(0.5 , pos )
                 )
             ,
             cc.CallFunc:create(function()
                self.isAction = false
                 if #viewData.cardLayouts ==1 then
                     local layout =   viewData.cardLayouts[1]
                     local cardImage = layout:getChildByName("cardImage")
                     self:CardClick(cardImage)
                 elseif  #viewData.cardLayouts == index then
                     local taskLabel = display.newButton(display.cx , display.height/2 - 270 , { n = RES_DICT.ANNI_TASK_LABEL_INTRO})
                     self:addChild(taskLabel)
                     display.commonLabelParams(taskLabel ,fontWithColor(14 , {text = app.anniversaryMgr:GetPoText(__('翻开一张牌，决定游玩的区域')) }))
                 end
                 local isSweep = self:CheckQuickSweep()
                 local path = isSweep and RES_DICT.COMMON_BTN_GREEN or RES_DICT.COMMON_BTN_ORANGE_DISABLE
				 local quickSweepBtn = display.newButton(display.cx +500 , display.height/2 - 270, {
                     scale9 = true ,
					 n = path
				 } )
				 self:addChild(quickSweepBtn)
                 display.commonUIParams(quickSweepBtn , { cb = handler(self, self.QuickSweepClick)})
				 display.commonLabelParams(quickSweepBtn , fontWithColor(14, {text = app.anniversaryMgr:GetPoText(__('超级快速')), paddingW = 20 }))
            end)
        )
    )
end

function AnniversaryChooseBranchTypeView:QuickSweepClick()
	local isSweep = self:CheckQuickSweep()
    local view = require("Game.views.anniversary.AnniversarySweepQuestView").new({
        isQuickSweep = true ,
        isCanQuickSweep = isSweep ,
        chapterType = 2
    })
    view:setPosition(display.center)
    app.uiMgr:GetCurrentScene():AddDialog(view)
end
----=======================----
--@author : xingweihao
--@date : 2019/10/9 5:10 PM
--@Description 检测是否可以进行超级扫荡
--@params
--@return
---=======================----
function AnniversaryChooseBranchTypeView:CheckQuickSweep()
	local homeData          = app.anniversaryMgr:GetHomeData()
	local chapters          = homeData.chapters
	local parserConfig      = app.anniversaryMgr:GetConfigParse()
	local chapterSortConfig = app.anniversaryMgr:GetConfigDataByName(parserConfig.TYPE.CHAPTER_SORT)
	local sortMaxTable = {}
	for chapterType, chapterTable in pairs(chapterSortConfig) do
		if checkint(chapterType) ~= CHAPTER_STATUS.MAIN_LINE then
			local count = table.nums(chapterTable)
			local maxQuestId = chapterTable[tostring(count)]
			sortMaxTable[tostring(chapterType)] = checkint(maxQuestId)
		end
	end
	local isSweep = true
	for chapterType, maxQuestId in pairs(sortMaxTable) do
		if checkint(chapters[tostring(chapterType)]) ~= maxQuestId  then
			isSweep = false
		end
	end
	return isSweep
end
function AnniversaryChooseBranchTypeView:UpdateImage(cardLayout ,chapterType)
    local cardImage = cardLayout:getChildByName("cardImage")
    local mapImage = cardLayout:getChildByName("mapImage")
    cardImage:setTexture(RES_DICT.ANNI_TASK_BG_CARD_SUB)

    local chapterId , chapterSort = anniversaryManager:GetNewChapterIdAndChapterSortByType(chapterType)
    local parserConfig = anniversaryManager:GetConfigParse()
    local chapterConfig = anniversaryManager:GetConfigDataByName(parserConfig.TYPE.CHAPTER)
    local chapterOneConfig = chapterConfig[tostring(chapterId or 1)]
    local mapId  =  chapterOneConfig.map
    mapImage:setTexture(RES_DICT["ANNI_TASK_ICO_AREA_" ..mapId ])
    mapImage:setVisible(true)
end
function AnniversaryChooseBranchTypeView:SendSignal(index)
    app:DispatchSignal(POST.ANNIVERSARY_REFRESH_BRANCH_TYPE.cmdName ,{ index = index })
end
function AnniversaryChooseBranchTypeView:onEnter()
    regPost(POST.ANNIVERSARY_REFRESH_BRANCH_TYPE)
    app:RegistObserver(POST.ANNIVERSARY_REFRESH_BRANCH_TYPE.sglName , mvc.Observer.new(self.ProcessSignal, self))
end
function AnniversaryChooseBranchTypeView:onCleanup()
    unregPost(POST.ANNIVERSARY_REFRESH_BRANCH_TYPE)
    app:UnRegistObserver(POST.ANNIVERSARY_REFRESH_BRANCH_TYPE.sglName ,self)
end
return AnniversaryChooseBranchTypeView
