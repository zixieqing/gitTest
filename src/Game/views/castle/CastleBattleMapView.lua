---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 2019/3/1 4:28 PM
---
local GameScene = require('Frame.GameScene')
---@class CastleBattleMapView
local CastleBattleMapView = class('CastleBattleMapView', GameScene)
local GoodPurchaseNode = require('common.GoodPurchaseNode')
local newImageView = display.newImageView
local newLabel = display.newLabel
local newNSprite = display.newNSprite
local newButton = display.newButton
local newLayer = display.newLayer
local RES_DICT = {
    COMMON_BTN_TIPS               = app.activityMgr:CastleResEx('ui/common/common_btn_tips.png'),
    CASTLE_MAIN_BTN_ENTER         = app.activityMgr:CastleResEx('ui/castle/main/castle_main_btn_enter.png'),
    COMMON_TITLE                  = app.activityMgr:CastleResEx('ui/common/common_title.png'),
    CASTLE_MAP_ICO_2              = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_ico_2.png'),
    CASTLE_MAP_ICO_1              = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_ico_1.png'),
    CASTLE_MAP_ICO_3              = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_ico_3.png'),
    GOODS_ICON_121001             = app.activityMgr:CastleResEx('arts/goods/goods_icon_121001.png'),
    COMMON_BTN_BACK               = app.activityMgr:CastleResEx('ui/common/common_btn_back.png'),
    CASTLE_MAP_LABEL_TITLE        = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_label_title.png'),
    CASTLE_MAP_BG                 = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_bg.png'),
    CASTLE_MAP_BATTLE_LINE_1      = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_battle_line_1.png'),
    CASTLE_MAP_ICO_4              = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_ico_4.png'),
    CASTLE_MAP_BG_CORNER          = app.activityMgr:CastleResEx('ui/castle/battleMaps/castle_map_bg_corner.png'),
}
local MODULETAG = {
    MODULE_IMAGE  = 1001 ,
    MODULE_NAME  = 1002 ,
    RICH_LABEL = 1003,
    NAME_BG_IMAGE  = 1004,
}
function CastleBattleMapView:ctor(params )
    GameScene.ctor(self,'views.castle.CastleBattleMapView')
    local params = params or {}
    self.callback = params.callback
    self:InitUI()
end

function CastleBattleMapView:InitUI(  )

    local view = newLayer(display.cx, display.cy,{ap = display.CENTER, size = display.size})
    local bgImage = newNSprite(RES_DICT.CASTLE_MAP_BG, display.cx , display.cy ,
                               { ap = display.CENTER, tag = 795 })
    bgImage:setScale(1, 1)
    self:addChild(view)
    view:addChild(bgImage)
    --bgImage:setOpacity(125)

    --local swallowLayer = display.newLayer(display.cx , display.cy , { ap = display.CENTER, color = cc.c4b(0,0,0,0) , enable = true })
    --view:addChild(swallowLayer)

    local rightBottomLayout = newLayer(1399, 0,
                                       { ap = display.LEFT_BOTTOM, size = cc.size(473, 165) })
    rightBottomLayout:setPosition(display.SAFE_L -65, 0)
    view:addChild(rightBottomLayout)

    local corner_2 = newNSprite(RES_DICT.CASTLE_MAP_BG_CORNER, 0, 0,
                                { ap = display.LEFT_BOTTOM, tag = 769 })
    corner_2:setScale(1, 1)
    rightBottomLayout:addChild(corner_2)

    local goodsOneImage = newImageView(RES_DICT.GOODS_ICON_121001, 135, 83,
                                       { ap = cc.p(0.494600 ,0.448200) , scale = 0.7 ,tag = 772, enable = true  })
    rightBottomLayout:addChild(goodsOneImage)

    local goodsOneNum = newLabel(135, 17,
                                 fontWithColor(14,{ ap = display.CENTER, color = '#ffffff', text = "", fontSize = 24, tag = 771 }))
    rightBottomLayout:addChild(goodsOneNum)

    local goodsTwoImage = newImageView(RES_DICT.GOODS_ICON_121001, 325, 83,
                                       { ap = display.CENTER, tag = 774,scale = 0.7 , enable = true })
    rightBottomLayout:addChild(goodsTwoImage)

    local goodsTwoNum = newLabel(325, 17,
                                 fontWithColor(14,{ ap = display.CENTER, color = '#ffffff', text = "", fontSize = 24, tag = 773 }))
    rightBottomLayout:addChild(goodsTwoNum)
    rightBottomLayout:setVisible(false)

    local moudleTwoLayout = newLayer(781, 153,
                                     { ap = display.CENTER, color = cc.r4b(0), size = cc.size(300, 250), enable = true })
    view:addChild(moudleTwoLayout)

    local moduleTwoImage = FilteredSpriteWithOne:create(RES_DICT.CASTLE_MAP_ICO_1)
    moduleTwoImage:setPosition(150, 125)
    moduleTwoImage:setScale(1, 1)
    moduleTwoImage:setTag(MODULETAG.MODULE_IMAGE)
    moudleTwoLayout:addChild(moduleTwoImage)

    local labelTwoTitle = newNSprite(RES_DICT.CASTLE_MAP_LABEL_TITLE, 150, 29,
                                     { ap = display.CENTER, tag = 782 })
    labelTwoTitle:setScale(1, 1)
    labelTwoTitle:setTag(MODULETAG.NAME_BG_IMAGE)
    moudleTwoLayout:addChild(labelTwoTitle)

    local line2 = newNSprite(RES_DICT.CASTLE_MAP_BATTLE_LINE_1, 154, 31,
                             { ap = display.CENTER, tag = 783 })
    line2:setScale(1, 1)
    moudleTwoLayout:addChild(line2)

    local moduleTwoName = newLabel(154, 54,
                                   fontWithColor(14,{ fontSize = 28, outline = '#420505', outlineSize = 2, ap = display.CENTER, color = '#ffffff', text ="", tag = MODULETAG.MODULE_NAME }))
    moudleTwoLayout:addChild(moduleTwoName)

    local moudleThreeLayout = newLayer(902, 380,
                                       { ap = display.CENTER, color = cc.r4b(0), size = cc.size(300, 250), enable = true })
    view:addChild(moudleThreeLayout)

    local moduleThreeImage = FilteredSpriteWithOne:create(RES_DICT.CASTLE_MAP_ICO_3)
    moduleThreeImage:setPosition(150, 131)
    moduleThreeImage:setTag(MODULETAG.MODULE_IMAGE)
    moduleThreeImage:setScale(1, 1)

    moudleThreeLayout:addChild(moduleThreeImage)

    local labelThreeTitle = newNSprite(RES_DICT.CASTLE_MAP_LABEL_TITLE, 150, -5,
                                       { ap = display.CENTER, tag = 787 })
    labelThreeTitle:setScale(1, 1)
    labelThreeTitle:setTag(MODULETAG.NAME_BG_IMAGE)
    moudleThreeLayout:addChild(labelThreeTitle)

    local line3 = newNSprite(RES_DICT.CASTLE_MAP_BATTLE_LINE_1, 154, 1,
                             { ap = display.CENTER, tag = 788 })
    line3:setScale(1, 1)
    moudleThreeLayout:addChild(line3)

    local moduleThreeName = newLabel(154, 18,
                                     fontWithColor(14,{fontSize = 28, outline = '#420505', outlineSize = 2, ap = display.CENTER, color = '#ffffff', text = "", tag = MODULETAG.MODULE_NAME }))
    moudleThreeLayout:addChild(moduleThreeName)

    local moudleFourLayout = newLayer(1168, 476,
                                      fontWithColor(14,{ ap = display.CENTER, color = cc.r4b(0), size = cc.size(300, 250), enable = true }))
    view:addChild(moudleFourLayout)

    local moduleFourImage =FilteredSpriteWithOne:create(RES_DICT.CASTLE_MAP_ICO_4)
    moduleFourImage:setPosition(150, 131)
    moduleFourImage:setTag(MODULETAG.MODULE_IMAGE)
    moduleFourImage:setScale(1, 1)
    moudleFourLayout:addChild(moduleFourImage)

    local labelFourTitle = newNSprite(RES_DICT.CASTLE_MAP_LABEL_TITLE, 150, 31,
                                      { ap = display.CENTER, tag = 792 })
    labelFourTitle:setScale(1, 1)
    labelFourTitle:setTag(MODULETAG.NAME_BG_IMAGE)
    moudleFourLayout:addChild(labelFourTitle)

    local line4 = newNSprite(RES_DICT.CASTLE_MAP_BATTLE_LINE_1, 154, 35,
                             { ap = display.CENTER, tag = 793 })
    line4:setScale(1, 1)
    moudleFourLayout:addChild(line4)

    local moduleFourName = newLabel(154, 54,
                                 fontWithColor(  14, { fontSize = 28, outline = '#420505', outlineSize = 2,ap = display.CENTER, color = '#ffffff', text = "",  tag = MODULETAG.MODULE_NAME }))
    moudleFourLayout:addChild(moduleFourName)

    local moudleOneLayout = newLayer(345, 368,
                                     { ap = display.CENTER, color = cc.r4b(0), size = cc.size(300, 250), enable = true })
    view:addChild(moudleOneLayout)
    local moduleOneImage =FilteredSpriteWithOne:create(RES_DICT.CASTLE_MAP_ICO_2)
    moduleOneImage:setPosition(167, 129)
    moduleOneImage:setTag(MODULETAG.MODULE_IMAGE)
    moduleOneImage:setScale(1, 1)
    moudleOneLayout:addChild(moduleOneImage)

    local labelTitle = newNSprite(RES_DICT.CASTLE_MAP_LABEL_TITLE, 150, 31,
                                  { ap = display.CENTER })
    labelTitle:setScale(1, 1)
    labelTitle:setTag(MODULETAG.NAME_BG_IMAGE)
    moudleOneLayout:addChild(labelTitle)

    local line1 = newNSprite(RES_DICT.CASTLE_MAP_BATTLE_LINE_1, 154, 32,
                             { ap = display.CENTER, tag = 777 })
    line1:setScale(1, 1)
    moudleOneLayout:addChild(line1)

    local moduleOneName = newLabel(154, 54,
                                   fontWithColor(14,{ ap = display.CENTER, color = '#ffffff', text = "", fontSize = 28, outline = '#420505', outlineSize = 2, tag = MODULETAG.MODULE_NAME }))
    moudleOneLayout:addChild(moduleOneName)

    local backBtn = newButton(59, 695, { ap = display.CENTER ,  n = RES_DICT.COMMON_BTN_BACK, d = RES_DICT.COMMON_BTN_BACK, s = RES_DICT.COMMON_BTN_BACK, scale9 = true, size = cc.size(90, 70), tag = 796 })
    display.commonLabelParams(backBtn, {text = "", fontSize = 14, color = '#414146'})
    backBtn:setPosition(display.SAFE_L + 59, display.height + -55)
    view:addChild(backBtn)
    local iconData = { }
    ---@type SpringActivityConfigParser
    local SpringActivityConfigParser = require('Game.Datas.Parser.SpringActivityConfigParser').new()
    local goodTopConfig = CommonUtils.GetConfigAllMess(SpringActivityConfigParser.TYPE.GOODS_TOP_SHOW , "springActivity")
    for id , goodsData in pairs(goodTopConfig) do
        iconData[checkint(id)] = checkint(goodsData.goodsId)
    end
    local cellSize = cc.size(190,40)

    local len = #iconData
    local  topSize = cc.size(cellSize.width * len + 20 ,cellSize.height)
    local topLayout = display.newLayer( display.SAFE_R,display.height, { ap = display.RIGHT_TOP , size =  topSize})
    view:addChild(topLayout)
    local imageImage = display.newImageView(app.activityMgr:CastleResEx('ui/home/nmain/main_bg_money.png'),topSize.width/2,topSize.height/2,{enable = false,
                                                                                                                      scale9 = true, size = cc.size(topSize.width + 60, 54)})
    topLayout:addChild(imageImage)

    local purchaseNodes = {}
    for k ,v  in pairs(iconData) do
        local purchaseNode = GoodPurchaseNode.new({id = v , isEnableGain = true , animate = true  })
        purchaseNode:updataUi(checkint(v))
        purchaseNode:setPosition(cc.p(cellSize.width * (k -0.5) , cellSize.height/2 ))
        topLayout:addChild(purchaseNode,10)
        purchaseNode.viewData.touchBg:setTag(checkint(v))
        purchaseNodes[tostring(k)] = purchaseNode
    end
    local moduleDatas = {}
    moduleDatas[#moduleDatas+1] = moudleOneLayout
    moduleDatas[#moduleDatas+1] = moudleTwoLayout
    moduleDatas[#moduleDatas+1] = moudleThreeLayout
    moduleDatas[#moduleDatas+1] = moudleFourLayout
    local moduleTable = app.activityMgr:GetCastleIconPosTable()
    moudleOneLayout:setPosition(moduleTable[1])
    moudleTwoLayout:setPosition(moduleTable[2])
    moudleThreeLayout:setPosition(moduleTable[3])
    moudleFourLayout:setPosition(moduleTable[4])
    moudleThreeLayout:setLocalZOrder(11)
    moudleOneLayout:setLocalZOrder(11)
    for i, v in pairs(moduleDatas) do
        moduleDatas[i]:setVisible(false)
    end
    moudleOneLayout:setAnchorPoint(display.CENTER)
    moudleTwoLayout:setAnchorPoint(display.CENTER)
    moudleThreeLayout:setAnchorPoint(display.CENTER)
    moudleFourLayout:setAnchorPoint(display.CENTER)
    for i = 1, #moduleDatas do
        moduleDatas[i]:setTag(i)
        local yPos = 18
        if  i == 3  then
            yPos = -18
        end
        local richLabel = display.newRichLabel(150 , yPos, { c = {
            fontWithColor(14, {text = 111}),
            {img = CommonUtils.GetGoodsIconPathById(DIAMOND_ID) , scale = 0.2}
        }})
        richLabel:setTag(MODULETAG.RICH_LABEL)
        moduleDatas[i]:addChild(richLabel)
    end
    --for i, v in ipairs(moduleDatas) do
    --    local moduleImage =v:getChildByTag(MODULETAG.MODULE_IMAGE)
    --    local richLabel  =v:getChildByTag(MODULETAG.RICH_LABEL)
    --    local nameLabel  =v:getChildByTag(MODULETAG.MODULE_NAME)
    --    local nameBg  =v:getChildByTag(MODULETAG.NAME_BG_IMAGE)
    --    moduleImage:setOpacity(125)
    --    richLabel:setOpacity(125)
    --    nameLabel:setOpacity(125)
    --    nameBg:setOpacity(125)
    --end
    local tabNameLabel = display.newButton(97, 744, { ap = display.LEFT_TOP ,  n = RES_DICT.COMMON_TITLE, d = RES_DICT.COMMON_TITLE, s = RES_DICT.COMMON_TITLE, scale9 = true, size = cc.size(303, 78) })
    display.commonLabelParams(tabNameLabel, {text = "" , fontSize = 14, color = '#414146'})
    tabNameLabel:setPosition(display.SAFE_L + 130, display.size.height)
    view:addChild(tabNameLabel ,101)

    local moduleName = display.newLabel(138 -15, 30,
                                        fontWithColor('14' , { outline = false ,  ap = display.CENTER, color = '#5b3c25', text =  app.activityMgr:GetCastleText(__("古堡迷踪")), fontSize = 30, tag = 71  , reqW= 190  }))
    tabNameLabel:addChild(moduleName)

    local tipButton = display.newNSprite(RES_DICT.COMMON_BTN_TIPS, 237, 30,
                                         { ap = display.CENTER, tag = 72 })
    tipButton:setScale(1, 1)
    tabNameLabel:addChild(tipButton)
    local tabNameLabelPos = cc.p(tabNameLabel:getPosition())
    tabNameLabel:setPositionY(display.height + 100)
    local action = cc.EaseBounceOut:create(cc.MoveTo:create(1, tabNameLabelPos))
    tabNameLabel:runAction( action )
    self.viewData =  {
        bgImage                 = bgImage,
        rightBottomLayout       = rightBottomLayout,
        corner_2                = corner_2,
        goodsOneImage           = goodsOneImage,
        goodsOneNum             = goodsOneNum,
        goodsTwoImage           = goodsTwoImage,
        goodsTwoNum             = goodsTwoNum,
        ----------------------2------------------------
        moudleTwoLayout         = moudleTwoLayout,
        moduleTwoImage          = moduleTwoImage,
        labelTwoTitle           = labelTwoTitle,
        line2                   = line2,
        moduleTwoName           = moduleTwoName,
        ----------------------3------------------------
        moudleThreeLayout       = moudleThreeLayout,
        moduleThreeImage        = moduleThreeImage,
        labelThreeTitle         = labelThreeTitle,
        line3                   = line3,
        moduleThreeName         = moduleThreeName,
        ----------------------4------------------------
        moudleFourLayout        = moudleFourLayout,
        moduleFourImage         = moduleFourImage,
        labelFourTitle          = labelFourTitle,
        line4                   = line4,
        moduleFourName          = moduleFourName,
        ----------------------1------------------------
        moudleOneLayout         = moudleOneLayout,
        moduleOneImage          = moduleOneImage,
        labelTitle              = labelTitle,
        line1                   = line1,
        moduleOneName           = moduleOneName,
        backBtn                 = backBtn,
        moduleDatas             = moduleDatas,
        purchaseNodes           = purchaseNodes,
        tabNameLabel            = tabNameLabel
    }
end
--==============================--
---@Description: isUnlockTable
---@author : xingweihao
---@date : 2019/3/12 4:07 PM
--==============================--

function CastleBattleMapView:UpdateQusetTypeModule(isUnlockTable)
    ---@type SpringActivityConfigParser
    local SpringActivityConfigParser = require('Game.Datas.Parser.SpringActivityConfigParser').new()
    local questTypeConfig  = CommonUtils.GetConfigAllMess(SpringActivityConfigParser.TYPE.QUEST_TYPE , "springActivity")
    for i = 1, #self.viewData.moduleDatas do
        local moduleLayout = self.viewData.moduleDatas[i]
        moduleLayout:setVisible(true)
        local moduleImage     = moduleLayout:getChildByTag(MODULETAG.MODULE_IMAGE)
        local moduleName      = moduleLayout:getChildByTag(MODULETAG.MODULE_NAME)
        local moduleRichLabel = moduleLayout:getChildByTag(MODULETAG.RICH_LABEL)
        local moduleData = questTypeConfig[tostring(i)]
        display.commonUIParams(moduleLayout , {cb = function(sender)
            self.callback(sender)
        end})
        moduleImage:setTexture(app.activityMgr:CastleResEx(string.format('ui/castle/battleMaps/castle_map_ico_%d.png', checkint(moduleData.iconId) ) ))
        display.commonLabelParams(moduleName , {text =moduleData.name })
        if isUnlockTable[tostring(i)] then
            moduleImage:clearFilter()
        else
            moduleImage:setFilter(GrayFilter:create())
        end
        for index , goodsData  in pairs(moduleData.consume) do
            if index <=2  then
                display.reloadRichLabel(moduleRichLabel , {  c= {
                    {text = app.activityMgr:GetCastleText(__('需要')) , color = '#ffd679', fontSize = 22  },
                    {text =  goodsData.num , color = '#ffffff'  , fontSize = 22 },
                    {img = CommonUtils.GetGoodsIconPathById(goodsData.goodsId) , scale = 0.2 , ap = cc.p(0, 0.1 )}
                }})
            else
                display.reloadRichLabel(moduleRichLabel , {  c= {
                    {text = app.activityMgr:GetCastleText(__('需要')) , color = '#ffd679' , fontSize = 22  },
                    {text =  goodsData.num , color = '#ff6161', fontSize = 22   },
                    {img = CommonUtils.GetGoodsIconPathById(goodsData.goodsId) , scale = 0.2 , ap = cc.p(0, 0.1 ) }
                }})
            end

        end
    end
end
function CastleBattleMapView:UpdateTopUI()
    ---@type SpringActivityConfigParser
    local SpringActivityConfigParser = require('Game.Datas.Parser.SpringActivityConfigParser').new()
    local goodTopConfig = CommonUtils.GetConfigAllMess(SpringActivityConfigParser.TYPE.GOODS_TOP_SHOW , "springActivity")
    for i = 1, table.nums(self.viewData.purchaseNodes) do
        self.viewData.purchaseNodes[tostring(i)]:RefershUI(goodTopConfig[tostring(i)].goodsId)
    end
end
function CastleBattleMapView:UpdateBottomUI()
    self.viewData.rightBottomLayout:setVisible(true)
    ---@type SpringActivityConfigParser
    local SpringActivityConfigParser = require('Game.Datas.Parser.SpringActivityConfigParser').new()
    local goodBottomConfig = CommonUtils.GetConfigAllMess(SpringActivityConfigParser.TYPE.GOODS_BOTTOM_RIGHT_SHOW , "springActivity")
    local bottomTable ={
        {goodsImg = self.viewData.goodsOneImage , goodsNum = self.viewData.goodsOneNum  } ,
        {goodsImg = self.viewData.goodsTwoImage , goodsNum = self.viewData.goodsTwoNum  }
    }
    for i, bottomGoods in pairs(bottomTable) do
        i = tostring(i)
        bottomGoods.goodsImg:setTexture( CommonUtils.GetGoodsIconPathById(goodBottomConfig[ i].goodsId))
        display.commonLabelParams(bottomGoods.goodsNum, {text = CommonUtils.GetCacheProductNum(goodBottomConfig[i].goodsId)})
        bottomGoods.goodsImg:setTouchEnabled(true)
        display.commonUIParams(bottomGoods.goodsImg , { animate = false ,
            cb = function ()
                app.uiMgr:AddDialog("common.GainPopup", {goodId = goodBottomConfig[ i].goodsId})
            end
        } ) 
    end
end
function CastleBattleMapView:EnterAction()
    local moduleDatas = self.viewData.moduleDatas
    local getTargetAction = function( node )
        local targetAction = cc.TargetedAction:create(
                node , cc.FadeIn:create(0.2)
        )
        return targetAction
    end
    local spawnTable = {}
    for i, v in ipairs(moduleDatas) do
        local moduleImage =v:getChildByTag(MODULETAG.MODULE_IMAGE)
        local richLabel  =v:getChildByTag(MODULETAG.RICH_LABEL)
        local nameLabel  =v:getChildByTag(MODULETAG.MODULE_NAME)
        local nameBg  =v:getChildByTag(MODULETAG.NAME_BG_IMAGE)
        spawnTable[#spawnTable+1] = getTargetAction(moduleImage)
        spawnTable[#spawnTable+1] = getTargetAction(richLabel)
        spawnTable[#spawnTable+1] = getTargetAction(nameLabel)
        spawnTable[#spawnTable+1] = getTargetAction(nameBg)

    end
    spawnTable[#spawnTable+1] = getTargetAction(self.viewData.bgImage)
    self:runAction(
            cc.Spawn:create(spawnTable)
    )
end
return CastleBattleMapView
