---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by xingweihao.
--- DateTime: 27/02/2018 7:14 PM
---

local Mediator = mvc.Mediator
local NAME = "TastingTourLobbyMediator"
---@class TastingTourLobbyMediator :Mediator
local TastingTourLobbyMediator = class(NAME, Mediator)
---@type UIManager
local uiMgr = AppFacade.GetInstance():GetManager("UIManager")
---@type TastingTourManager
local tastingTourMgr = AppFacade.GetInstance():GetManager("TastingTourManager")
local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
---@type GameManager
local gameMgr = AppFacade.GetInstance():GetManager("GameManager")
-- avatarMediator 作用导入全局变量 不能删除
local avatarMediator = require("Game.mediator.AvatarMediator")

local AvatarBaseNode   = require('common.RestaurantAvatarNode')
local AvatarDragNode   = require('Game.views.restaurant.DragNode')
local SPINE_ANIMATION_NAME  = {
    ["0"] = 'idle',
    ["1"]  = 'idle1',
    ["2"]  = 'idle2',
    ["3"]  = 'idle3',
    ["4"]  = 'idle4',
    ["6"]  = 'play',
}

--[[
    {
        zoneId = 1
    }
--]]
local DISH_POS  =  {
    ['1'] = {
        {374,104}
    },
    ["2"] ={
        {283,106},
        {457,115}
    },
    ["3"] ={
        {180,135},
        {374,104},
        {584,140}
    },
    ["4"] ={
        {119,156},
        {283,106},
        {457,115},
        {624,178}
    }
}
local  BUTTON_CLICK = {
    REVIEW_BTN       = 1001, -- 回顾
    COMMENTS_BTN     = 1002, -- 评论按钮
    SUBMIT_BTN       = 1003, -- 提交按钮
    BEST_COMPENT_BTN = 1004, -- 小本本按钮
    BACK_BTN         = 1005, -- 返回按钮
    CLOSE_BTN        = 1006, -- 关闭按钮
    TIP_BTN          = 1007, -- 提示按钮
    SWITCH_ASSISTANT = 1008  -- 切换助手的提示
}
function TastingTourLobbyMediator:ctor(params, viewComponent )
    self.super:ctor(NAME,viewComponent)
    params = params or {}
    self.currentStageId = params.stageId or 1 -- 当前的大关卡的id
    self.currentStarNum = nil
    self.currentZone =  params.zoneId or 1    -- 当前的区域
    self.currentAssistantId = nil   --  当前要用的助手
    self.recipePosTable = {0,0,0,0} --  记录所上的菜
    self.questMediator = nil
    self.currentQuestId = nil        --  当前的关卡id
    self.currentGroupId = nil
    self.submitRecipeNum = 0        --  提交菜品所需要上交菜品的数量
    self.isAction = false
    self.isNext = true
end
--[[
    获取到要上菜的数量上限
--]]
function TastingTourLobbyMediator:GetSubmitNum()
    local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
    local quetOneConfig = questConfig[tostring(self.currentQuestId)]
    if quetOneConfig then
        local foodAttr = quetOneConfig.foodsAttr
        return table.nums(foodAttr)
    end
end

function TastingTourLobbyMediator:InterestSignals()
    local signals = {
        SGL.SWITCH_ASSIATANT_EVENT ,
        SGL.SUBMIT_THE_DISHES_EVENT ,
        SGL.SEND_CURRENT_QUEST_INFO_EVENT ,
        POST.CUISINE_GET_GROUP_REWARDS.sglName,
        POST.CUISINE_QUESTSECRET.sglName,
        POST.CUISINE_ACCELERATERATER.sglName ,
        SGL.SEND_QUEST_COMMENT_EVENT ,
        SGL.SEND_KEEP_ON_QUEST_EVENT ,
        SGL.LOOK_CUISINE_SECRET_EVENT ,
        COUNT_DOWN_ACTION_UI_ACTION_TASTING_TOUR_QUEST , 
        POST.CUISINE_GRADE.sglName
    }
    return signals
end


function TastingTourLobbyMediator:ProcessSignal(signal)
    local name = signal:GetName()
    local body = signal:GetBody() or {}
    --- 领取奖励接口
    if name == SGL.SWITCH_ASSIATANT_EVENT then  -- 切换助手的界面信息
        local assistantId = body.assistantId    -- 助手id
        self.currentAssistantId = assistantId
        -- 更新助手的状态
        self:UpdateAssistantStatus()
        self:RunMoodAnimation(self:GetQuestJudgeMoodGrade())
        self:UpdateSubmitButton()
        local nextPos = self:GetServingRecipePos()
        if  nextPos ~= 0  then
            uiMgr:ShowInformationTips(__('请添加菜品'))
            return
        end
    elseif name == SGL.SUBMIT_THE_DISHES_EVENT then -- 提交菜品的事件
        local recipeId = body.recipeId
        local pos = body.pos
        local isServing = self:CheckRecipeIdIsServingByRecipeId(recipeId)
        if isServing then
            uiMgr:ShowInformationTips(__('已经存在了相同的菜谱'))
            return
        end
        self.recipePosTable[pos] = recipeId
        local nextPos = self:GetServingRecipePos()
        self:UpdateDishRecipeImageByPos(pos)
        self:UpdateSubmitButton()
        if nextPos == 0  then
            if checkint(self.currentAssistantId) > 0 then
            else
                uiMgr:ShowInformationTips(__('菜品齐全，请添加厨师'))
            end
            return
        end
        -- 发送一下关卡的获取的信息
    elseif name == SGL.SEND_CURRENT_QUEST_INFO_EVENT then
        local  questId = body.questId
        self.isNext = true
        if checkint(questId) > 0 then
            self.currentQuestId =  questId
            self.currentAssistantId = nil
            self.recipePosTable = { 0,0,0,0}
            self:IsVisibleBestCompentBtn()
            self:UpdateDialogAction(self:GetCurrentQuestState())
            local groupId =questConfig[tostring(questId)].groupId
            if groupId  then
                if self.currentGroupId == nil then
                    local height = display.height/2+ 400
                    local width = 944/2
                    local requirementLayout =  self.viewComponent.viewData.requirementLayout
                    requirementLayout:setPosition(cc.p(width , height))
                    self.currentGroupId = groupId
                    local num = 1.5
                    requirementLayout:runAction(
                        cc.Sequence:create(
                            cc.CallFunc:create(function()
                                self.isAction = true
                                self.submitRecipeNum = self:GetSubmitNum()

                                self:CreateJudage()
                                self:ReloadDishPos()
                                self:UpdateAssistantStatus()
                                self:RunMoodAnimation(self:GetQuestJudgeMoodGrade())
                                self:CreateDesk()
                                self:UpdateSubmitButton()
                                for k ,v in pairs(self.recipePosTable) do
                                    self:UpdateDishRecipeImageByPos(k)
                                end
                            end),
                            cc.EaseSineOut:create(cc.MoveTo:create(1.2/num,  cc.p(width , display.height/2+ 28.89 ) )),
                            cc.EaseSineIn:create(cc.MoveTo:create(1/3,  cc.p(width , display.height/2+ 33.49 ) )),
                            cc.EaseSineInOut:create(cc.MoveTo:create(1/3,  cc.p(width , display.height/2+ 37.04) )),
                            cc.CallFunc:create(function()
                                self.isAction = false
                            end)
                        )
                    )
                else
                    if checkint(self.currentGroupId) ~= checkint(groupId) then
                        self.currentGroupId = groupId
                        local height = display.height/2+ 37.04
                        local width = 944/2
                        local requirementLayout =  self.viewComponent.viewData.requirementLayout
                        requirementLayout:setPosition(cc.p(width , height))
                        local requirementLayout =  self.viewComponent.viewData.requirementLayout
                        requirementLayout:setPosition(cc.p(width , height))
                        local num = 1
                        requirementLayout:runAction(
                                cc.Sequence:create(
                                        cc.CallFunc:create(function()
                                            self.isAction = true
                                        end),
                                        cc.EaseSineInOut:create(cc.MoveTo:create(1/num,  cc.p(width , display.height/2 + 122.23 ) )),
                                        cc.MoveTo:create(5/30/num,  cc.p(width , display.height/2+ 117.73 ) ),
                                        cc.DelayTime:create(5/30/num),
                                        cc.EaseSineIn:create(cc.MoveTo:create(1/3/num,  cc.p(width , display.height/2+ 682 ) )),
                                        cc.CallFunc:create(function()
                                            local height = display.height/2+ 690
                                            local width = 944/2
                                            local requirementLayout =  self.viewComponent.viewData.requirementLayout
                                            requirementLayout:setPosition(cc.p(width , height))
                                            self.submitRecipeNum = self:GetSubmitNum()

                                            self:CreateJudage()
                                            self:ReloadDishPos()
                                            self:UpdateAssistantStatus()
                                            self:RunMoodAnimation(self:GetQuestJudgeMoodGrade())
                                            self:CreateDesk()
                                            self:UpdateSubmitButton()
                                            for k ,v in pairs(self.recipePosTable) do
                                                self:UpdateDishRecipeImageByPos(k)
                                            end
                                        end),
                                        cc.DelayTime:create(0.5),
                                        cc.EaseSineOut:create(cc.MoveTo:create(1.2/1.5,  cc.p(width , display.height/2+ 28.89 ) )),
                                        cc.EaseSineIn:create(cc.MoveTo:create(1/3,  cc.p(width , display.height/2+ 33.49 ) )),
                                        cc.EaseSineInOut:create(cc.MoveTo:create(1/3,  cc.p(width , display.height/2+ 37.04) )),
                                        cc.CallFunc:create(function()
                                            self.isAction = false
                                        end)

                                )
                        )
                    else
                        self.submitRecipeNum = self:GetSubmitNum()
                        self.currentGroupId = groupId
                        self:CreateJudage()
                        self:ReloadDishPos()
                        self:UpdateAssistantStatus()
                        self:RunMoodAnimation(self:GetQuestJudgeMoodGrade())
                        self:CreateDesk()
                        self:UpdateSubmitButton()
                        for k ,v in pairs(self.recipePosTable) do
                            self:UpdateDishRecipeImageByPos(k)
                        end
                    end
                end
                self:UpdateDecoration()
            end
        end
    elseif name  ==  POST.CUISINE_QUESTSECRET.sglName then
        -- 扣除消耗的尊师数量
        local diamondNum = body.diamond -  CommonUtils.GetCacheProductNum(DIAMOND_ID)
        CommonUtils.DrawRewards({{ goodsId = DIAMOND_ID , num = diamondNum}})
        local questData = {}
        questData.secretFoods = body.secretFoods
        questData.secretStatus = 1
        questData.questId =  body.requestData.questId
        tastingTourMgr:setQuestOneData(questData)

        -- 小本本
        --TODO 调起查看小本本的界面
        local viewComponent = require("Game.views.tastingTour.TastingTourVisualizeView").new({questId = self.currentQuestId})
        viewComponent:setPosition(display.center)
        uiMgr:GetCurrentScene():AddDialog(viewComponent)
    elseif name == SGL.LOOK_CUISINE_SECRET_EVENT then
        if self.viewComponent and (not tolua.isnull(self.viewComponent)) then
            self.currentQuestId = body.questId
            self:ButtionAction(self.viewComponent.viewData.bestCompentBtn)
        end
    elseif name == COUNT_DOWN_ACTION_UI_ACTION_TASTING_TOUR_QUEST then
        self:UpdateSubmitButton()
    elseif name == POST.CUISINE_GET_GROUP_REWARDS.sglName then
        -- 获取到组奖励列表
        tastingTourMgr:SetGroupRewards(body.groupRewards)
        self:EnterAnimation()
    elseif name == SGL.SEND_KEEP_ON_QUEST_EVENT then
        if not self.isAction then
            self:GetFacade():UnRegsitMediator("TastingTourGradeMediator")
            self:EnterAnimation()
        end
    elseif name == POST.CUISINE_ACCELERATERATER.sglName then
        local costDiamond = body.diamond - CommonUtils.GetCacheProductNum(DIAMOND_ID)
        CommonUtils.DrawRewards({ { goodsId = DIAMOND_ID , num = costDiamond}})
        -- 修改冷却的时间
        tastingTourMgr:setQuestOneData({questId = self.currentQuestId , leftSeconds = 0 })
        tastingTourMgr:ClearLeftSecondByQuestId(self.currentQuestId)
        --self:UpdateDialogAction(self:UpdateDialogAction())
    elseif name == SGL.SEND_QUEST_COMMENT_EVENT then
        local viewData = self.viewComponent.viewData
        if viewData.commentsBtns and ( not tolua.isnull(viewData.commentsBtns )) then
            self:ButtionAction(viewData.commentsBtns)
        end
    elseif name == POST.CUISINE_GRADE.sglName then
        -- 修改关卡数据
        CommonUtils.DrawRewards(body.rewards)
        self.isAction = true
        self.isNext = false
        local requestData = body.requestData
        self.currentStarNum = checkint(body.starNum)  or 0
        local data = {}
        data.assistantId = requestData.assistantId
        data.questId = requestData.questId
        local foods = table.split(requestData.foods ,",")
        data.foods = foods
        data.leftSeconds = body.leftSeconds
        data.score = body.score
        data.starNum = body.starNum
        tastingTourMgr:setQuestOneData(data)
        local nounPerson = self.viewComponent.viewData.nounPerson
        -- 添加倒计时
        if checkint(data.starNum) == 3 then
            data.leftSeconds = 0
        end
        tastingTourMgr:AddLeftSecond(data.questId,  data.leftSeconds)
        tastingTourMgr:StartCountDown(data.leftSeconds)
        self.viewComponent:runAction(
            cc.Sequence:create(
               cc.Spawn:create(
                   cc.TargetedAction:create(self.viewComponent.viewData.bottomLayout,
                        cc.Sequence:create(
                            cc.JumpBy:create(0.2, cc.p(0, -250) , 0,1) ,
                            cc.CallFunc:create(function()
                                self.viewComponent.viewData.bottomLayout:setVisible(false)
                            end),
                            cc.JumpBy:create(0.2, cc.p(0, 250) , 0,0)
                        )
                    ),
                   cc.Sequence:create(
                       cc.CallFunc:create(function()
                            local mediator = self:GetFacade():RetrieveMediator("TastingTourQuestMediator")
                           if mediator then
                               uiMgr:GetCurrentScene():runAction(
                                   cc.TargetedAction:create(mediator.viewComponent ,
                                      cc.Sequence:create(
                                          cc.EaseSineOut:create(cc.MoveBy:create(0.2, cc.p(550, 0))),
                                          cc.CallFunc:create(
                                              function()
                                                  self:GetFacade():UnRegsitMediator("TastingTourQuestMediator")
                                              end
                                          )
                                      )
                                   )
                               )
                           end
                       end),
                       cc.DelayTime:create(0.2)
                   )
               )     ,
               cc.CallFunc:create(
                   function()
                      local mediator =  require("Game.mediator.tastingTour.TastingTourGradeMediator").new(body)
                       self:GetFacade():RegistMediator(mediator)
                   end
               ),
               cc.CallFunc:create(function()
                   self:UpdateEatRecipeDish()
                end),
               cc.DelayTime:create(0.01),
               cc.CallFunc:create(function()
                   self:RunMoodAnimation(110 ,false )
               end),
               cc.DelayTime:create(0.01),
               cc.CallFunc:create(function()
                   self:RunLightAnimation()
                end),
               cc.DelayTime:create(0.05),
               cc.CallFunc:create(function()
                   if nounPerson and (not tolua.isnull(nounPerson)) then
                       nounPerson:addAnimation(6,SPINE_ANIMATION_NAME['6'], false )
                   end
               end)
            )
        )

    end
end
--[[
    获取到当前关卡的状态
--]]
function TastingTourLobbyMediator:GetCurrentQuestState()
    local currentQuestId = self.currentQuestId
    local questOneData = tastingTourMgr:GetQuestOneDataByQuestId(currentQuestId)
    if checkint(questOneData.leftSeconds) > 0   then
        return 5
    end
    if next(questOneData) ~= nil  then
        if checkint(questOneData.starNum) == 0 then
            return 2
        elseif checkint(questOneData.starNum) == 1 or checkint(questOneData.starNum) == 2 then
            return 3
        elseif checkint(questOneData.starNum) == 3 then
            return 4
        end
    else
        return 1
    end
    
end
--[[
    返回将要上菜的位置 如果为零 就说明满足了上菜已经满足条件了
]]
function TastingTourLobbyMediator:GetServingRecipePos()
    for k ,v in pairs(self.recipePosTable) do
        if checkint(v) == 0 and  k <= self.submitRecipeNum then
            return k
        end
    end
    return 0
end


--[[
    更新盘子的状态
--]]
function TastingTourLobbyMediator:UpdateDishRecipeImageByPos(pos)
    local recipeId = self.recipePosTable[checkint(pos)]
    -- 判断recipeId 是否存在
    local viewData = self.viewComponent.viewData
    local addLayout = viewData.dishTable[pos]
    if checkint(recipeId) ~= 0 then
        local recipePath = CommonUtils.GetGoodsIconPathById(recipeId)
        local recipeImage = addLayout:getChildByName("recipeImage")
        local qAvatar = addLayout:getChildByName("qAvatar")
        recipeImage:setTexture(recipePath)
        local teamImage = addLayout:getChildByName("teamImage")
        local foodName = addLayout:getChildByName("foodName")
        qAvatar:setToSetupPose()
        recipeImage:setOpacity(255)
        recipeImage:setVisible(true)
        teamImage:setVisible(false)
        foodName:setVisible(true)
        qAvatar:setVisible(true)
        qAvatar:setAnimation(0, 'play1', false)
        recipeImage:runAction(cc.Sequence:create(cc.DelayTime:create(0.3),  cc.FadeOut:create(0.3)))
        local recipeOneConfig = CommonUtils.GetConfig('goods','goods',recipeId) or {}
        display.commonLabelParams(foodName,{text  = recipeOneConfig.name })
    else
        local recipeImage = addLayout:getChildByName("recipeImage")
        local teamImage = addLayout:getChildByName("teamImage")
        local foodName = addLayout:getChildByName("foodName")
        recipeImage:setVisible(false)
        teamImage:setVisible(true)
        foodName:setVisible(false)
        local recipeOneConfig = CommonUtils.GetConfig('goods','goods',recipeId) or {}
        display.commonLabelParams(foodName,{text  = recipeOneConfig.name })
    end
end

function TastingTourLobbyMediator:UpdateEatRecipeDish()
    for  pos =1, self.submitRecipeNum do
        local recipeId = self.recipePosTable[checkint(pos)]
        -- 判断recipeId 是否存在
        local viewData = self.viewComponent.viewData
        local addLayout = viewData.dishTable[pos]
        if checkint(recipeId) ~= 0 then
            local recipePath = CommonUtils.GetGoodsIconPathById(recipeId)
            local recipeImage = addLayout:getChildByName("recipeImage")
            local qAvatar = addLayout:getChildByName("qAvatar")
            recipeImage:setTexture(recipePath)
            local teamImage = addLayout:getChildByName("teamImage")
            local foodName = addLayout:getChildByName("foodName")
            local lightSpine = addLayout:getChildByName("lightSpine")
            recipeImage:setOpacity(0)
            recipeImage:setVisible(true)
            teamImage:setVisible(false)
            foodName:setVisible(true)
            qAvatar:setVisible(true)
            qAvatar:setAnimation(0, 'play2', false)
            recipeImage:runAction(cc.Sequence:create(cc.DelayTime:create(0.4),
             cc.FadeIn:create(0.3),
             cc.CallFunc:create(
                 function()
                     lightSpine:setVisible(true)
                     lightSpine:setAnimation(0, 'play', false)
                 end
             ) ))
            local recipeOneConfig = CommonUtils.GetConfig('goods','goods',recipeId) or {}
            display.commonLabelParams(foodName,{text  = recipeOneConfig.name })
        else
            local recipeImage = addLayout:getChildByName("recipeImage")
            local teamImage = addLayout:getChildByName("teamImage")
            local foodName = addLayout:getChildByName("foodName")
            recipeImage:setVisible(false)
            teamImage:setVisible(true)
            foodName:setVisible(false)
            local recipeOneConfig = CommonUtils.GetConfig('goods','goods',recipeId) or {}
            display.commonLabelParams(foodName,{text  = recipeOneConfig.name })
        end
    end
end
--[[
    刷新盘子的位置
--]]
function TastingTourLobbyMediator:ReloadDishPos()
    local dishTable = self.viewComponent.viewData.dishTable
    for i = 1, 4 do
        dishTable[i]:setVisible(false)
    end
    for i = 1, self.submitRecipeNum do
        local recipeImage = dishTable[i]:getChildByName("recipeImage")
        local foodName = dishTable[i]:getChildByName("foodName")
        local teamImage = dishTable[i]:getChildByName("teamImage")
        local qAvatar =  dishTable[i]:getChildByName("qAvatar")
        dishTable[i]:setPosition(cc.p(DISH_POS[tostring(self.submitRecipeNum)][i][1],DISH_POS[tostring(self.submitRecipeNum)][i][2]))
        recipeImage:setVisible(false)
        foodName:setVisible(true)
        teamImage:setVisible(true)
        dishTable[i]:setVisible(true)
        qAvatar:setVisible(false)
    end
    
end
--[[
    更新助手的状态
--]]
function TastingTourLobbyMediator:UpdateAssistantStatus()
    local  viewData = self.viewComponent.viewData
    local addLayout = viewData.addLayout
    local teamImage = addLayout:getChildByName("teamImage")
    local chooseCookLabel = addLayout:getChildByName("chooseCookLabel")
    local qAvatar = addLayout:getChildByName("qAvatar")
    if qAvatar and (not  tolua.isnull(qAvatar)) then
        --qAvatar:removeFromParent()
        qAvatar:runAction(cc.RemoveSelf:create())
    end
    if self.currentAssistantId and checkint(self.currentAssistantId) > 0  then
        teamImage:setVisible(false)
        chooseCookLabel:setVisible(false)
        local addLayoutSize = addLayout:getContentSize()
        local cardData = gameMgr:GetCardDataById(self.currentAssistantId)
        local qAvatar = AssetsUtils.GetCardSpineNode({skinId = cardData.defaultSkinId, scale = 0.7})
        qAvatar:update(0)
        qAvatar:setTag(1)
        qAvatar:setAnimation(0, 'idle', true)
        qAvatar:setScale(0.8)
        qAvatar:setName("qAvatar")
        qAvatar:setPosition(cc.p(addLayoutSize.width/2 , addLayoutSize.height/2 - 55))
        addLayout:addChild(qAvatar)
    else
        teamImage:setVisible(true)
        chooseCookLabel:setVisible(true)
    end
end
--[[
    检查菜品是否已经上菜
--]]
function TastingTourLobbyMediator:CheckRecipeIdIsServingByRecipeId(recipeId)
    for k , v in pairs(self.recipePosTable) do
        if checkint(v) == recipeId and checkint(v) ~= 0 then
            return  true
        end
    end
    return false
end
--[[
    更新餐厅的装饰度的显示
--]]
function TastingTourLobbyMediator:UpdateDecoration()
    local decorationValue = tastingTourMgr:GetDecorationValue()
    local questOneConfig =  questConfig[tostring(self.currentQuestId)]
    local color = checkint(questOneConfig.beautyNum) >=  decorationValue and "#c0c0c0" or '#7fd95b'
    display.commonLabelParams(self.viewComponent.viewData.decorationImage, {text = string.format(__('要求美观度:%s') , questOneConfig.beautyNum) , reqW = 160 ,color = color })
end

function TastingTourLobbyMediator:Initial(key)
    self.super.Initial(self, key)
    ---@type TastingTourLobbyView
    local viewComponent =  uiMgr:SwitchToTargetScene( 'Game.views.tastingTour.TastingTourLobbyView')
    self.viewComponent = viewComponent
    self:IsVisibleBestCompentBtn()
    self:reloadAvatars()
   
end
--[[
    入场动画
--]]
function TastingTourLobbyMediator:EnterAnimation()
    local viewData = self.viewComponent.viewData
    local bottomLayout = viewData.bottomLayout
    viewData.bottomLayout:setVisible(true)
    bottomLayout:runAction(cc.Spawn:create(
        cc.Sequence:create(
            cc.JumpBy:create(0, cc.p(0,-250) , 0,1),
            cc.Spawn:create(
                cc.JumpBy:create(0.3, cc.p(0,250) , 90,1),
                cc.FadeIn:create(0.3),
                cc.TargetedAction:create(viewData.teamImage,  cc.FadeIn:create(0.3) ),
                cc.TargetedAction:create(viewData.personBaseImage,  cc.FadeIn:create(0.3) ),
                cc.TargetedAction:create(viewData.chooseCookLabel,  cc.FadeIn:create(0.3) ),
                cc.TargetedAction:create(viewData.personBaseImage,  cc.FadeIn:create(0.3) )
            ),

            cc.CallFunc:create(
            function()
                self:BindClick()
            end
            )
        ),
        cc.TargetedAction:create(viewData.requirementLayout ,
            cc.Sequence:create(
                 cc.DelayTime:create(0.1), cc.FadeIn:create(0.2)
            )
        ),
        cc.Sequence:create(
            cc.CallFunc:create( function ()
                local mediator = self:GetFacade():RetrieveMediator("TastingTourQuestMediator")
                if not  mediator then
                    mediator = require("Game.mediator.tastingTour.TastingTourQuestMediator").new({ zoneId = self.currentZone  , stageId = self.currentStageId})
                    self:GetFacade():RegistMediator(mediator)
                end
                mediator.viewComponent:setOpacity(0)
                mediator.viewComponent:runAction(
                cc.Sequence:create(
                    cc.MoveBy:create(0, cc.p(550,0) ),
                    cc.Spawn:create(
                        cc. EaseSineOut:create(cc.MoveBy:create(0.3, cc.p(-550,0) ))  ,
                        cc.FadeIn:create(0.3)
                    )
                ))
            end),
            cc.DelayTime:create(0.3)
        )
    ) )
end
function TastingTourLobbyMediator:BindClick()
    local viewData = self.viewComponent.viewData
    viewData.backBtn:setOnClickScriptHandler(function()
        AppFacade.GetInstance():RetrieveMediator("Router"):Dispatch({name = "tastingTour.TastingTourLobbyMediator"},
                                                                    {name = "tastingTour.TastingTourChooseRecipeStyleMediator"})
    end)
    viewData.submitBtn:setOnClickScriptHandler(handler(self, self.ButtionAction))
    viewData.bestCompentBtn:setOnClickScriptHandler(handler(self, self.ButtionAction))
    viewData.commentsBtns:setOnClickScriptHandler(handler(self, self.ButtionAction))
    viewData.tipBtn:setOnClickScriptHandler(handler(self, self.ButtionAction))
    viewData.petAddImage:setOnClickScriptHandler(handler(self, self.ButtionAction))
    viewData.reviewBtn:setOnClickScriptHandler(handler(self, self.ButtionAction))
    viewData.addLayout:setOnClickScriptHandler(handler(self, self.ButtionAction))
   
    for i, v in pairs(viewData.dishTable) do
        v:setTouchEnabled(true)
        v:setTag(i)
        v:setOnClickScriptHandler(handler(self, self.BindDishClick))
    end
end

function TastingTourLobbyMediator:SpineAction(event)
    if event  and event.type == "complete" then
        local index =  event.trackIndex
        local nounPerson = self.viewComponent.viewData.nounPerson
        local starNum = self.currentStarNum
        if checkint(index) == 6  then
            if  starNum ==3 then
                nounPerson:addAnimation(1, SPINE_ANIMATION_NAME["1"], true);
            elseif  starNum == 2 then
                nounPerson:addAnimation(2, SPINE_ANIMATION_NAME["2"], true);
            elseif  starNum == 1 then
                nounPerson:addAnimation(3, SPINE_ANIMATION_NAME["3"], true);
            else
                nounPerson:addAnimation(3, SPINE_ANIMATION_NAME["4"], true);
            end
            self:RemoveMoodAnimation()
            self:UpdateDialogAction(self:GetCurrentQuestState())
        else
            if index ~= 6 and index ~=0 then
                self.isAction = false

            end
            nounPerson:addAnimation(0, SPINE_ANIMATION_NAME["0"], true);
        end
    end
end

function TastingTourLobbyMediator:CreateJudage()
    local viewData = self.viewComponent.viewData
    local questData = questConfig[tostring(self.currentQuestId)] or {}
    local raterConfig  = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.RATER)
    local raterId = raterConfig[tostring( questData.raterId)].drawId or 1
    if viewData.nounPerson and (not tolua.isnull(viewData.nounPerson )) then
        viewData.nounPerson:runAction(cc.Sequence:create(cc.FadeIn:create(0.1),cc.RemoveSelf:create()) )
    end
    local spineSkinPathTable  =  {
        'effects/tastingTour/pangdun1',
        'effects/tastingTour/pangdun2',
        'effects/tastingTour/pangdun3',
        'effects/tastingTour/pangdun4'


    }
    local spineSkinPath = spineSkinPathTable[checkint(raterId)]  or spineSkinPathTable[1]
    local nounPerson = sp.SkeletonAnimation:create(string.format("%s.json", spineSkinPath ),string.format('%s.atlas', spineSkinPath ), 0.7)
    nounPerson:update(0)
    nounPerson:setTag(1)
    nounPerson:setAnimation(0, "idle", true )
    nounPerson:setName("nounPerson")
    nounPerson:setScale(1.2)
    nounPerson:setPosition(cc.p(890/2-20 ,  525/2-100))
    viewData.requirementLayout:addChild(nounPerson,1)
    viewData.nounPerson = nounPerson
    viewData.nounPerson:registerSpineEventHandler(handler(self, self.SpineAction), sp.EventType.ANIMATION_COMPLETE)
end





function TastingTourLobbyMediator:CreateDesk()
    local viewData = self.viewComponent.viewData
    local questData = questConfig[tostring(self.currentQuestId)] or {}
    local raterConfig  = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.RATER)

    local raterId = raterConfig[tostring( questData.raterId)].drawId or 1
    if  viewData.deskImage and (not  tolua.isnull(viewData.deskImage)) then
        viewData.deskImage:runAction(cc.Sequence:create(cc.FadeIn:create(0.1),cc.RemoveSelf:create()) )
    else
        viewData.dishLayout:runAction(cc.RepeatForever:create(cc.Sequence:create(
                cc.EaseSineInOut:create(cc.MoveTo:create(2, cc.p(457 , 237))),
                cc.EaseSineInOut:create(cc.MoveTo:create( 2,cc.p(457 , 227)))
        ) ))
    end
    local spineSkinPath = 'effects/tastingTour/zhuozi'
    viewData.deskImage = sp.SkeletonAnimation:create(string.format("%s%s.json", spineSkinPath , tostring(raterId)),string.format('%s%s.atlas', spineSkinPath , tostring(raterId) ), 0.7)
    viewData.deskImage:update(0)
    viewData.deskImage:setTag(1)
    viewData.deskImage:setAnimation(0, "idle", true )
    viewData.deskImage:setName("deskImage")
    viewData.deskImage:setScale(1.2)
    viewData.deskImage:setPosition(cc.p(370 ,  525/2-120))
    viewData.dishLayout:addChild(viewData.deskImage,-1)
end

function TastingTourLobbyMediator:BindDishClick(sender)
    -- 在动画中不能有上菜操作
    if self.isAction then
        return
    end
    -- 没到达下一关不能进行下一关
    if not self.isNext then
        return
    end
    local tag = sender:getTag()
    local recipeId = self.recipePosTable[tag]
    local mediator = require("Game.mediator.tastingTour.TastingTourChooseRecipeMediator")
            .new({ questId = self.currentQuestId ,pos  = tag  , stageId = self.currentStageId , recipeId = recipeId})
    self:GetFacade():RegistMediator(mediator)
end
function TastingTourLobbyMediator:ButtionAction(sender)
    if self.isAction then
        return
    end
    local tag = sender:getTag()
    if tag == BUTTON_CLICK.BACK_BTN then

    elseif tag == BUTTON_CLICK.TIP_BTN then
        --uiMgr:ShowIntroPopup({moduleId = MODULE_DATA[tostring(RemindTag.TASTINGTOUR)]})
        local str = __('餐厅美观度达到推荐要求后，在计分时会获得10分的额外附加分')
        local tipLabel = display.newLabel(0,0, fontWithColor(6,{text = str , w = 250 , ap = display.CENTER_TOP }))
        local contentSize = display.getLabelContentSize(tipLabel)
        contentSize = cc.size(contentSize.width + 40 , contentSize.height +70)
        tipLabel:setPosition(cc.p(contentSize.width/2 , contentSize.height -10 ))

        local layout = display.newLayer(contentSize.width/2, contentSize.height/2, { size = contentSize ,ap = display.LEFT_BOTTOM ,color =cc.c4b(0,0,0,0)})
        layout:addChild(tipLabel ,2)
        local image  = display.newImageView( _res('ui/common/common_bg_tips_common'),contentSize.width/2,contentSize.height/2, { scale9 = true , ap =  display.CENTER, size = contentSize})
        layout:addChild(image)
        local tipImage = display.newImageView(_res('ui/common/common_bg_tips_horn') , contentSize.width/10,3  )
        layout:addChild(tipImage)
        tipImage:setScale(-1)
        local pos = cc.p(sender:getPosition())   -- sender:getParent():convertToWorldSpace(cc.p( sender:getPosition()))
        --layout:setPosition(cc.p(pos.x , pos.y + 30))
        local wordPos =  sender:getParent():convertToWorldSpace(pos)
        layout:setName("layout")

        local closeLayer = display.newLayer(display.cx, display.cy , {ap = display.CENTER , color = cc.c4b(0,0,0,0) , enable = true , cb = function(sender)
              sender:runAction(cc.RemoveSelf:create())
        end})
        uiMgr:GetCurrentScene():AddDialog(closeLayer)
        closeLayer:addChild(layout)
        local pos = closeLayer:convertToNodeSpace(wordPos)
        layout:setPosition(cc.p(pos.x + 20, pos.y +30 ) )
        local decValue = tastingTourMgr:GetDecorationValue()
        local label =  display.newLabel(20,35  , fontWithColor(11, {ap = display.LEFT_CENTER ,w = 270  ,text = string.format(__('当前餐厅美观度 %d') ,decValue ) }))
        layout:addChild(label)


    elseif tag == BUTTON_CLICK.BEST_COMPENT_BTN then
        if not  self.currentQuestId then
            return
        end
        local consumeDiamond = checkint( questConfig[tostring(self.currentQuestId)].moneyCost)
        local questData = tastingTourMgr:GetQuestOneDataByQuestId(self.currentQuestId)
        if table.nums(questData) > 0 then
            --if checkint(questData.starNum ) == 3  then
            --    uiMgr:ShowInformationTips(__('该关卡已经三星通关'))
            --    return
            --end
            -- 关卡是否存在数据
            local secretStatus = checkint(questData.secretStatus)
            if secretStatus == 0 then
                local diamondNum = CommonUtils.GetCacheProductNum(DIAMOND_ID)
                if diamondNum >= consumeDiamond  then
                    if self.currentQuestId > 0  then
                        local CommonTip  = require( 'common.NewCommonTip' ).new({text  = __('查看提示') , richtext = {
                            {text = __('是否消耗'), fontSize = 22, color = '#4c4c4c'},
                            {text = consumeDiamond, fontSize = 24, color = '#da3c3c'},
                            {text =__('幻晶石查看提示，了解美食家期望的菜品'), fontSize = 22, color = '#4c4c4c'}},
                                                                                 isOnlyOK = false, callback = function ()
                                self:SendSignal(POST.CUISINE_QUESTSECRET.cmdName ,{questId  = self.currentQuestId})
                            end,
                                                                                 cancelBack = function ()
                                                                                 end})
                        CommonTip:setPosition(display.center)
                        local scene = uiMgr:GetCurrentScene()
                        scene:AddDialog(CommonTip)
                        local  pos = cc.p(CommonTip.tip:getPosition())
                        CommonTip.tip:setPosition(cc.p(pos.x , pos.y + 100))
                        display.commonLabelParams(CommonTip.tip , {fontSize = 26, color = '#4c4c4c'} )
                    end
                else
                    if GAME_MODULE_OPEN.NEW_STORE then
                        app.uiMgr:showDiamonTips()
                    else
                        uiMgr:ShowInformationTips(__('幻晶石不足，请前往充值'))
                    end
                end
            else
                --TODO 调起查看小本本的界面
                local viewComponent = require("Game.views.tastingTour.TastingTourVisualizeView").new({questId = self.currentQuestId})
                viewComponent:setPosition(display.center)
                uiMgr:GetCurrentScene():AddDialog(viewComponent)
            end
        else
            -- 还没有操作该关卡
            if self.currentQuestId > 0  then
                self:SendSignal(POST.CUISINE_QUESTSECRET.cmdName ,{questId  = self.currentQuestId})
            end
        end
    elseif tag == BUTTON_CLICK.SWITCH_ASSISTANT then
        local  mediator =  require("Game.mediator.tastingTour.TastingTourSwitchAssistantMediator").new({chooseCardId = self.currentAssistantId})
        self:GetFacade():RegistMediator(mediator)
    elseif tag == BUTTON_CLICK.REVIEW_BTN then  -- 回顾事件
        if  not self.currentQuestId then
            uiMgr:ShowInformationTips(__('请先选择关卡'))
            return
        end
        local questData = tastingTourMgr:GetQuestOneDataByQuestId(self.currentQuestId)
        local questData = questData.bestFoods or {}
        if ( not  next(questData))   then
            uiMgr:ShowInformationTips(__('从未上过菜，不能使用此功能'))
            return
        end
        -- 获取到当前关卡的数据信息
        self.recipePosTable = {0,0,0,0}

        local foods = questData.foods or {}
        for i, v in pairs(foods) do
            self.recipePosTable[i] = checkint(v)
        end
        self.currentAssistantId =  checkint(questData.assistantId)
        for i =1 , self.submitRecipeNum do
            self:UpdateDishRecipeImageByPos(i)
        end
        self:UpdateAssistantStatus()
        self:RunMoodAnimation(self:GetQuestJudgeMoodGrade())
        self:UpdateSubmitButton()
    elseif tag == BUTTON_CLICK.SUBMIT_BTN then -- 提交事件
        -- 首先检测是否满足上菜条件
        local questData = tastingTourMgr:GetQuestOneDataByQuestId(self.currentQuestId)
        if  not self.currentQuestId then
            uiMgr:ShowInformationTips(__('请先选择关卡'))
            return
        end
        if checkint(questData.starNum)  == 3  then
            uiMgr:ShowInformationTips(__('该关卡评分已经到达三星，不能重复挑战'))
            return
        end
        local  function func()
            local isFullServing = self:GetServingRecipePos()
            if isFullServing == 0 and checkint(self.currentAssistantId)  > 0 then
                local str = ""
                for i =1 , self.submitRecipeNum do
                    str = str  ..  self.recipePosTable[i]
                    if i ~=  self.submitRecipeNum then
                        str = str  ..  ","
                    end
                end
                self:SendSignal(POST.CUISINE_GRADE.cmdName, {
                    foods = str ,
                    assistantId =  self.currentAssistantId ,
                    questId = self.currentQuestId
                })
            else
                if isFullServing ~= 0 then
                    uiMgr:ShowInformationTips(__('请添加菜品'))
                else
                    uiMgr:ShowInformationTips(__('请添加厨师'))
                end
            end
        end
        if checkint(questData.leftSeconds)  > 0  then
            local  costDiamond = math.ceil(questData.leftSeconds/60)
            local diamondCount = CommonUtils.GetCacheProductNum(DIAMOND_ID)
            if diamondCount >= costDiamond then
                local CommonTip  = require( 'common.NewCommonTip' ).new({ text  = __('唤回美食家的心'), richtext = {
                    {text = __('美食家暂时不想品鉴你做的菜，是否消耗'), fontSize = 22, color = '#4c4c4c'},
                    {text = costDiamond, fontSize = 24, color = '#da3c3c'},
                    {text =__('幻晶石唤回美食家的心，提前结束关卡等待结束时间'), fontSize = 22, color = '#4c4c4c'}},
                                                                         isOnlyOK = false, callback = function ()
                        self:SendSignal(POST.CUISINE_ACCELERATERATER.cmdName,{questId = self.currentQuestId })
                    end,
                                                                         cancelBack = function ()
                                                                         end})
                CommonTip:setPosition(display.center)
                local scene = uiMgr:GetCurrentScene()
                scene:AddDialog(CommonTip)
                local  pos = cc.p(CommonTip.tip:getPosition())
                CommonTip.tip:setPosition(cc.p(pos.x , pos.y + 100))
                display.commonLabelParams(CommonTip.tip , {fontSize = 26, color = '#4c4c4c'} )
            else
                if GAME_MODULE_OPEN.NEW_STORE then
                    app.uiMgr:showDiamonTips()
                else
                    uiMgr:ShowInformationTips(__('幻晶石不足。'))
                end
            end
        else
            func()
        end
    elseif tag == BUTTON_CLICK.COMMENTS_BTN then
        if self.currentQuestId then
            local questConfig =  tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
            local questOneConfig = questConfig[tostring(self.currentQuestId)]
            if questOneConfig then
                local stageTitleText = questOneConfig.name
                local mediator = require("Game.mediator.QuestCommentMediator")
                        .new({stageTitleText = stageTitleText , stageId = self.currentQuestId })
                self:GetFacade():RegistMediator(mediator)
            end
        else
            uiMgr:ShowInformationTips(__("请选择关卡"))
        end
    end
end

function TastingTourLobbyMediator:reloadAvatars()
    local avatarMap = tastingTourMgr:GetRestaurantDecorationData()
    local viewData = self:GetViewComponent().viewData
    for avatarUuid, avatarData in pairs(avatarMap or {}) do
        local avatarId     = checkint(avatarData.goodsId)
        local avatarConf   = CommonUtils.GetConfigNoParser('restaurant', 'avatar', avatarId) or {}
        local locationConf = CommonUtils.GetConfigNoParser('restaurant', 'avatarLocation', avatarId) or {}
        local avatarType   = RestaurantUtils.GetAvatarSubType(avatarConf.mainType, avatarConf.subType)
        if avatarType == RESTAURANT_AVATAR_TYPE.WALL then
            local location   = string.split(checkstr(checktable(locationConf.location)[1]), ',')
            local avatarX    = viewData.avatarLayer:getContentSize().width/2
            local avatarNode = AvatarBaseNode.new({confId = avatarId, x = avatarX, y = location[2], ap = display.CENTER_BOTTOM})
            viewData.avatarWallLayer:addChild(avatarNode)

        elseif avatarType == RESTAURANT_AVATAR_TYPE.FLOOR then
            local location   = string.split(checkstr(checktable(locationConf.location)[1]), ',')
            local avatarX    = viewData.avatarLayer:getContentSize().width/2
            local avatarNode = AvatarBaseNode.new({confId = avatarId, x = avatarX, y = location[2], ap = display.CENTER_BOTTOM})
            viewData.avatarFloorLayer:addChild(avatarNode)

        elseif avatarType == RESTAURANT_AVATAR_TYPE.CEILING then
            local location   = string.split(checkstr(checktable(locationConf.location)[1]), ',')
            local avatarX    = viewData.avatarLayer:getContentSize().width/2
            local avatarNode = AvatarBaseNode.new({confId = avatarId, x = avatarX, y = location[2], ap = display.CENTER_BOTTOM})
            viewData.avatarCeilingLayer:addChild(avatarNode)

        else
            local dragNode = AvatarDragNode.new({id = avatarUuid, avatarId = avatarId, nType = avatarType, configInfo = locationConf, effectLayer = viewData.effectLayer})
            display.commonUIParams(dragNode, {ap = display.LEFT_BOTTOM, po = cc.p(avatarData.location.x, avatarData.location.y)})

            local nodeTile = RestaurantUtils.ConvertPixelsToTiled(cc.p(dragNode:getPosition()))
            dragNode:setLocalZOrder(RESTAURANT_TILED_HEIGHT - nodeTile.h)
            viewData.avatarNodeLayer:addChild(dragNode)
        end
    end
end
--
function TastingTourLobbyMediator:IsVisibleBestCompentBtn()
    local questData = tastingTourMgr:GetQuestOneDataByQuestId(self.currentQuestId)
    local viewData = self.viewComponent.viewData
    if next(questData) then
        viewData.bestCompentBtn:setVisible(true)
    else
        viewData.bestCompentBtn:setVisible(false)
    end
end
--[[
    获取当前关卡的心情得分
--]]
function TastingTourLobbyMediator:GetQuestJudgeMoodGrade()
    if not self.currentQuestId then
        return
    end
    local rateConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.RATER)
    local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
    local raterId = questConfig[tostring(self.currentQuestId)].raterId
    local rateOneData = rateConfig[tostring(raterId)] or {}
    local moodValue = checkint(rateOneData.mood)
    if not self.currentAssistantId then
        return moodValue
    end
    local skillData = app.restaurantMgr:GetCardBusinessBuff(self.currentAssistantId, TASTING_TOUR_ASSISTANT, CARD_BUSINESS_SKILL_MODEL_COOKCHAPTER, true,{from = 2}) or {}
    for i, v in pairs(skillData) do
        if v.allEffectNum and checkint(v.allEffectNum.targetType) ==  checkint(RestaurantSkill.SKILL_TYPE_TASTING_TOUR_ADD_JUDGE_MOOD_EFFECT )  then
            local num = CommonUtils.GetAssistantEffectNum( v.allEffectNum )
            moodValue = moodValue + num
        end
    end
    return moodValue
end
function TastingTourLobbyMediator:RemoveMoodAnimation()
    local moodNode = self.viewComponent.viewData.requirementLayout:getChildByName("moodNode")
    if  moodNode then
        moodNode:runAction(cc.Sequence:create(cc.Hide:create(), cc.RemoveSelf:create()))
    end
end
--[[
    播放心情的动画
--]]
function TastingTourLobbyMediator:RunMoodAnimation(moodValue)
    if not self.currentQuestId then
        return
    end
    local rateConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.RATER)
    local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
    local raterId = questConfig[tostring(self.currentQuestId)].raterId
    local rateOneData = rateConfig[tostring(raterId)] or {}

    local spinePathTable = {
        "effects/tastingTour/expression_3",
        "effects/tastingTour/expression_2",
        "effects/tastingTour/expression_1"
    }
    local spineSkinPath =  "effects/tastingTour/expression_1"
    for i =1 , table.nums(rateOneData.ranges) do
        if moodValue  >= checkint(rateOneData.ranges[i][1]) and moodValue  <=  checkint(rateOneData.ranges[i][2]) then
            spineSkinPath = spinePathTable[i]
        end
    end

    local moodNode = self.viewComponent.viewData.requirementLayout:getChildByName("moodNode")
    if  moodNode then
        moodNode:runAction(cc.Sequence:create(cc.Hide:create(), cc.RemoveSelf:create()))
    end
    local moodNode = sp.SkeletonAnimation:create(string.format("%s.json", spineSkinPath),string.format('%s.atlas', spineSkinPath), 0.7)
    moodNode:update(0)
    moodNode:setTag(1)
    moodNode:setAnimation(0, 'idle', true)
    moodNode:setName("moodNode")
    moodNode:setPosition(cc.p(890/2 +70 , 525-80))
    --moodNode:setRotation(30)
    self.viewComponent.viewData.requirementLayout:addChild(moodNode,1)
end


--[[
    播放光幕动画
--]]
function TastingTourLobbyMediator:RunLightAnimation()
    local spineSkinPath = "effects/tastingTour/shanguang"
    local lightNode = self.viewComponent.viewData.requirementLayout:getChildByName("lightNode")
    if not  lightNode then
        lightNode = sp.SkeletonAnimation:create(string.format("%s.json", spineSkinPath),string.format('%s.atlas', spineSkinPath), 0.7)
        lightNode:update(0)
        lightNode:setTag(1)
        lightNode:setName("lightNode")
        lightNode:setPosition(cc.p(890/2 , 525/2))
        lightNode:setAnimation(0, 'play', false)
        self.viewComponent.viewData.requirementLayout:addChild(lightNode)
    else
        lightNode:setAnimation(0, 'play', false)
    end
end

function TastingTourLobbyMediator:UpdateSubmitButton()
    if not self.currentQuestId then return end
    local viewData = self.viewComponent.viewData
    local submitBtn = viewData.submitBtn
    local buyBtn = viewData.buyBtn
    local timeBtn = viewData.timeBtn
    local questData = tastingTourMgr:GetQuestOneDataByQuestId(self.currentQuestId)
    if checkint(questData.leftSeconds) > 0   then

        buyBtn:setVisible(true)
        submitBtn:setNormalImage(_res('ui/tastingTour/lobby/fishtravel_main_bar_btn_start_disable'))
        submitBtn:setDisabledImage(_res('ui/tastingTour/lobby/fishtravel_main_bar_btn_start_disable'))
        submitBtn:setSelectedImage(_res('ui/tastingTour/lobby/fishtravel_main_bar_btn_start_disable'))
        local costDiamond = math.ceil(checkint(questData.leftSeconds)/60)
        display.commonLabelParams(buyBtn, fontWithColor( '14', {text = tostring(costDiamond)}))
        display.commonLabelParams(timeBtn , {text = string.toMinutesSecondsMilliseconds(questData.leftSeconds)})
    else
        local str = _res('ui/tastingTour/lobby/fishtravel_main_bar_btn_start')
        if checkint(self.currentAssistantId)  > 0 then
            for i = 1, self.submitRecipeNum do
                if checkint(self.recipePosTable[i]) == 0   then
                    str = _res('ui/tastingTour/lobby/fishtravel_main_bar_btn_start_disable')
                    break
                end
            end
        else
            str = _res('ui/tastingTour/lobby/fishtravel_main_bar_btn_start_disable')
        end
        buyBtn:setVisible(false)
        submitBtn:setNormalImage(str)
        submitBtn:setDisabledImage(str)
        submitBtn:setSelectedImage(str)
    end
end
function TastingTourLobbyMediator:UpdateDialogAction(state)
    local questConfig = tastingTourMgr:GetConfigDataByName(tastingTourMgr:GetConfigParse().TYPE.QUEST)
    local raterId = questConfig[tostring(self.currentQuestId)].raterId
    -- 计算出评委要说的话
    state = 5  * (raterId-1) + state

    local raterBubbleConfig  = CommonUtils.GetConfigAllMess('raterBubble', 'cuisine')
    local raterOneBubbleConfig = raterBubbleConfig[tostring(state)]
    local viewData = self.viewComponent.viewData
    local str = raterOneBubbleConfig.message or  ""
    display.commonLabelParams(viewData.dialogLabel, {})
    viewData.dialogBgLayout:stopAllActions()
    viewData.dialogBgLayout:setVisible(true)
    viewData.dialogBgLayout:setScale(0.1)
    viewData.dialogBgLayout:setOpacity(255)
    viewData.dialogLabel:setVisible(false)
    display.commonLabelParams(viewData.dialogLabel , {text = "" })


    viewData.dialogBgLayout:runAction(
        cc.Sequence:create(
            cc.EaseBackOut:create(cc.ScaleTo:create(0.8, 1)),
            cc.TargetedAction:create(
                    viewData.dialogLabel ,
                    cc.Sequence:create(
                        cc.CallFunc:create(function ()
                            viewData.dialogLabel:setVisible(false)
                            display.commonLabelParams(viewData.dialogLabel , {text = str })

                        end),
                        cc.Spawn:create(
                            cc.Sequence:create(
                                cc.DelayTime:create(0.02) ,
                                cc.CallFunc:create(function ()
                                    viewData.dialogLabel:setVisible(true)
                                end),
                                cc.DelayTime:create(0.28)
                            ),
                            TypewriterAction:create(0.3)
                        )

                    )
            ),
            cc.DelayTime:create(5),
            cc.FadeOut:create(0.3)
        )
    )
end
--[[
    进入页面所做的请求
--]]
function TastingTourLobbyMediator:EnterLayer()
    self:SendSignal(POST.CUISINE_GET_GROUP_REWARDS.cmdName, {stageId = self.currentStageId})
end
-----------------------------------
-- regist/unRegist
function TastingTourLobbyMediator:OnRegist()
    regPost(POST.CUISINE_DRAWTOTALREWARD)
    regPost(POST.CUISINE_GET_GROUP_REWARDS)
    regPost(POST.CUISINE_ACCELERATERATER)
    regPost(POST.CUISINE_GRADE)
    regPost(POST.CUISINE_QUESTSECRET)
    self:EnterLayer()
end

function TastingTourLobbyMediator:OnUnRegist()
    unregPost(POST.CUISINE_DRAWTOTALREWARD)
    unregPost(POST.CUISINE_GET_GROUP_REWARDS)
    unregPost(POST.CUISINE_ACCELERATERATER)
    unregPost(POST.CUISINE_GRADE)
    unregPost(POST.CUISINE_QUESTSECRET)
    self:GetFacade():UnRegsitMediator("TastingTourQuestMediator")
    self:GetFacade():UnRegsitMediator("TastingTourGradeMediator")
end
return TastingTourLobbyMediator
